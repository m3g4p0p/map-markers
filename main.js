(()=>{var t,e,i,n,o={5045:(t,e,i)=>{"use strict";i.d(e,{Z:()=>s});var n,o=i(9179),r=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const s=function(t){function e(e){var i=this,n="Assertion failed. See https://openlayers.org/en/"+("latest"===o.q4?o.q4:"v"+o.q4.split("-")[0])+"/doc/errors/#"+e+" for details.";return(i=t.call(this,n)||this).code=e,i.name="AssertionError",i.message=n,i}return r(e,t),e}(Error)},8426:(t,e,i)=>{"use strict";i.d(e,{Z:()=>c});var n,o=i(5045),r=i(8493),s=i(9629),a=i(9520),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),h="length",u=function(t){function e(e,i,n){var o=t.call(this,e)||this;return o.element=i,o.index=n,o}return l(e,t),e}(a.ZP);const c=function(t){function e(e,i){var n=t.call(this)||this,o=i||{};if(n.unique_=!!o.unique,n.array_=e||[],n.unique_)for(var r=0,s=n.array_.length;r<s;++r)n.assertUnique_(n.array_[r],r);return n.updateLength_(),n}return l(e,t),e.prototype.clear=function(){for(;this.getLength()>0;)this.pop()},e.prototype.extend=function(t){for(var e=0,i=t.length;e<i;++e)this.push(t[e]);return this},e.prototype.forEach=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)t(e[i],i,e)},e.prototype.getArray=function(){return this.array_},e.prototype.item=function(t){return this.array_[t]},e.prototype.getLength=function(){return this.get(h)},e.prototype.insertAt=function(t,e){this.unique_&&this.assertUnique_(e),this.array_.splice(t,0,e),this.updateLength_(),this.dispatchEvent(new u(s.Z.ADD,e,t))},e.prototype.pop=function(){return this.removeAt(this.getLength()-1)},e.prototype.push=function(t){this.unique_&&this.assertUnique_(t);var e=this.getLength();return this.insertAt(e,t),this.getLength()},e.prototype.remove=function(t){for(var e=this.array_,i=0,n=e.length;i<n;++i)if(e[i]===t)return this.removeAt(i)},e.prototype.removeAt=function(t){var e=this.array_[t];return this.array_.splice(t,1),this.updateLength_(),this.dispatchEvent(new u(s.Z.REMOVE,e,t)),e},e.prototype.setAt=function(t,e){var i=this.getLength();if(t<i){this.unique_&&this.assertUnique_(e,t);var n=this.array_[t];this.array_[t]=e,this.dispatchEvent(new u(s.Z.REMOVE,n,t)),this.dispatchEvent(new u(s.Z.ADD,e,t))}else{for(var o=i;o<t;++o)this.insertAt(o,void 0);this.insertAt(t,e)}},e.prototype.updateLength_=function(){this.set(h,this.array_.length)},e.prototype.assertUnique_=function(t,e){for(var i=0,n=this.array_.length;i<n;++i)if(this.array_[i]===t&&i!==e)throw new o.Z(58)},e}(r.ZP)},9629:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={ADD:"add",REMOVE:"remove"}},967:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n=function(){function t(){this.disposed=!1}return t.prototype.dispose=function(){this.disposed||(this.disposed=!0,this.disposeInternal())},t.prototype.disposeInternal=function(){},t}()},1256:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={IDLE:0,LOADING:1,LOADED:2,ERROR:3,EMPTY:4}},6:(t,e,i)=>{"use strict";i.d(e,{Z:()=>o});var n=i(3381);const o={SINGLECLICK:"singleclick",CLICK:n.Z.CLICK,DBLCLICK:n.Z.DBLCLICK,POINTERDRAG:"pointerdrag",POINTERMOVE:"pointermove",POINTERDOWN:"pointerdown",POINTERUP:"pointerup",POINTEROVER:"pointerover",POINTEROUT:"pointerout",POINTERENTER:"pointerenter",POINTERLEAVE:"pointerleave",POINTERCANCEL:"pointercancel"}},188:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={POSTRENDER:"postrender",MOVESTART:"movestart",MOVEEND:"moveend"}},8493:(t,e,i)=>{"use strict";i.d(e,{v_:()=>f,ZP:()=>d});var n,o=i(9520),r=i(3910),s=i(6834),a=i(3580),l=i(9179),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),u=function(t){function e(e,i,n){var o=t.call(this,e)||this;return o.key=i,o.oldValue=n,o}return h(e,t),e}(o.ZP),c=function(t){function e(e){var i=t.call(this)||this;return(0,l.sq)(i),i.values_=null,void 0!==e&&i.setProperties(e),i}return h(e,t),e.prototype.get=function(t){var e;return this.values_&&this.values_.hasOwnProperty(t)&&(e=this.values_[t]),e},e.prototype.getKeys=function(){return this.values_&&Object.keys(this.values_)||[]},e.prototype.getProperties=function(){return this.values_&&(0,a.f0)({},this.values_)||{}},e.prototype.hasProperties=function(){return!!this.values_},e.prototype.notify=function(t,e){var i;i=f(t),this.dispatchEvent(new u(i,t,e)),i=r.Z.PROPERTYCHANGE,this.dispatchEvent(new u(i,t,e))},e.prototype.set=function(t,e,i){var n=this.values_||(this.values_={});if(i)n[t]=e;else{var o=n[t];n[t]=e,o!==e&&this.notify(t,o)}},e.prototype.setProperties=function(t,e){for(var i in t)this.set(i,t[i],e)},e.prototype.applyProperties=function(t){t.values_&&(0,a.f0)(this.values_||(this.values_={}),t.values_)},e.prototype.unset=function(t,e){if(this.values_&&t in this.values_){var i=this.values_[t];delete this.values_[t],(0,a.xb)(this.values_)&&(this.values_=null),e||this.notify(t,i)}},e}(s.Z),p={};function f(t){return p.hasOwnProperty(t)?p[t]:p[t]="change:"+t}const d=c},3910:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={PROPERTYCHANGE:"propertychange"}},6834:(t,e,i)=>{"use strict";i.d(e,{Z:()=>l});var n,o=i(6575),r=i(3381),s=i(3002),a=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const l=function(t){function e(){var e=t.call(this)||this;return e.revision_=0,e}return a(e,t),e.prototype.changed=function(){++this.revision_,this.dispatchEvent(r.Z.CHANGE)},e.prototype.getRevision=function(){return this.revision_},e.prototype.on=function(t,e){if(Array.isArray(t)){for(var i=t.length,n=new Array(i),o=0;o<i;++o)n[o]=(0,s.oL)(this,t[o],e);return n}return(0,s.oL)(this,t,e)},e.prototype.once=function(t,e){var i;if(Array.isArray(t)){var n=t.length;i=new Array(n);for(var o=0;o<n;++o)i[o]=(0,s.Vx)(this,t[o],e)}else i=(0,s.Vx)(this,t,e);return e.ol_key=i,i},e.prototype.un=function(t,e){var i=e.ol_key;if(i)!function(t){if(Array.isArray(t))for(var e=0,i=t.length;e<i;++e)(0,s.bN)(t[e]);else(0,s.bN)(t)}(i);else if(Array.isArray(t))for(var n=0,o=t.length;n<o;++n)this.removeEventListener(t[n],e);else this.removeEventListener(t,e)},e}(o.Z)},9682:(t,e,i)=>{"use strict";function n(t,e){return t>e?1:t<e?-1:0}function o(t,e){return t.indexOf(e)>=0}function r(t,e,i){var n=t.length;if(t[0]<=e)return 0;if(e<=t[n-1])return n-1;var o=void 0;if(i>0){for(o=1;o<n;++o)if(t[o]<e)return o-1}else if(i<0){for(o=1;o<n;++o)if(t[o]<=e)return o}else for(o=1;o<n;++o){if(t[o]==e)return o;if(t[o]<e)return t[o-1]-e<e-t[o]?o-1:o}return n-1}function s(t,e,i){for(;e<i;){var n=t[e];t[e]=t[i],t[i]=n,++e,--i}}function a(t,e){for(var i=Array.isArray(e)?e:[e],n=i.length,o=0;o<n;o++)t[t.length]=i[o]}function l(t,e){var i=t.length;if(i!==e.length)return!1;for(var n=0;n<i;n++)if(t[n]!==e[n])return!1;return!0}function h(t,e,i){var o=e||n;return t.every((function(e,n){if(0===n)return!0;var r=o(t[n-1],e);return!(r>0||i&&0===r)}))}i.d(e,{kK:()=>n,q9:()=>o,h7:()=>r,FZ:()=>s,l7:()=>a,fS:()=>l,pT:()=>h})},8906:(t,e,i)=>{"use strict";i.d(e,{h:()=>o});var n=i(5045);function o(t,e){if(!t)throw new n.Z(e)}},8913:(t,e,i)=>{"use strict";i.d(e,{XC:()=>a,_2:()=>c,BB:()=>f});var n=i(8906),o=i(1882),r=/^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i,s=/^([a-z]*)$|^hsla?\(.*\)$/i;function a(t){return"string"==typeof t?t:f(t)}var l,h,u=(l={},h=0,function(t){var e;if(l.hasOwnProperty(t))e=l[t];else{if(h>=1024){var i=0;for(var o in l)0==(3&i++)&&(delete l[o],--h)}e=function(t){var e,i,o,a,l;if(s.exec(t)&&(t=function(t){var e=document.createElement("div");if(e.style.color=t,""!==e.style.color){document.body.appendChild(e);var i=getComputedStyle(e).color;return document.body.removeChild(e),i}return""}(t)),r.exec(t)){var h,u=t.length-1;h=u<=4?1:2;var c=4===u||8===u;e=parseInt(t.substr(1+0*h,h),16),i=parseInt(t.substr(1+1*h,h),16),o=parseInt(t.substr(1+2*h,h),16),a=c?parseInt(t.substr(1+3*h,h),16):255,1==h&&(e=(e<<4)+e,i=(i<<4)+i,o=(o<<4)+o,c&&(a=(a<<4)+a)),l=[e,i,o,a/255]}else 0==t.indexOf("rgba(")?p(l=t.slice(5,-1).split(",").map(Number)):0==t.indexOf("rgb(")?((l=t.slice(4,-1).split(",").map(Number)).push(1),p(l)):(0,n.h)(!1,14);return l}(t),l[t]=e,++h}return e});function c(t){return Array.isArray(t)?t:u(t)}function p(t){return t[0]=(0,o.uZ)(t[0]+.5|0,0,255),t[1]=(0,o.uZ)(t[1]+.5|0,0,255),t[2]=(0,o.uZ)(t[2]+.5|0,0,255),t[3]=(0,o.uZ)(t[3],0,1),t}function f(t){var e=t[0];e!=(0|e)&&(e=e+.5|0);var i=t[1];i!=(0|i)&&(i=i+.5|0);var n=t[2];return n!=(0|n)&&(n=n+.5|0),"rgba("+e+","+i+","+n+","+(void 0===t[3]?1:t[3])+")"}},5120:(t,e,i)=>{"use strict";i.d(e,{y:()=>o});var n=i(8913);function o(t){return Array.isArray(t)?(0,n.BB)(t):t}},7644:(t,e,i)=>{"use strict";i.d(e,{oj:()=>n,$A:()=>o,XV:()=>r,hg:()=>s,hN:()=>a,p:()=>u});var n="ol-hidden",o="ol-selectable",r="ol-unselectable",s="ol-control",a="ol-collapsed",l=new RegExp(["^\\s*(?=(?:(?:[-a-z]+\\s*){0,2}(italic|oblique))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(small-caps))?)","(?=(?:(?:[-a-z]+\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)","(?:(?:normal|\\1|\\2|\\3)\\s*){0,3}((?:xx?-)?","(?:small|large)|medium|smaller|larger|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx]))","(?:\\s*\\/\\s*(normal|[\\.\\d]+(?:\\%|in|[cem]m|ex|p[ctx])?))","?\\s*([-,\\\"\\'\\sa-z]+?)\\s*$"].join(""),"i"),h=["style","variant","weight","size","lineHeight","family"],u=function(t){var e=t.match(l);if(!e)return null;for(var i={lineHeight:"normal",size:"1.2em",style:"normal",weight:"normal",variant:"normal"},n=0,o=h.length;n<o;++n){var r=e[n+1];void 0!==r&&(i[h[n]]=r)}return i.families=i.family.split(/,\s?/),i}},5386:(t,e,i)=>{"use strict";i.d(e,{E4:()=>o,iO:()=>r,Pb:()=>s,$H:()=>a,ZF:()=>l,ep:()=>h,hF:()=>u});var n=i(1358);function o(t,e,i){var o=i&&i.length?i.shift():n.Id?new OffscreenCanvas(t||300,e||300):document.createElement("canvas");return t&&(o.width=t),e&&(o.height=e),o.getContext("2d")}function r(t){var e=t.offsetWidth,i=getComputedStyle(t);return e+(parseInt(i.marginLeft,10)+parseInt(i.marginRight,10))}function s(t){var e=t.offsetHeight,i=getComputedStyle(t);return e+(parseInt(i.marginTop,10)+parseInt(i.marginBottom,10))}function a(t,e){var i=e.parentNode;i&&i.replaceChild(t,e)}function l(t){return t&&t.parentNode?t.parentNode.removeChild(t):null}function h(t){for(;t.lastChild;)t.removeChild(t.lastChild)}function u(t,e){for(var i=t.childNodes,n=0;;++n){var o=i[n],r=e[n];if(!o&&!r)break;o!==r&&(o?r?t.insertBefore(r,o):(t.removeChild(o),--n):t.appendChild(r))}}},6320:(t,e,i)=>{"use strict";function n(t){return Math.pow(t,3)}function o(t){return 1-n(1-t)}function r(t){return 3*t*t-2*t*t*t}function s(t){return t}i.d(e,{YQ:()=>n,Vv:()=>o,rd:()=>r,GE:()=>s})},3002:(t,e,i)=>{"use strict";i.d(e,{oL:()=>o,Vx:()=>r,bN:()=>s});var n=i(3580);function o(t,e,i,n,o){if(n&&n!==t&&(i=i.bind(n)),o){var r=i;i=function(){t.removeEventListener(e,i),r.apply(this,arguments)}}var s={target:t,type:e,listener:i};return t.addEventListener(e,i),s}function r(t,e,i,n){return o(t,e,i,n,!0)}function s(t){t&&t.target&&(t.target.removeEventListener(t.type,t.listener),(0,n.ZH)(t))}},9520:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>n});const n=function(){function t(t){this.propagationStopped,this.type=t,this.target=null}return t.prototype.preventDefault=function(){this.propagationStopped=!0},t.prototype.stopPropagation=function(){this.propagationStopped=!0},t}()},3381:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={CHANGE:"change",ERROR:"error",BLUR:"blur",CLEAR:"clear",CONTEXTMENU:"contextmenu",CLICK:"click",DBLCLICK:"dblclick",DRAGENTER:"dragenter",DRAGOVER:"dragover",DROP:"drop",FOCUS:"focus",KEYDOWN:"keydown",KEYPRESS:"keypress",LOAD:"load",RESIZE:"resize",TOUCHMOVE:"touchmove",WHEEL:"wheel"}},6575:(t,e,i)=>{"use strict";i.d(e,{Z:()=>h});var n,o=i(967),r=i(9520),s=i(4011),a=i(3580),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const h=function(t){function e(e){var i=t.call(this)||this;return i.eventTarget_=e,i.pendingRemovals_=null,i.dispatching_=null,i.listeners_=null,i}return l(e,t),e.prototype.addEventListener=function(t,e){if(t&&e){var i=this.listeners_||(this.listeners_={}),n=i[t]||(i[t]=[]);-1===n.indexOf(e)&&n.push(e)}},e.prototype.dispatchEvent=function(t){var e="string"==typeof t?new r.ZP(t):t,i=e.type;e.target||(e.target=this.eventTarget_||this);var n,o=this.listeners_&&this.listeners_[i];if(o){var a=this.dispatching_||(this.dispatching_={}),l=this.pendingRemovals_||(this.pendingRemovals_={});i in a||(a[i]=0,l[i]=0),++a[i];for(var h=0,u=o.length;h<u;++h)if(!1===(n="handleEvent"in o[h]?o[h].handleEvent(e):o[h].call(this,e))||e.propagationStopped){n=!1;break}if(--a[i],0===a[i]){var c=l[i];for(delete l[i];c--;)this.removeEventListener(i,s.Zn);delete a[i]}return n}},e.prototype.disposeInternal=function(){this.listeners_&&(0,a.ZH)(this.listeners_)},e.prototype.getListeners=function(t){return this.listeners_&&this.listeners_[t]||void 0},e.prototype.hasListener=function(t){return!!this.listeners_&&(t?t in this.listeners_:Object.keys(this.listeners_).length>0)},e.prototype.removeEventListener=function(t,e){var i=this.listeners_&&this.listeners_[t];if(i){var n=i.indexOf(e);-1!==n&&(this.pendingRemovals_&&t in this.pendingRemovals_?(i[n]=s.Zn,++this.pendingRemovals_[t]):(i.splice(n,1),0===i.length&&delete this.listeners_[t]))}},e}(o.Z)},6403:(t,e,i)=>{"use strict";i.d(e,{$6:()=>a,aj:()=>l,yZ:()=>h,Bx:()=>u,V4:()=>c,v8:()=>p,Fi:()=>f,Kf:()=>d,rM:()=>_,vY:()=>g,TN:()=>y,QL:()=>v,Xp:()=>m});var n=i(6),o=i(4011),r=i(1358),s=i(8906);function a(t){var e=arguments;return function(t){for(var i=!0,n=0,o=e.length;n<o&&(i=i&&e[n](t));++n);return i}}var l=function(t){var e=t.originalEvent;return e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},h=function(t){return!t.map.getTargetElement().hasAttribute("tabindex")||function(t){return t.target.getTargetElement().contains(document.activeElement)}(t)},u=o.uX,c=function(t){return t.type==n.Z.CLICK},p=function(t){var e=t.originalEvent;return 0==e.button&&!(r.G$&&r.tK&&e.ctrlKey)},f=o.Dv,d=function(t){return t.type==n.Z.SINGLECLICK},_=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&!e.shiftKey},g=function(t){var e=t.originalEvent;return!e.altKey&&!(e.metaKey||e.ctrlKey)&&e.shiftKey},y=function(t){var e=t.originalEvent.target.tagName;return"INPUT"!==e&&"SELECT"!==e&&"TEXTAREA"!==e},v=function(t){var e=t.originalEvent;return(0,s.h)(void 0!==e,56),"mouse"==e.pointerType},m=function(t){var e=t.originalEvent;return(0,s.h)(void 0!==e,56),e.isPrimary&&0===e.button}},1915:(t,e,i)=>{"use strict";i.d(e,{hI:()=>s,f3:()=>a,d9:()=>l,qf:()=>h,b8:()=>u,r4:()=>c,jE:()=>p,pX:()=>f,lJ:()=>d,T9:()=>_,YN:()=>g,HK:()=>y,ZT:()=>v,GN:()=>m,fS:()=>x,l7:()=>E,Wj:()=>C,qP:()=>S,H6:()=>w,bg:()=>T,hC:()=>b,w$:()=>I,qg:()=>P,g0:()=>R,p8:()=>L,Cr:()=>M,Ed:()=>A,rL:()=>F,Xv:()=>Z,dz:()=>D,kK:()=>k,xb:()=>j,EO:()=>N,H9:()=>G,I7:()=>z,Ne:()=>W,Cf:()=>Y});var n=i(1748),o=i(4178),r=i(8906);function s(t){for(var e=[1/0,1/0,-1/0,-1/0],i=0,n=t.length;i<n;++i)C(e,t[i]);return e}function a(t,e,i){return i?(i[0]=t[0]-e,i[1]=t[1]-e,i[2]=t[2]+e,i[3]=t[3]+e,i):[t[0]-e,t[1]-e,t[2]+e,t[3]+e]}function l(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t.slice()}function h(t,e,i){var n,o;return(n=e<t[0]?t[0]-e:t[2]<e?e-t[2]:0)*n+(o=i<t[1]?t[1]-i:t[3]<i?i-t[3]:0)*o}function u(t,e){return p(t,e[0],e[1])}function c(t,e){return t[0]<=e[0]&&e[2]<=t[2]&&t[1]<=e[1]&&e[3]<=t[3]}function p(t,e,i){return t[0]<=e&&e<=t[2]&&t[1]<=i&&i<=t[3]}function f(t,e){var i=t[0],n=t[1],r=t[2],s=t[3],a=e[0],l=e[1],h=o.Z.UNKNOWN;return a<i?h|=o.Z.LEFT:a>r&&(h|=o.Z.RIGHT),l<n?h|=o.Z.BELOW:l>s&&(h|=o.Z.ABOVE),h===o.Z.UNKNOWN&&(h=o.Z.INTERSECTING),h}function d(){return[1/0,1/0,-1/0,-1/0]}function _(t,e,i,n,o){return o?(o[0]=t,o[1]=e,o[2]=i,o[3]=n,o):[t,e,i,n]}function g(t){return _(1/0,1/0,-1/0,-1/0,t)}function y(t,e){var i=t[0],n=t[1];return _(i,n,i,n,e)}function v(t,e){return function(t,e){for(var i=0,n=e.length;i<n;++i)C(t,e[i]);return t}(g(e),t)}function m(t,e,i,n,o){return S(g(o),t,e,i,n)}function x(t,e){return t[0]==e[0]&&t[2]==e[2]&&t[1]==e[1]&&t[3]==e[3]}function E(t,e){return e[0]<t[0]&&(t[0]=e[0]),e[2]>t[2]&&(t[2]=e[2]),e[1]<t[1]&&(t[1]=e[1]),e[3]>t[3]&&(t[3]=e[3]),t}function C(t,e){e[0]<t[0]&&(t[0]=e[0]),e[0]>t[2]&&(t[2]=e[0]),e[1]<t[1]&&(t[1]=e[1]),e[1]>t[3]&&(t[3]=e[1])}function S(t,e,i,n,o){for(;i<n;i+=o)O(t,e[i],e[i+1]);return t}function O(t,e,i){t[0]=Math.min(t[0],e),t[1]=Math.min(t[1],i),t[2]=Math.max(t[2],e),t[3]=Math.max(t[3],i)}function w(t,e){var i;return(i=e(b(t)))||(i=e(I(t)))||(i=e(Z(t)))?i:(i=e(F(t)))||!1}function T(t){var e=0;return j(t)||(e=D(t)*M(t)),e}function b(t){return[t[0],t[1]]}function I(t){return[t[2],t[1]]}function P(t){return[(t[0]+t[2])/2,(t[1]+t[3])/2]}function R(t,e){var i;return e===n.Z.BOTTOM_LEFT?i=b(t):e===n.Z.BOTTOM_RIGHT?i=I(t):e===n.Z.TOP_LEFT?i=F(t):e===n.Z.TOP_RIGHT?i=Z(t):(0,r.h)(!1,13),i}function L(t,e,i,n,o){var r=e*n[0]/2,s=e*n[1]/2,a=Math.cos(i),l=Math.sin(i),h=r*a,u=r*l,c=s*a,p=s*l,f=t[0],d=t[1],g=f-h+p,y=f-h-p,v=f+h-p,m=f+h+p,x=d-u-c,E=d-u+c,C=d+u+c,S=d+u-c;return _(Math.min(g,y,v,m),Math.min(x,E,C,S),Math.max(g,y,v,m),Math.max(x,E,C,S),o)}function M(t){return t[3]-t[1]}function A(t,e,i){var n=i||[1/0,1/0,-1/0,-1/0];return k(t,e)?(t[0]>e[0]?n[0]=t[0]:n[0]=e[0],t[1]>e[1]?n[1]=t[1]:n[1]=e[1],t[2]<e[2]?n[2]=t[2]:n[2]=e[2],t[3]<e[3]?n[3]=t[3]:n[3]=e[3]):g(n),n}function F(t){return[t[0],t[3]]}function Z(t){return[t[2],t[3]]}function D(t){return t[2]-t[0]}function k(t,e){return t[0]<=e[2]&&t[2]>=e[0]&&t[1]<=e[3]&&t[3]>=e[1]}function j(t){return t[2]<t[0]||t[3]<t[1]}function N(t,e){return e?(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e):t}function G(t,e){var i=(t[2]-t[0])/2*(e-1),n=(t[3]-t[1])/2*(e-1);t[0]-=i,t[2]+=i,t[1]-=n,t[3]+=n}function z(t,e,i){var n=!1,r=f(t,e),s=f(t,i);if(r===o.Z.INTERSECTING||s===o.Z.INTERSECTING)n=!0;else{var a=t[0],l=t[1],h=t[2],u=t[3],c=e[0],p=e[1],d=i[0],_=i[1],g=(_-p)/(d-c),y=void 0,v=void 0;s&o.Z.ABOVE&&!(r&o.Z.ABOVE)&&(n=(y=d-(_-u)/g)>=a&&y<=h),n||!(s&o.Z.RIGHT)||r&o.Z.RIGHT||(n=(v=_-(d-h)*g)>=l&&v<=u),n||!(s&o.Z.BELOW)||r&o.Z.BELOW||(n=(y=d-(_-l)/g)>=a&&y<=h),n||!(s&o.Z.LEFT)||r&o.Z.LEFT||(n=(v=_-(d-a)*g)>=l&&v<=u)}return n}function W(t,e,i,n){var o=[];if(n>1)for(var r=t[2]-t[0],s=t[3]-t[1],a=0;a<n;++a)o.push(t[0]+r*a/n,t[1],t[2],t[1]+s*a/n,t[2]-r*a/n,t[3],t[0],t[3]-s*a/n);else o=[t[0],t[1],t[2],t[1],t[2],t[3],t[0],t[3]];e(o,o,2);for(var l=[],h=[],u=(a=0,o.length);a<u;a+=2)l.push(o[a]),h.push(o[a+1]);return function(t,e,i){return _(Math.min.apply(null,t),Math.min.apply(null,e),Math.max.apply(null,t),Math.max.apply(null,e),i)}(l,h,i)}function Y(t,e){var i=e.getExtent(),n=P(t);if(e.canWrapX()&&(n[0]<i[0]||n[0]>=i[2])){var o=D(i),r=Math.floor((n[0]-i[0])/o)*o;t[0]-=r,t[2]-=r}return t}},1748:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={BOTTOM_LEFT:"bottom-left",BOTTOM_RIGHT:"bottom-right",TOP_LEFT:"top-left",TOP_RIGHT:"top-right"}},4178:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={UNKNOWN:0,INTERSECTING:1,ABOVE:2,RIGHT:4,BELOW:8,LEFT:16}},4011:(t,e,i)=>{"use strict";i.d(e,{uX:()=>o,Dv:()=>r,Zn:()=>s,qe:()=>a});var n=i(9682);function o(){return!0}function r(){return!1}function s(){}function a(t){var e,i,o,r=!1;return function(){var s=Array.prototype.slice.call(arguments);return r&&this===o&&(0,n.fS)(s,i)||(r=!0,o=this,i=s,e=t.apply(this,arguments)),e}}},3696:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={XY:"XY",XYZ:"XYZ",XYM:"XYM",XYZM:"XYZM"}},8795:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={POINT:"Point",LINE_STRING:"LineString",LINEAR_RING:"LinearRing",POLYGON:"Polygon",MULTI_POINT:"MultiPoint",MULTI_LINE_STRING:"MultiLineString",MULTI_POLYGON:"MultiPolygon",GEOMETRY_COLLECTION:"GeometryCollection",CIRCLE:"Circle"}},2043:(t,e,i)=>{"use strict";i.d(e,{Z:()=>u});var n,o=i(8795),r=i(4759),s=i(1915),a=i(8667),l=i(1882),h=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const u=function(t){function e(e,i){var n=t.call(this)||this;return n.setCoordinates(e,i),n}return h(e,t),e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout);return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,i,n){var o=this.flatCoordinates,r=(0,l.bI)(t,e,o[0],o[1]);if(r<n){for(var s=this.stride,a=0;a<s;++a)i[a]=o[a];return i.length=s,r}return n},e.prototype.getCoordinates=function(){return this.flatCoordinates?this.flatCoordinates.slice():[]},e.prototype.computeExtent=function(t){return(0,s.HK)(this.flatCoordinates,t)},e.prototype.getType=function(){return o.Z.POINT},e.prototype.intersectsExtent=function(t){return(0,s.jE)(t,this.flatCoordinates[0],this.flatCoordinates[1])},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,0),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=(0,a.IG)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(r.ZP)},4759:(t,e,i)=>{"use strict";i.d(e,{ZP:()=>m,Kr:()=>v});var n,o=i(8493),r=i(868),s=i(9179),a=i(2359),l=i(1915),h=i(1964),u=i(4011),c=i(7882),p=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),f=(0,a.Ue)();const d=function(t){function e(){var e=t.call(this)||this;return e.extent_=(0,l.lJ)(),e.extentRevision_=-1,e.simplifiedGeometryMaxMinSquaredTolerance=0,e.simplifiedGeometryRevision=0,e.simplifyTransformedInternal=(0,u.qe)((function(t,e,i){if(!i)return this.getSimplifiedGeometry(e);var n=this.clone();return n.applyTransform(i),n.getSimplifiedGeometry(e)})),e}return p(e,t),e.prototype.simplifyTransformed=function(t,e){return this.simplifyTransformedInternal(this.getRevision(),t,e)},e.prototype.clone=function(){return(0,s.O3)()},e.prototype.closestPointXY=function(t,e,i,n){return(0,s.O3)()},e.prototype.containsXY=function(t,e){var i=this.getClosestPoint([t,e]);return i[0]===t&&i[1]===e},e.prototype.getClosestPoint=function(t,e){var i=e||[NaN,NaN];return this.closestPointXY(t[0],t[1],i,1/0),i},e.prototype.intersectsCoordinate=function(t){return this.containsXY(t[0],t[1])},e.prototype.computeExtent=function(t){return(0,s.O3)()},e.prototype.getExtent=function(t){if(this.extentRevision_!=this.getRevision()){var e=this.computeExtent(this.extent_);(isNaN(e[0])||isNaN(e[1]))&&(0,l.YN)(e),this.extentRevision_=this.getRevision()}return(0,l.EO)(this.extent_,t)},e.prototype.rotate=function(t,e){(0,s.O3)()},e.prototype.scale=function(t,e,i){(0,s.O3)()},e.prototype.simplify=function(t){return this.getSimplifiedGeometry(t*t)},e.prototype.getSimplifiedGeometry=function(t){return(0,s.O3)()},e.prototype.getType=function(){return(0,s.O3)()},e.prototype.applyTransform=function(t){(0,s.O3)()},e.prototype.intersectsExtent=function(t){return(0,s.O3)()},e.prototype.translate=function(t,e){(0,s.O3)()},e.prototype.transform=function(t,e){var i=(0,h.U2)(t),n=i.getUnits()==r.Z.TILE_PIXELS?function(t,n,o){var r=i.getExtent(),s=i.getWorldExtent(),u=(0,l.Cr)(s)/(0,l.Cr)(r);return(0,a.qC)(f,s[0],s[3],u,-u,0,0,0),(0,c.vT)(t,0,t.length,o,f,n),(0,h.Ck)(i,e)(t,n,o)}:(0,h.Ck)(i,e);return this.applyTransform(n),this},e}(o.ZP);var _=i(3696),g=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function y(t){var e;return t==_.Z.XY?e=2:t==_.Z.XYZ||t==_.Z.XYM?e=3:t==_.Z.XYZM&&(e=4),e}function v(t,e,i){var n=t.getFlatCoordinates();if(n){var o=t.getStride();return(0,c.vT)(n,0,n.length,o,e,i)}return null}const m=function(t){function e(){var e=t.call(this)||this;return e.layout=_.Z.XY,e.stride=2,e.flatCoordinates=null,e}return g(e,t),e.prototype.computeExtent=function(t){return(0,l.GN)(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t)},e.prototype.getCoordinates=function(){return(0,s.O3)()},e.prototype.getFirstCoordinate=function(){return this.flatCoordinates.slice(0,this.stride)},e.prototype.getFlatCoordinates=function(){return this.flatCoordinates},e.prototype.getLastCoordinate=function(){return this.flatCoordinates.slice(this.flatCoordinates.length-this.stride)},e.prototype.getLayout=function(){return this.layout},e.prototype.getSimplifiedGeometry=function(t){if(this.simplifiedGeometryRevision!==this.getRevision()&&(this.simplifiedGeometryMaxMinSquaredTolerance=0,this.simplifiedGeometryRevision=this.getRevision()),t<0||0!==this.simplifiedGeometryMaxMinSquaredTolerance&&t<=this.simplifiedGeometryMaxMinSquaredTolerance)return this;var e=this.getSimplifiedGeometryInternal(t);return e.getFlatCoordinates().length<this.flatCoordinates.length?e:(this.simplifiedGeometryMaxMinSquaredTolerance=t,this)},e.prototype.getSimplifiedGeometryInternal=function(t){return this},e.prototype.getStride=function(){return this.stride},e.prototype.setFlatCoordinates=function(t,e){this.stride=y(t),this.layout=t,this.flatCoordinates=e},e.prototype.setCoordinates=function(t,e){(0,s.O3)()},e.prototype.setLayout=function(t,e,i){var n;if(t)n=y(t);else{for(var o=0;o<i;++o){if(0===e.length)return this.layout=_.Z.XY,void(this.stride=2);e=e[0]}t=function(t){var e;return 2==t?e=_.Z.XY:3==t?e=_.Z.XYZ:4==t&&(e=_.Z.XYZM),e}(n=e.length)}this.layout=t,this.stride=n},e.prototype.applyTransform=function(t){this.flatCoordinates&&(t(this.flatCoordinates,this.flatCoordinates,this.stride),this.changed())},e.prototype.rotate=function(t,e){var i=this.getFlatCoordinates();if(i){var n=this.getStride();(0,c.U1)(i,0,i.length,n,t,e,i),this.changed()}},e.prototype.scale=function(t,e,i){var n=e;void 0===n&&(n=t);var o=i;o||(o=(0,l.qg)(this.getExtent()));var r=this.getFlatCoordinates();if(r){var s=this.getStride();(0,c.bA)(r,0,r.length,s,t,n,o,r),this.changed()}},e.prototype.translate=function(t,e){var i=this.getFlatCoordinates();if(i){var n=this.getStride();(0,c.Iu)(i,0,i.length,n,t,e,i),this.changed()}},e}(d)},8667:(t,e,i)=>{"use strict";function n(t,e,i,n){for(var o=0,r=i.length;o<r;++o)t[e++]=i[o];return e}function o(t,e,i,n){for(var o=0,r=i.length;o<r;++o)for(var s=i[o],a=0;a<n;++a)t[e++]=s[a];return e}function r(t,e,i,n,r){for(var s=r||[],a=0,l=0,h=i.length;l<h;++l){var u=o(t,e,i[l],n);s[a++]=u,e=u}return s.length=a,s}i.d(e,{IG:()=>n,Sg:()=>o,_5:()=>r})},7882:(t,e,i)=>{"use strict";function n(t,e,i,n,o,r){for(var s=r||[],a=0,l=e;l<i;l+=n){var h=t[l],u=t[l+1];s[a++]=o[0]*h+o[2]*u+o[4],s[a++]=o[1]*h+o[3]*u+o[5]}return r&&s.length!=a&&(s.length=a),s}function o(t,e,i,n,o,r,s){for(var a=s||[],l=Math.cos(o),h=Math.sin(o),u=r[0],c=r[1],p=0,f=e;f<i;f+=n){var d=t[f]-u,_=t[f+1]-c;a[p++]=u+d*l-_*h,a[p++]=c+d*h+_*l;for(var g=f+2;g<f+n;++g)a[p++]=t[g]}return s&&a.length!=p&&(a.length=p),a}function r(t,e,i,n,o,r,s,a){for(var l=a||[],h=s[0],u=s[1],c=0,p=e;p<i;p+=n){var f=t[p]-h,d=t[p+1]-u;l[c++]=h+o*f,l[c++]=u+r*d;for(var _=p+2;_<p+n;++_)l[c++]=t[_]}return a&&l.length!=c&&(l.length=c),l}function s(t,e,i,n,o,r,s){for(var a=s||[],l=0,h=e;h<i;h+=n){a[l++]=t[h]+o,a[l++]=t[h+1]+r;for(var u=h+2;u<h+n;++u)a[l++]=t[u]}return s&&a.length!=l&&(a.length=l),a}i.d(e,{vT:()=>n,U1:()=>o,bA:()=>r,Iu:()=>s})},1358:(t,e,i)=>{"use strict";i.d(e,{V:()=>o,G$:()=>r,tK:()=>s,MP:()=>a,Id:()=>l,Tp:()=>h,bM:()=>u});var n="undefined"!=typeof navigator&&void 0!==navigator.userAgent?navigator.userAgent.toLowerCase():"",o=-1!==n.indexOf("firefox"),r=(-1!==n.indexOf("safari")&&n.indexOf("chrom"),-1!==n.indexOf("webkit")&&-1==n.indexOf("edge")),s=-1!==n.indexOf("macintosh"),a="undefined"!=typeof devicePixelRatio?devicePixelRatio:1,l="undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof OffscreenCanvas&&self instanceof WorkerGlobalScope,h="undefined"!=typeof Image&&Image.prototype.decode,u=function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("_",null,e),window.removeEventListener("_",null,e)}catch(t){}return t}()},7588:(t,e,i)=>{"use strict";i.d(e,{Cv:()=>l,FW:()=>h,ZP:()=>u});var n,o=i(8493),r=i(3604),s=i(6320),a=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});function l(t,e,i){var n=t.getCenterInternal();if(n){var o=[n[0]+e[0],n[1]+e[1]];t.animateInternal({duration:void 0!==i?i:250,easing:s.GE,center:t.getConstrainedCenter(o)})}}function h(t,e,i,n){var o=t.getZoom();if(void 0!==o){var r=t.getConstrainedZoom(o+e),a=t.getResolutionForZoom(r);t.getAnimating()&&t.cancelAnimations(),t.animate({resolution:a,anchor:i,duration:void 0!==n?n:250,easing:s.Vv})}}const u=function(t){function e(e){var i=t.call(this)||this;return e&&e.handleEvent&&(i.handleEvent=e.handleEvent),i.map_=null,i.setActive(!0),i}return a(e,t),e.prototype.getActive=function(){return this.get(r.Z.ACTIVE)},e.prototype.getMap=function(){return this.map_},e.prototype.handleEvent=function(t){return!0},e.prototype.setActive=function(t){this.set(r.Z.ACTIVE,t)},e.prototype.setMap=function(t){this.map_=t},e}(o.ZP)},8024:(t,e,i)=>{"use strict";i.d(e,{S:()=>l,Z:()=>h});var n,o=i(7588),r=i(6),s=i(3580),a=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});function l(t){for(var e=t.length,i=0,n=0,o=0;o<e;o++)i+=t[o].clientX,n+=t[o].clientY;return[i/e,n/e]}const h=function(t){function e(e){var i=this,n=e||{};return i=t.call(this,n)||this,n.handleDownEvent&&(i.handleDownEvent=n.handleDownEvent),n.handleDragEvent&&(i.handleDragEvent=n.handleDragEvent),n.handleMoveEvent&&(i.handleMoveEvent=n.handleMoveEvent),n.handleUpEvent&&(i.handleUpEvent=n.handleUpEvent),n.stopDown&&(i.stopDown=n.stopDown),i.handlingDownUpSequence=!1,i.trackedPointers_={},i.targetPointers=[],i}return a(e,t),e.prototype.getPointerCount=function(){return this.targetPointers.length},e.prototype.handleDownEvent=function(t){return!1},e.prototype.handleDragEvent=function(t){},e.prototype.handleEvent=function(t){if(!t.originalEvent)return!0;var e=!1;if(this.updateTrackedPointers_(t),this.handlingDownUpSequence){if(t.type==r.Z.POINTERDRAG)this.handleDragEvent(t),t.originalEvent.preventDefault();else if(t.type==r.Z.POINTERUP){var i=this.handleUpEvent(t);this.handlingDownUpSequence=i&&this.targetPointers.length>0}}else if(t.type==r.Z.POINTERDOWN){var n=this.handleDownEvent(t);this.handlingDownUpSequence=n,e=this.stopDown(n)}else t.type==r.Z.POINTERMOVE&&this.handleMoveEvent(t);return!e},e.prototype.handleMoveEvent=function(t){},e.prototype.handleUpEvent=function(t){return!1},e.prototype.stopDown=function(t){return t},e.prototype.updateTrackedPointers_=function(t){if(function(t){var e=t.type;return e===r.Z.POINTERDOWN||e===r.Z.POINTERDRAG||e===r.Z.POINTERUP}(t)){var e=t.originalEvent,i=e.pointerId.toString();t.type==r.Z.POINTERUP?delete this.trackedPointers_[i]:(t.type==r.Z.POINTERDOWN||i in this.trackedPointers_)&&(this.trackedPointers_[i]=e),this.targetPointers=(0,s.KX)(this.trackedPointers_)}},e}(o.ZP)},3604:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={ACTIVE:"active"}},1273:(t,e,i)=>{"use strict";i.d(e,{t:()=>g,Z:()=>v});var n,o=i(8426),r=i(9629),s=i(9520),a=i(8795),l=i(7588),h=i(4011),u=i(3580),c=i(1219),p=i(9682),f=i(9179),d=i(6403),_=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),g=function(t){function e(e,i,n,o){var r=t.call(this,e)||this;return r.selected=i,r.deselected=n,r.mapBrowserEvent=o,r}return _(e,t),e}(s.ZP),y={};const v=function(t){function e(e){var i,n,r=t.call(this)||this,s=e||{};if(r.boundAddFeature_=r.addFeature_.bind(r),r.boundRemoveFeature_=r.removeFeature_.bind(r),r.condition_=s.condition?s.condition:d.Kf,r.addCondition_=s.addCondition?s.addCondition:d.Fi,r.removeCondition_=s.removeCondition?s.removeCondition:d.Fi,r.toggleCondition_=s.toggleCondition?s.toggleCondition:d.vY,r.multi_=!!s.multi&&s.multi,r.filter_=s.filter?s.filter:h.uX,r.hitTolerance_=s.hitTolerance?s.hitTolerance:0,r.style_=void 0!==s.style?s.style:(i=(0,c.Ly)(),(0,p.l7)(i[a.Z.POLYGON],i[a.Z.LINE_STRING]),(0,p.l7)(i[a.Z.GEOMETRY_COLLECTION],i[a.Z.LINE_STRING]),function(t){return t.getGeometry()?i[t.getGeometry().getType()]:null}),r.features_=s.features||new o.Z,s.layers)if("function"==typeof s.layers)n=s.layers;else{var l=s.layers;n=function(t){return(0,p.q9)(l,t)}}else n=h.uX;return r.layerFilter_=n,r.featureLayerAssociation_={},r}return _(e,t),e.prototype.addFeatureLayerAssociation_=function(t,e){this.featureLayerAssociation_[(0,f.sq)(t)]=e},e.prototype.getFeatures=function(){return this.features_},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.getLayer=function(t){return this.featureLayerAssociation_[(0,f.sq)(t)]},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){this.getMap()&&this.style_&&this.features_.forEach(this.restorePreviousStyle_.bind(this)),t.prototype.setMap.call(this,e),e?(this.features_.addEventListener(r.Z.ADD,this.boundAddFeature_),this.features_.addEventListener(r.Z.REMOVE,this.boundRemoveFeature_),this.style_&&this.features_.forEach(this.applySelectedStyle_.bind(this))):(this.features_.removeEventListener(r.Z.ADD,this.boundAddFeature_),this.features_.removeEventListener(r.Z.REMOVE,this.boundRemoveFeature_))},e.prototype.addFeature_=function(t){var e=t.element;this.style_&&this.applySelectedStyle_(e)},e.prototype.removeFeature_=function(t){var e=t.element;this.style_&&this.restorePreviousStyle_(e)},e.prototype.getStyle=function(){return this.style_},e.prototype.applySelectedStyle_=function(t){var e=(0,f.sq)(t);e in y||(y[e]=t.getStyle()),t.setStyle(this.style_)},e.prototype.restorePreviousStyle_=function(t){for(var i=this.getMap().getInteractions().getArray(),n=i.length-1;n>=0;--n){var o=i[n];if(o!==this&&o instanceof e&&o.getStyle()&&-1!==o.getFeatures().getArray().lastIndexOf(t))return void t.setStyle(o.getStyle())}var r=(0,f.sq)(t);t.setStyle(y[r]),delete y[r]},e.prototype.removeFeatureLayerAssociation_=function(t){delete this.featureLayerAssociation_[(0,f.sq)(t)]},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;var e=this.addCondition_(t),i=this.removeCondition_(t),n=this.toggleCondition_(t),o=!e&&!i&&!n,r=t.map,s=this.getFeatures(),a=[],l=[];if(o){(0,u.ZH)(this.featureLayerAssociation_),r.forEachFeatureAtPixel(t.pixel,function(t,e){if(this.filter_(t,e))return l.push(t),this.addFeatureLayerAssociation_(t,e),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var h=s.getLength()-1;h>=0;--h){var c=s.item(h),f=l.indexOf(c);f>-1?l.splice(f,1):(s.remove(c),a.push(c))}0!==l.length&&s.extend(l)}else{r.forEachFeatureAtPixel(t.pixel,function(t,o){if(this.filter_(t,o))return!e&&!n||(0,p.q9)(s.getArray(),t)?(i||n)&&(0,p.q9)(s.getArray(),t)&&(a.push(t),this.removeFeatureLayerAssociation_(t)):(l.push(t),this.addFeatureLayerAssociation_(t,o)),!this.multi_}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_});for(var d=a.length-1;d>=0;--d)s.remove(a[d]);s.extend(l)}return(l.length>0||a.length>0)&&this.dispatchEvent(new g("select",l,a,t)),!0},e}(l.ZP)},1882:(t,e,i)=>{"use strict";function n(t,e,i){return Math.min(Math.max(t,e),i)}i.d(e,{uZ:()=>n,f9:()=>o,k3:()=>r,rU:()=>s,bI:()=>a,SV:()=>l,Yr:()=>h,$W:()=>u,t7:()=>c});var o="cosh"in Math?Math.cosh:function(t){var e=Math.exp(t);return(e+1/e)/2},r="log2"in Math?Math.log2:function(t){return Math.log(t)*Math.LOG2E};function s(t,e,i,n,o,r){var s=o-i,l=r-n;if(0!==s||0!==l){var h=((t-i)*s+(e-n)*l)/(s*s+l*l);h>1?(i=o,n=r):h>0&&(i+=s*h,n+=l*h)}return a(t,e,i,n)}function a(t,e,i,n){var o=i-t,r=n-e;return o*o+r*r}function l(t){for(var e=t.length,i=0;i<e;i++){for(var n=i,o=Math.abs(t[i][i]),r=i+1;r<e;r++){var s=Math.abs(t[r][i]);s>o&&(o=s,n=r)}if(0===o)return null;var a=t[n];t[n]=t[i],t[i]=a;for(var l=i+1;l<e;l++)for(var h=-t[l][i]/t[i][i],u=i;u<e+1;u++)i==u?t[l][u]=0:t[l][u]+=h*t[i][u]}for(var c=new Array(e),p=e-1;p>=0;p--){c[p]=t[p][e]/t[p][p];for(var f=p-1;f>=0;f--)t[f][e]-=t[f][p]*c[p]}return c}function h(t){return t*Math.PI/180}function u(t,e){var i=t%e;return i*e<0?i+e:i}function c(t,e,i){return t+i*(e-t)}},3580:(t,e,i)=>{"use strict";i.d(e,{f0:()=>n,ZH:()=>o,KX:()=>r,xb:()=>s});var n="function"==typeof Object.assign?Object.assign:function(t,e){if(null==t)throw new TypeError("Cannot convert undefined or null to object");for(var i=Object(t),n=1,o=arguments.length;n<o;++n){var r=arguments[n];if(null!=r)for(var s in r)r.hasOwnProperty(s)&&(i[s]=r[s])}return i};function o(t){for(var e in t)delete t[e]}var r="function"==typeof Object.values?Object.values:function(t){var e=[];for(var i in t)e.push(t[i]);return e};function s(t){var e;for(e in t)return!1;return!e}},1964:(t,e,i)=>{"use strict";i.d(e,{Wm:()=>n.W,UQ:()=>R,OP:()=>A,mi:()=>L,Vs:()=>Y,dY:()=>K,U2:()=>b,_Q:()=>I,Ck:()=>Z,WO:()=>F,Cs:()=>z,bU:()=>M,lO:()=>W,Fj:()=>X,vs:()=>D});var n=i(868);const o=function(){function t(t){this.code_=t.code,this.units_=t.units,this.extent_=void 0!==t.extent?t.extent:null,this.worldExtent_=void 0!==t.worldExtent?t.worldExtent:null,this.axisOrientation_=void 0!==t.axisOrientation?t.axisOrientation:"enu",this.global_=void 0!==t.global&&t.global,this.canWrapX_=!(!this.global_||!this.extent_),this.getPointResolutionFunc_=t.getPointResolution,this.defaultTileGrid_=null,this.metersPerUnit_=t.metersPerUnit}return t.prototype.canWrapX=function(){return this.canWrapX_},t.prototype.getCode=function(){return this.code_},t.prototype.getExtent=function(){return this.extent_},t.prototype.getUnits=function(){return this.units_},t.prototype.getMetersPerUnit=function(){return this.metersPerUnit_||n.W[this.units_]},t.prototype.getWorldExtent=function(){return this.worldExtent_},t.prototype.getAxisOrientation=function(){return this.axisOrientation_},t.prototype.isGlobal=function(){return this.global_},t.prototype.setGlobal=function(t){this.global_=t,this.canWrapX_=!(!t||!this.extent_)},t.prototype.getDefaultTileGrid=function(){return this.defaultTileGrid_},t.prototype.setDefaultTileGrid=function(t){this.defaultTileGrid_=t},t.prototype.setExtent=function(t){this.extent_=t,this.canWrapX_=!(!this.global_||!t)},t.prototype.setWorldExtent=function(t){this.worldExtent_=t},t.prototype.setGetPointResolution=function(t){this.getPointResolutionFunc_=t},t.prototype.getPointResolutionFunc=function(){return this.getPointResolutionFunc_},t}();var r,s=i(1882),a=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=6378137,h=Math.PI*l,u=[-h,-h,h,h],c=[-180,-85,180,85],p=l*Math.log(Math.tan(Math.PI/2)),f=function(t){function e(e){return t.call(this,{code:e,units:n.Z.METERS,extent:u,global:!0,worldExtent:c,getPointResolution:function(t,e){return t/(0,s.f9)(e[1]/l)}})||this}return a(e,t),e}(o),d=[new f("EPSG:3857"),new f("EPSG:102100"),new f("EPSG:102113"),new f("EPSG:900913"),new f("http://www.opengis.net/gml/srs/epsg.xml#3857")];var _=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),g=[-180,-90,180,90],y=6378137*Math.PI/180,v=function(t){function e(e,i){return t.call(this,{code:e,units:n.Z.DEGREES,extent:g,axisOrientation:i,global:!0,metersPerUnit:y,worldExtent:g})||this}return _(e,t),e}(o),m=[new v("CRS:84"),new v("EPSG:4326","neu"),new v("urn:ogc:def:crs:OGC:1.3:CRS84"),new v("urn:ogc:def:crs:OGC:2:84"),new v("http://www.opengis.net/gml/srs/epsg.xml#4326","neu")],x={},E={};function C(t,e,i){var n=t.getCode(),o=e.getCode();n in E||(E[n]={}),E[n][o]=i}i(1915);function S(t,e,i){var n=i||6371008.8,o=(0,s.Yr)(t[1]),r=(0,s.Yr)(e[1]),a=(r-o)/2,l=(0,s.Yr)(e[0]-t[0])/2,h=Math.sin(a)*Math.sin(a)+Math.sin(l)*Math.sin(l)*Math.cos(o)*Math.cos(r);return 2*n*Math.atan2(Math.sqrt(h),Math.sqrt(1-h))}function O(t,e,i){var n;if(void 0!==e){for(var o=0,r=t.length;o<r;++o)e[o]=t[o];n=e}else n=t.slice();return n}function w(t,e,i){if(void 0!==e&&t!==e){for(var n=0,o=t.length;n<o;++n)e[n]=t[n];t=e}return t}function T(t){!function(t,e){x[t]=e}(t.getCode(),t),C(t,t,O)}function b(t){return"string"==typeof t?x[e=t]||x[e.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\w+)$/,"EPSG:$3")]||null:t||null;var e}function I(t,e,i,o){var r,s=(t=b(t)).getPointResolutionFunc();if(s)r=s(e,i),o&&o!==t.getUnits()&&(l=t.getMetersPerUnit())&&(r=r*l/n.W[o]);else{var a=t.getUnits();if(a==n.Z.DEGREES&&!o||o==n.Z.DEGREES)r=e;else{var l,h=F(t,b("EPSG:4326"));if(h===w&&a!==n.Z.DEGREES)r=e*t.getMetersPerUnit();else{var u=[i[0]-e/2,i[1],i[0]+e/2,i[1],i[0],i[1]-e/2,i[0],i[1]+e/2];r=(S((u=h(u,u,2)).slice(0,2),u.slice(2,4))+S(u.slice(4,6),u.slice(6,8)))/2}void 0!==(l=o?n.W[o]:t.getMetersPerUnit())&&(r/=l)}}return r}function P(t){!function(t){t.forEach(T)}(t),t.forEach((function(e){t.forEach((function(t){e!==t&&C(e,t,O)}))}))}function R(t,e){return t?"string"==typeof t?b(t):t:b(e)}function L(t,e){return D(t,"EPSG:4326",void 0!==e?e:"EPSG:3857")}function M(t,e){var i=D(t,void 0!==e?e:"EPSG:3857","EPSG:4326"),n=i[0];return(n<-180||n>180)&&(i[0]=(0,s.$W)(n+180,360)-180),i}function A(t,e){if(t===e)return!0;var i=t.getUnits()===e.getUnits();return(t.getCode()===e.getCode()||F(t,e)===O)&&i}function F(t,e){var i=function(t,e){var i;return t in E&&e in E[t]&&(i=E[t][e]),i}(t.getCode(),e.getCode());return i||(i=w),i}function Z(t,e){return F(b(t),b(e))}function D(t,e,i){return Z(e,i)(t,void 0,t.length)}var k,j,N,G=null;function z(){return G}function W(t,e){return t}function Y(t,e){return t}function X(t,e){return t}function K(t,e){return t}P(d),P(m),k=d,j=function(t,e,i){var n=t.length,o=i>1?i:2,r=e;void 0===r&&(r=o>2?t.slice():new Array(n));for(var s=0;s<n;s+=o){r[s]=h*t[s]/180;var a=l*Math.log(Math.tan(Math.PI*(+t[s+1]+90)/360));a>p?a=p:a<-p&&(a=-p),r[s+1]=a}return r},N=function(t,e,i){var n=t.length,o=i>1?i:2,r=e;void 0===r&&(r=o>2?t.slice():new Array(n));for(var s=0;s<n;s+=o)r[s]=180*t[s]/h,r[s+1]=360*Math.atan(Math.exp(t[s+1]/l))/Math.PI-90;return r},m.forEach((function(t){k.forEach((function(e){C(t,e,j),C(e,t,N)}))}))},868:(t,e,i)=>{"use strict";i.d(e,{W:()=>o,Z:()=>r});var n={DEGREES:"degrees",FEET:"ft",METERS:"m",PIXELS:"pixels",TILE_PIXELS:"tile-pixels",USFEET:"us-ft"},o={};o[n.DEGREES]=2*Math.PI*6370997/360,o[n.FEET]=.3048,o[n.METERS]=1,o[n.USFEET]=1200/3937;const r=n},8509:(t,e,i)=>{"use strict";i.d(e,{Df:()=>u,bL:()=>c,mb:()=>p,X9:()=>f,He:()=>d,rc:()=>_,V4:()=>g,Tx:()=>y,PH:()=>v,ru:()=>m,oB:()=>x,yC:()=>E,sG:()=>C,Qx:()=>b,fk:()=>I,Kd:()=>L,gs:()=>M,qs:()=>A,_f:()=>F,QP:()=>D});var n=i(8493),o=i(6575),r=i(1358),s=i(3580),a=i(5386),l=i(7644),h=i(2359),u="10px sans-serif",c="#000",p="round",f=[],d=0,_="round",g=10,y="#000",v="center",m="middle",x=[0,0,0,0],E=1,C=new n.ZP;(new o.Z).setSize=function(){console.warn("labelCache is deprecated.")};var S,O,w=null,T={},b=function(){var t,e,i="32px ",n=["monospace","serif"],o=n.length,r="wmytzilWMYTZIL@#/&?$%10";function a(t,s,a){for(var l=!0,h=0;h<o;++h){var u=n[h];if(e=R(t+" "+s+" "+i+u,r),a!=u){var c=R(t+" "+s+" "+i+a+","+u,r);l=l&&c!=e}}return!!l}function h(){for(var e=!0,i=C.getKeys(),n=0,o=i.length;n<o;++n){var r=i[n];C.get(r)<100&&(a.apply(this,r.split("\n"))?((0,s.ZH)(T),w=null,S=void 0,C.set(r,100)):(C.set(r,C.get(r)+1,!0),e=!1))}e&&(clearInterval(t),t=void 0)}return function(e){var i=(0,l.p)(e);if(i)for(var n=i.families,o=0,r=n.length;o<r;++o){var s=n[o],u=i.style+"\n"+i.weight+"\n"+s;void 0===C.get(u)&&(C.set(u,100,!0),a(i.style,i.weight,s)||(C.set(u,0,!0),void 0===t&&(t=setInterval(h,32))))}}}(),I=function(t){var e=T[t];if(null==e){if(r.Id){var i=(0,l.p)(t),n=P(t,"Žg");e=(isNaN(Number(i.lineHeight))?1.2:Number(i.lineHeight))*(n.actualBoundingBoxAscent+n.actualBoundingBoxDescent)}else O||((O=document.createElement("div")).innerHTML="M",O.style.margin="0 !important",O.style.padding="0 !important",O.style.position="absolute !important",O.style.left="-99999px !important"),O.style.font=t,document.body.appendChild(O),e=O.offsetHeight,document.body.removeChild(O);T[t]=e}return e};function P(t,e){return w||(w=(0,a.E4)(1,1)),t!=S&&(w.font=t,S=w.font),w.measureText(e)}function R(t,e){return P(t,e).width}function L(t,e,i){if(e in i)return i[e];var n=R(t,e);return i[e]=n,n}function M(t,e,i){for(var n=e.length,o=0,r=0;r<n;++r){var s=R(t,e[r]);o=Math.max(o,s),i.push(s)}return o}function A(t,e,i,n){0!==e&&(t.translate(i,n),t.rotate(e),t.translate(-i,-n))}function F(t,e,i,n,o,r,s,a,l,h,u){t.save(),1!==i&&(t.globalAlpha*=i),e&&t.setTransform.apply(t,e),n.contextInstructions?(t.translate(l,h),t.scale(u[0],u[1]),function(t,e){for(var i=t.contextInstructions,n=0,o=i.length;n<o;n+=2)Array.isArray(i[n+1])?e[i[n]].apply(e,i[n+1]):e[i[n]]=i[n+1]}(n,t)):u[0]<0||u[1]<0?(t.translate(l,h),t.scale(u[0],u[1]),t.drawImage(n,o,r,s,a,0,0,s,a)):t.drawImage(n,o,r,s,a,l,h,s*u[0],a*u[1]),t.restore()}var Z=null;function D(t){return r.Id?(0,h.BB)(t):(Z||(Z=(0,a.E4)(1,1).canvas),Z.style.transform=(0,h.BB)(t),Z.style.transform)}},596:(t,e,i)=>{"use strict";function n(t){return t[0]>0&&t[1]>0}function o(t,e,i){return void 0===i&&(i=[0,0]),i[0]=t[0]*e+.5|0,i[1]=t[1]*e+.5|0,i}function r(t,e){return Array.isArray(t)?t:(void 0===e?e=[t,t]:(e[0]=t,e[1]=t),e)}i.d(e,{py:()=>n,bA:()=>o,Pq:()=>r})},9797:(t,e,i)=>{"use strict";i.d(e,{Z:()=>f});var n,o=i(1256),r=i(8039),s=i(8913),a=i(5120),l=i(5386),h=i(8509),u=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const c=function(t){function e(e){var i=this,n=void 0!==e.rotateWithView&&e.rotateWithView;return(i=t.call(this,{opacity:1,rotateWithView:n,rotation:void 0!==e.rotation?e.rotation:0,scale:void 0!==e.scale?e.scale:1,displacement:void 0!==e.displacement?e.displacement:[0,0]})||this).canvas_={},i.hitDetectionCanvas_=null,i.fill_=void 0!==e.fill?e.fill:null,i.origin_=[0,0],i.points_=e.points,i.radius_=void 0!==e.radius?e.radius:e.radius1,i.radius2_=e.radius2,i.angle_=void 0!==e.angle?e.angle:0,i.stroke_=void 0!==e.stroke?e.stroke:null,i.anchor_=null,i.size_=null,i.imageSize_=null,i.hitDetectionImageSize_=null,i.render(),i}return u(e,t),e.prototype.clone=function(){var t=this.getScale(),i=new e({fill:this.getFill()?this.getFill().clone():void 0,points:this.getPoints(),radius:this.getRadius(),radius2:this.getRadius2(),angle:this.getAngle(),stroke:this.getStroke()?this.getStroke().clone():void 0,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(t)?t.slice():t,displacement:this.getDisplacement().slice()});return i.setOpacity(this.getOpacity()),i},e.prototype.getAnchor=function(){return this.anchor_},e.prototype.getAngle=function(){return this.angle_},e.prototype.getFill=function(){return this.fill_},e.prototype.getHitDetectionImage=function(){if(!this.hitDetectionCanvas_){var t=this.createRenderOptions();this.createHitDetectionCanvas_(t)}return this.hitDetectionCanvas_},e.prototype.getImage=function(t){if(!this.canvas_[t||1]){var e=this.createRenderOptions(),i=(0,l.E4)(e.size*t||1,e.size*t||1);this.draw_(e,i,0,0,t||1),this.canvas_[t||1]=i.canvas}return this.canvas_[t||1]},e.prototype.getPixelRatio=function(t){return t},e.prototype.getImageSize=function(){return this.imageSize_},e.prototype.getHitDetectionImageSize=function(){return this.hitDetectionImageSize_},e.prototype.getImageState=function(){return o.Z.LOADED},e.prototype.getOrigin=function(){return this.origin_},e.prototype.getPoints=function(){return this.points_},e.prototype.getRadius=function(){return this.radius_},e.prototype.getRadius2=function(){return this.radius2_},e.prototype.getSize=function(){return this.size_},e.prototype.getStroke=function(){return this.stroke_},e.prototype.listenImageChange=function(t){},e.prototype.load=function(){},e.prototype.unlistenImageChange=function(t){},e.prototype.createRenderOptions=function(){var t,e=h.mb,i=h.rc,n=0,o=null,r=0,s=0;return this.stroke_&&(null===(t=this.stroke_.getColor())&&(t=h.Tx),t=(0,a.y)(t),void 0===(s=this.stroke_.getWidth())&&(s=h.yC),o=this.stroke_.getLineDash(),r=this.stroke_.getLineDashOffset(),void 0===(i=this.stroke_.getLineJoin())&&(i=h.rc),void 0===(e=this.stroke_.getLineCap())&&(e=h.mb),void 0===(n=this.stroke_.getMiterLimit())&&(n=h.V4)),{strokeStyle:t,strokeWidth:s,size:2*(this.radius_+s)+1,lineCap:e,lineDash:o,lineDashOffset:r,lineJoin:i,miterLimit:n}},e.prototype.render=function(){var t=this.createRenderOptions(),e=(0,l.E4)(t.size,t.size);this.draw_(t,e,0,0,1),this.canvas_={},this.canvas_[1]=e.canvas;var i=e.canvas.width,n=i,o=this.getDisplacement();this.hitDetectionImageSize_=[t.size,t.size],this.createHitDetectionCanvas_(t),this.anchor_=[i/2-o[0],i/2+o[1]],this.size_=[i,i],this.imageSize_=[n,n]},e.prototype.draw_=function(t,e,i,n,o){var r,s,l;e.setTransform(o,0,0,o,0,0),e.translate(i,n),e.beginPath();var u=this.points_;if(u===1/0)e.arc(t.size/2,t.size/2,this.radius_,0,2*Math.PI,!0);else{var c=void 0!==this.radius2_?this.radius2_:this.radius_;for(c!==this.radius_&&(u*=2),r=0;r<=u;r++)s=2*r*Math.PI/u-Math.PI/2+this.angle_,l=r%2==0?this.radius_:c,e.lineTo(t.size/2+l*Math.cos(s),t.size/2+l*Math.sin(s))}if(this.fill_){var p=this.fill_.getColor();null===p&&(p=h.bL),e.fillStyle=(0,a.y)(p),e.fill()}this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,e.setLineDash&&t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineCap=t.lineCap,e.lineJoin=t.lineJoin,e.miterLimit=t.miterLimit,e.stroke()),e.closePath()},e.prototype.createHitDetectionCanvas_=function(t){if(this.hitDetectionCanvas_=this.getImage(1),this.fill_){var e=this.fill_.getColor(),i=0;if("string"==typeof e&&(e=(0,s._2)(e)),null===e?i=1:Array.isArray(e)&&(i=4===e.length?e[3]:1),0===i){var n=(0,l.E4)(t.size,t.size);this.hitDetectionCanvas_=n.canvas,this.drawHitDetectionCanvas_(t,n,0,0)}}},e.prototype.drawHitDetectionCanvas_=function(t,e,i,n){e.translate(i,n),e.beginPath();var o=this.points_;if(o===1/0)e.arc(t.size/2,t.size/2,this.radius_,0,2*Math.PI,!0);else{var r=void 0!==this.radius2_?this.radius2_:this.radius_;r!==this.radius_&&(o*=2);var s=void 0,a=void 0,l=void 0;for(s=0;s<=o;s++)l=2*s*Math.PI/o-Math.PI/2+this.angle_,a=s%2==0?this.radius_:r,e.lineTo(t.size/2+a*Math.cos(l),t.size/2+a*Math.sin(l))}e.fillStyle=h.bL,e.fill(),this.stroke_&&(e.strokeStyle=t.strokeStyle,e.lineWidth=t.strokeWidth,t.lineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.stroke()),e.closePath()},e}(r.Z);var p=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const f=function(t){function e(e){var i=e||{};return t.call(this,{points:1/0,fill:i.fill,radius:i.radius,stroke:i.stroke,scale:void 0!==i.scale?i.scale:1,rotation:void 0!==i.rotation?i.rotation:0,rotateWithView:void 0!==i.rotateWithView&&i.rotateWithView,displacement:void 0!==i.displacement?i.displacement:[0,0]})||this}return p(e,t),e.prototype.clone=function(){var t=this.getScale(),i=new e({fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,radius:this.getRadius(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice()});return i.setOpacity(this.getOpacity()),i},e.prototype.setRadius=function(t){this.radius_=t,this.render()},e}(c)},8185:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n=function(){function t(t){var e=t||{};this.color_=void 0!==e.color?e.color:null}return t.prototype.clone=function(){var e=this.getColor();return new t({color:Array.isArray(e)?e.slice():e||void 0})},t.prototype.getColor=function(){return this.color_},t.prototype.setColor=function(t){this.color_=t},t}()},8039:(t,e,i)=>{"use strict";i.d(e,{Z:()=>r});var n=i(9179),o=i(596);const r=function(){function t(t){this.opacity_=t.opacity,this.rotateWithView_=t.rotateWithView,this.rotation_=t.rotation,this.scale_=t.scale,this.scaleArray_=(0,o.Pq)(t.scale),this.displacement_=t.displacement}return t.prototype.clone=function(){var e=this.getScale();return new t({opacity:this.getOpacity(),scale:Array.isArray(e)?e.slice():e,rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),displacement:this.getDisplacement().slice()})},t.prototype.getOpacity=function(){return this.opacity_},t.prototype.getRotateWithView=function(){return this.rotateWithView_},t.prototype.getRotation=function(){return this.rotation_},t.prototype.getScale=function(){return this.scale_},t.prototype.getScaleArray=function(){return this.scaleArray_},t.prototype.getDisplacement=function(){return this.displacement_},t.prototype.getAnchor=function(){return(0,n.O3)()},t.prototype.getImage=function(t){return(0,n.O3)()},t.prototype.getHitDetectionImage=function(){return(0,n.O3)()},t.prototype.getPixelRatio=function(t){return 1},t.prototype.getImageState=function(){return(0,n.O3)()},t.prototype.getImageSize=function(){return(0,n.O3)()},t.prototype.getHitDetectionImageSize=function(){return(0,n.O3)()},t.prototype.getOrigin=function(){return(0,n.O3)()},t.prototype.getSize=function(){return(0,n.O3)()},t.prototype.setOpacity=function(t){this.opacity_=t},t.prototype.setRotateWithView=function(t){this.rotateWithView_=t},t.prototype.setRotation=function(t){this.rotation_=t},t.prototype.setScale=function(t){this.scale_=t,this.scaleArray_=(0,o.Pq)(t)},t.prototype.listenImageChange=function(t){(0,n.O3)()},t.prototype.load=function(){(0,n.O3)()},t.prototype.unlistenImageChange=function(t){(0,n.O3)()},t}()},767:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n=function(){function t(t){var e=t||{};this.color_=void 0!==e.color?e.color:null,this.lineCap_=e.lineCap,this.lineDash_=void 0!==e.lineDash?e.lineDash:null,this.lineDashOffset_=e.lineDashOffset,this.lineJoin_=e.lineJoin,this.miterLimit_=e.miterLimit,this.width_=e.width}return t.prototype.clone=function(){var e=this.getColor();return new t({color:Array.isArray(e)?e.slice():e||void 0,lineCap:this.getLineCap(),lineDash:this.getLineDash()?this.getLineDash().slice():void 0,lineDashOffset:this.getLineDashOffset(),lineJoin:this.getLineJoin(),miterLimit:this.getMiterLimit(),width:this.getWidth()})},t.prototype.getColor=function(){return this.color_},t.prototype.getLineCap=function(){return this.lineCap_},t.prototype.getLineDash=function(){return this.lineDash_},t.prototype.getLineDashOffset=function(){return this.lineDashOffset_},t.prototype.getLineJoin=function(){return this.lineJoin_},t.prototype.getMiterLimit=function(){return this.miterLimit_},t.prototype.getWidth=function(){return this.width_},t.prototype.setColor=function(t){this.color_=t},t.prototype.setLineCap=function(t){this.lineCap_=t},t.prototype.setLineDash=function(t){this.lineDash_=t},t.prototype.setLineDashOffset=function(t){this.lineDashOffset_=t},t.prototype.setLineJoin=function(t){this.lineJoin_=t},t.prototype.setMiterLimit=function(t){this.miterLimit_=t},t.prototype.setWidth=function(t){this.width_=t},t}()},1219:(t,e,i)=>{"use strict";i.d(e,{J$:()=>h,yF:()=>c,Ly:()=>p,ZP:()=>d});var n=i(9797),o=i(8185),r=i(8795),s=i(767),a=i(8906),l=function(){function t(t){var e=t||{};this.geometry_=null,this.geometryFunction_=f,void 0!==e.geometry&&this.setGeometry(e.geometry),this.fill_=void 0!==e.fill?e.fill:null,this.image_=void 0!==e.image?e.image:null,this.renderer_=void 0!==e.renderer?e.renderer:null,this.stroke_=void 0!==e.stroke?e.stroke:null,this.text_=void 0!==e.text?e.text:null,this.zIndex_=e.zIndex}return t.prototype.clone=function(){var e=this.getGeometry();return e&&"object"==typeof e&&(e=e.clone()),new t({geometry:e,fill:this.getFill()?this.getFill().clone():void 0,image:this.getImage()?this.getImage().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,text:this.getText()?this.getText().clone():void 0,zIndex:this.getZIndex()})},t.prototype.getRenderer=function(){return this.renderer_},t.prototype.setRenderer=function(t){this.renderer_=t},t.prototype.getGeometry=function(){return this.geometry_},t.prototype.getGeometryFunction=function(){return this.geometryFunction_},t.prototype.getFill=function(){return this.fill_},t.prototype.setFill=function(t){this.fill_=t},t.prototype.getImage=function(){return this.image_},t.prototype.setImage=function(t){this.image_=t},t.prototype.getStroke=function(){return this.stroke_},t.prototype.setStroke=function(t){this.stroke_=t},t.prototype.getText=function(){return this.text_},t.prototype.setText=function(t){this.text_=t},t.prototype.getZIndex=function(){return this.zIndex_},t.prototype.setGeometry=function(t){"function"==typeof t?this.geometryFunction_=t:"string"==typeof t?this.geometryFunction_=function(e){return e.get(t)}:t?void 0!==t&&(this.geometryFunction_=function(){return t}):this.geometryFunction_=f,this.geometry_=t},t.prototype.setZIndex=function(t){this.zIndex_=t},t}();function h(t){var e,i;"function"==typeof t?e=t:(Array.isArray(t)?i=t:((0,a.h)("function"==typeof t.getZIndex,41),i=[t]),e=function(){return i});return e}var u=null;function c(t,e){if(!u){var i=new o.Z({color:"rgba(255,255,255,0.4)"}),r=new s.Z({color:"#3399CC",width:1.25});u=[new l({image:new n.Z({fill:i,stroke:r,radius:5}),fill:i,stroke:r})]}return u}function p(){var t={},e=[255,255,255,1],i=[0,153,255,1];return t[r.Z.POLYGON]=[new l({fill:new o.Z({color:[255,255,255,.5]})})],t[r.Z.MULTI_POLYGON]=t[r.Z.POLYGON],t[r.Z.LINE_STRING]=[new l({stroke:new s.Z({color:e,width:5})}),new l({stroke:new s.Z({color:i,width:3})})],t[r.Z.MULTI_LINE_STRING]=t[r.Z.LINE_STRING],t[r.Z.CIRCLE]=t[r.Z.POLYGON].concat(t[r.Z.LINE_STRING]),t[r.Z.POINT]=[new l({image:new n.Z({radius:6,fill:new o.Z({color:i}),stroke:new s.Z({color:e,width:1.5})}),zIndex:1/0})],t[r.Z.MULTI_POINT]=t[r.Z.POINT],t[r.Z.GEOMETRY_COLLECTION]=t[r.Z.POLYGON].concat(t[r.Z.LINE_STRING],t[r.Z.POINT]),t}function f(t){return t.getGeometry()}const d=l},8288:(t,e,i)=>{"use strict";i.d(e,{Z:()=>n});const n={POINT:"point",LINE:"line"}},2359:(t,e,i)=>{"use strict";i.d(e,{Ue:()=>o,lk:()=>r,nn:()=>s,n3:()=>a,qC:()=>l,nb:()=>h,BB:()=>u});var n=i(8906);function o(){return[1,0,0,1,0,0]}function r(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}function s(t,e){var i=e[0],n=e[1];return e[0]=t[0]*i+t[2]*n+t[4],e[1]=t[1]*i+t[3]*n+t[5],e}function a(t,e,i){return o=e,r=0,s=0,a=i,l=0,h=0,(n=t)[0]=o,n[1]=r,n[2]=s,n[3]=a,n[4]=l,n[5]=h,n;var n,o,r,s,a,l,h}function l(t,e,i,n,o,r,s,a){var l=Math.sin(r),h=Math.cos(r);return t[0]=n*h,t[1]=o*l,t[2]=-n*l,t[3]=o*h,t[4]=s*n*h-a*n*l+e,t[5]=s*o*l+a*o*h+i,t}function h(t,e){var i,o=(i=e)[0]*i[3]-i[1]*i[2];(0,n.h)(0!==o,32);var r=e[0],s=e[1],a=e[2],l=e[3],h=e[4],u=e[5];return t[0]=l/o,t[1]=-s/o,t[2]=-a/o,t[3]=r/o,t[4]=(a*u-l*h)/o,t[5]=-(r*u-s*h)/o,t}function u(t){return"matrix("+t.join(", ")+")"}new Array(6)},9179:(t,e,i)=>{"use strict";function n(){return function(){throw new Error("Unimplemented abstract method.")}()}i.d(e,{O3:()=>n,sq:()=>r,q4:()=>s});var o=0;function r(t){return t.ol_uid||(t.ol_uid=String(++o))}var s="6.5.0"},2582:function(t){t.exports=function(){"use strict";function t(t,n,o,r,s){!function t(i,n,o,r,s){for(;r>o;){if(r-o>600){var a=r-o+1,l=n-o+1,h=Math.log(a),u=.5*Math.exp(2*h/3),c=.5*Math.sqrt(h*u*(a-u)/a)*(l-a/2<0?-1:1);t(i,n,Math.max(o,Math.floor(n-l*u/a+c)),Math.min(r,Math.floor(n+(a-l)*u/a+c)),s)}var p=i[n],f=o,d=r;for(e(i,o,n),s(i[r],p)>0&&e(i,o,r);f<d;){for(e(i,f,d),f++,d--;s(i[f],p)<0;)f++;for(;s(i[d],p)>0;)d--}0===s(i[o],p)?e(i,o,d):e(i,++d,r),d<=n&&(o=d+1),n<=d&&(r=d-1)}}(t,n,o||0,r||t.length-1,s||i)}function e(t,e,i){var n=t[e];t[e]=t[i],t[i]=n}function i(t,e){return t<e?-1:t>e?1:0}var n=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function o(t,e,i){if(!i)return e.indexOf(t);for(var n=0;n<e.length;n++)if(i(t,e[n]))return n;return-1}function r(t,e){s(t,0,t.children.length,e,t)}function s(t,e,i,n,o){o||(o=d(null)),o.minX=1/0,o.minY=1/0,o.maxX=-1/0,o.maxY=-1/0;for(var r=e;r<i;r++){var s=t.children[r];a(o,t.leaf?n(s):s)}return o}function a(t,e){return t.minX=Math.min(t.minX,e.minX),t.minY=Math.min(t.minY,e.minY),t.maxX=Math.max(t.maxX,e.maxX),t.maxY=Math.max(t.maxY,e.maxY),t}function l(t,e){return t.minX-e.minX}function h(t,e){return t.minY-e.minY}function u(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function c(t){return t.maxX-t.minX+(t.maxY-t.minY)}function p(t,e){return t.minX<=e.minX&&t.minY<=e.minY&&e.maxX<=t.maxX&&e.maxY<=t.maxY}function f(t,e){return e.minX<=t.maxX&&e.minY<=t.maxY&&e.maxX>=t.minX&&e.maxY>=t.minY}function d(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function _(e,i,n,o,r){for(var s=[i,n];s.length;)if(!((n=s.pop())-(i=s.pop())<=o)){var a=i+Math.ceil((n-i)/o/2)*o;t(e,a,i,n,r),s.push(i,a,a,n)}}return n.prototype.all=function(){return this._all(this.data,[])},n.prototype.search=function(t){var e=this.data,i=[];if(!f(t,e))return i;for(var n=this.toBBox,o=[];e;){for(var r=0;r<e.children.length;r++){var s=e.children[r],a=e.leaf?n(s):s;f(t,a)&&(e.leaf?i.push(s):p(t,a)?this._all(s,i):o.push(s))}e=o.pop()}return i},n.prototype.collides=function(t){var e=this.data;if(!f(t,e))return!1;for(var i=[];e;){for(var n=0;n<e.children.length;n++){var o=e.children[n],r=e.leaf?this.toBBox(o):o;if(f(t,r)){if(e.leaf||p(t,r))return!0;i.push(o)}}e=i.pop()}return!1},n.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var e=0;e<t.length;e++)this.insert(t[e]);return this}var i=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===i.height)this._splitRoot(this.data,i);else{if(this.data.height<i.height){var n=this.data;this.data=i,i=n}this._insert(i,this.data.height-i.height-1,!0)}else this.data=i;return this},n.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},n.prototype.clear=function(){return this.data=d([]),this},n.prototype.remove=function(t,e){if(!t)return this;for(var i,n,r,s=this.data,a=this.toBBox(t),l=[],h=[];s||l.length;){if(s||(s=l.pop(),n=l[l.length-1],i=h.pop(),r=!0),s.leaf){var u=o(t,s.children,e);if(-1!==u)return s.children.splice(u,1),l.push(s),this._condense(l),this}r||s.leaf||!p(s,a)?n?(i++,s=n.children[i],r=!1):s=null:(l.push(s),h.push(i),i=0,n=s,s=s.children[0])}return this},n.prototype.toBBox=function(t){return t},n.prototype.compareMinX=function(t,e){return t.minX-e.minX},n.prototype.compareMinY=function(t,e){return t.minY-e.minY},n.prototype.toJSON=function(){return this.data},n.prototype.fromJSON=function(t){return this.data=t,this},n.prototype._all=function(t,e){for(var i=[];t;)t.leaf?e.push.apply(e,t.children):i.push.apply(i,t.children),t=i.pop();return e},n.prototype._build=function(t,e,i,n){var o,s=i-e+1,a=this._maxEntries;if(s<=a)return r(o=d(t.slice(e,i+1)),this.toBBox),o;n||(n=Math.ceil(Math.log(s)/Math.log(a)),a=Math.ceil(s/Math.pow(a,n-1))),(o=d([])).leaf=!1,o.height=n;var l=Math.ceil(s/a),h=l*Math.ceil(Math.sqrt(a));_(t,e,i,h,this.compareMinX);for(var u=e;u<=i;u+=h){var c=Math.min(u+h-1,i);_(t,u,c,l,this.compareMinY);for(var p=u;p<=c;p+=l){var f=Math.min(p+l-1,c);o.children.push(this._build(t,p,f,n-1))}}return r(o,this.toBBox),o},n.prototype._chooseSubtree=function(t,e,i,n){for(;n.push(e),!e.leaf&&n.length-1!==i;){for(var o=1/0,r=1/0,s=void 0,a=0;a<e.children.length;a++){var l=e.children[a],h=u(l),c=(p=t,f=l,(Math.max(f.maxX,p.maxX)-Math.min(f.minX,p.minX))*(Math.max(f.maxY,p.maxY)-Math.min(f.minY,p.minY))-h);c<r?(r=c,o=h<o?h:o,s=l):c===r&&h<o&&(o=h,s=l)}e=s||e.children[0]}var p,f;return e},n.prototype._insert=function(t,e,i){var n=i?t:this.toBBox(t),o=[],r=this._chooseSubtree(n,this.data,e,o);for(r.children.push(t),a(r,n);e>=0&&o[e].children.length>this._maxEntries;)this._split(o,e),e--;this._adjustParentBBoxes(n,o,e)},n.prototype._split=function(t,e){var i=t[e],n=i.children.length,o=this._minEntries;this._chooseSplitAxis(i,o,n);var s=this._chooseSplitIndex(i,o,n),a=d(i.children.splice(s,i.children.length-s));a.height=i.height,a.leaf=i.leaf,r(i,this.toBBox),r(a,this.toBBox),e?t[e-1].children.push(a):this._splitRoot(i,a)},n.prototype._splitRoot=function(t,e){this.data=d([t,e]),this.data.height=t.height+1,this.data.leaf=!1,r(this.data,this.toBBox)},n.prototype._chooseSplitIndex=function(t,e,i){for(var n,o,r,a,l,h,c,p=1/0,f=1/0,d=e;d<=i-e;d++){var _=s(t,0,d,this.toBBox),g=s(t,d,i,this.toBBox),y=(o=_,r=g,void 0,void 0,void 0,void 0,a=Math.max(o.minX,r.minX),l=Math.max(o.minY,r.minY),h=Math.min(o.maxX,r.maxX),c=Math.min(o.maxY,r.maxY),Math.max(0,h-a)*Math.max(0,c-l)),v=u(_)+u(g);y<p?(p=y,n=d,f=v<f?v:f):y===p&&v<f&&(f=v,n=d)}return n||i-e},n.prototype._chooseSplitAxis=function(t,e,i){var n=t.leaf?this.compareMinX:l,o=t.leaf?this.compareMinY:h;this._allDistMargin(t,e,i,n)<this._allDistMargin(t,e,i,o)&&t.children.sort(n)},n.prototype._allDistMargin=function(t,e,i,n){t.children.sort(n);for(var o=this.toBBox,r=s(t,0,e,o),l=s(t,i-e,i,o),h=c(r)+c(l),u=e;u<i-e;u++){var p=t.children[u];a(r,t.leaf?o(p):p),h+=c(r)}for(var f=i-e-1;f>=e;f--){var d=t.children[f];a(l,t.leaf?o(d):d),h+=c(l)}return h},n.prototype._adjustParentBBoxes=function(t,e,i){for(var n=i;n>=0;n--)a(e[n],t)},n.prototype._condense=function(t){for(var e=t.length-1,i=void 0;e>=0;e--)0===t[e].children.length?e>0?(i=t[e-1].children).splice(i.indexOf(t[e]),1):this.clear():r(t[e],this.toBBox)},n}()},1978:(t,e,i)=>{"use strict";i.d(e,{J:()=>k,q:()=>j});var n,o=i(8493),r=i(3381),s=i(8906),a=i(3002),l=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const h=function(t){function e(e){var i=t.call(this)||this;if(i.id_=void 0,i.geometryName_="geometry",i.style_=null,i.styleFunction_=void 0,i.geometryChangeKey_=null,i.addEventListener((0,o.v_)(i.geometryName_),i.handleGeometryChanged_),e)if("function"==typeof e.getSimplifiedGeometry){var n=e;i.setGeometry(n)}else{var r=e;i.setProperties(r)}return i}return l(e,t),e.prototype.clone=function(){var t=new e(this.hasProperties()?this.getProperties():null);t.setGeometryName(this.getGeometryName());var i=this.getGeometry();i&&t.setGeometry(i.clone());var n=this.getStyle();return n&&t.setStyle(n),t},e.prototype.getGeometry=function(){return this.get(this.geometryName_)},e.prototype.getId=function(){return this.id_},e.prototype.getGeometryName=function(){return this.geometryName_},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.handleGeometryChange_=function(){this.changed()},e.prototype.handleGeometryChanged_=function(){this.geometryChangeKey_&&((0,a.bN)(this.geometryChangeKey_),this.geometryChangeKey_=null);var t=this.getGeometry();t&&(this.geometryChangeKey_=(0,a.oL)(t,r.Z.CHANGE,this.handleGeometryChange_,this)),this.changed()},e.prototype.setGeometry=function(t){this.set(this.geometryName_,t)},e.prototype.setStyle=function(t){var e,i;this.style_=t,this.styleFunction_=t?"function"==typeof(e=t)?e:(Array.isArray(e)?i=e:((0,s.h)("function"==typeof e.getZIndex,41),i=[e]),function(){return i}):void 0,this.changed()},e.prototype.setId=function(t){this.id_=t,this.changed()},e.prototype.setGeometryName=function(t){this.removeEventListener((0,o.v_)(this.geometryName_),this.handleGeometryChanged_),this.geometryName_=t,this.addEventListener((0,o.v_)(this.geometryName_),this.handleGeometryChanged_),this.handleGeometryChanged_()},e}(o.ZP);var u=i(188);const c="bottom-center",p="bottom-right",f="center-center",d="center-right";var _=i(7644),g=i(1915),y=i(5386),v=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),m="element",x="map",E="offset",C="position",S="positioning";const O=function(t){function e(e){var i=t.call(this)||this;i.options=e,i.id=e.id,i.insertFirst=void 0===e.insertFirst||e.insertFirst,i.stopEvent=void 0===e.stopEvent||e.stopEvent,i.element=document.createElement("div"),i.element.className=void 0!==e.className?e.className:"ol-overlay-container "+_.$A,i.element.style.position="absolute",i.element.style.pointerEvents="auto";var n=e.autoPan;return n&&"object"!=typeof n&&(n={animation:e.autoPanAnimation,margin:e.autoPanMargin}),i.autoPan=n||!1,i.rendered={transform_:"",visible:!0},i.mapPostrenderListenerKey=null,i.addEventListener((0,o.v_)(m),i.handleElementChanged),i.addEventListener((0,o.v_)(x),i.handleMapChanged),i.addEventListener((0,o.v_)(E),i.handleOffsetChanged),i.addEventListener((0,o.v_)(C),i.handlePositionChanged),i.addEventListener((0,o.v_)(S),i.handlePositioningChanged),void 0!==e.element&&i.setElement(e.element),i.setOffset(void 0!==e.offset?e.offset:[0,0]),i.setPositioning(void 0!==e.positioning?e.positioning:"top-left"),void 0!==e.position&&i.setPosition(e.position),i}return v(e,t),e.prototype.getElement=function(){return this.get(m)},e.prototype.getId=function(){return this.id},e.prototype.getMap=function(){return this.get(x)},e.prototype.getOffset=function(){return this.get(E)},e.prototype.getPosition=function(){return this.get(C)},e.prototype.getPositioning=function(){return this.get(S)},e.prototype.handleElementChanged=function(){(0,y.ep)(this.element);var t=this.getElement();t&&this.element.appendChild(t)},e.prototype.handleMapChanged=function(){this.mapPostrenderListenerKey&&((0,y.ZF)(this.element),(0,a.bN)(this.mapPostrenderListenerKey),this.mapPostrenderListenerKey=null);var t=this.getMap();if(t){this.mapPostrenderListenerKey=(0,a.oL)(t,u.Z.POSTRENDER,this.render,this),this.updatePixelPosition();var e=this.stopEvent?t.getOverlayContainerStopEvent():t.getOverlayContainer();this.insertFirst?e.insertBefore(this.element,e.childNodes[0]||null):e.appendChild(this.element),this.performAutoPan()}},e.prototype.render=function(){this.updatePixelPosition()},e.prototype.handleOffsetChanged=function(){this.updatePixelPosition()},e.prototype.handlePositionChanged=function(){this.updatePixelPosition(),this.performAutoPan()},e.prototype.handlePositioningChanged=function(){this.updatePixelPosition()},e.prototype.setElement=function(t){this.set(m,t)},e.prototype.setMap=function(t){this.set(x,t)},e.prototype.setOffset=function(t){this.set(E,t)},e.prototype.setPosition=function(t){this.set(C,t)},e.prototype.performAutoPan=function(){this.autoPan&&this.panIntoView(this.autoPan)},e.prototype.panIntoView=function(t){var e=this.getMap();if(e&&e.getTargetElement()&&this.get(C)){var i=this.getRect(e.getTargetElement(),e.getSize()),n=this.getElement(),o=this.getRect(n,[(0,y.iO)(n),(0,y.Pb)(n)]),r=t||{},s=void 0===r.margin?20:r.margin;if(!(0,g.r4)(i,o)){var a=o[0]-i[0],l=i[2]-o[2],h=o[1]-i[1],u=i[3]-o[3],c=[0,0];if(a<0?c[0]=a-s:l<0&&(c[0]=Math.abs(l)+s),h<0?c[1]=h-s:u<0&&(c[1]=Math.abs(u)+s),0!==c[0]||0!==c[1]){var p=e.getView().getCenterInternal(),f=e.getPixelFromCoordinateInternal(p);if(!f)return;var d=[f[0]+c[0],f[1]+c[1]],_=r.animation||{};e.getView().animateInternal({center:e.getCoordinateFromPixelInternal(d),duration:_.duration,easing:_.easing})}}}},e.prototype.getRect=function(t,e){var i=t.getBoundingClientRect(),n=i.left+window.pageXOffset,o=i.top+window.pageYOffset;return[n,o,n+e[0],o+e[1]]},e.prototype.setPositioning=function(t){this.set(S,t)},e.prototype.setVisible=function(t){this.rendered.visible!==t&&(this.element.style.display=t?"":"none",this.rendered.visible=t)},e.prototype.updatePixelPosition=function(){var t=this.getMap(),e=this.getPosition();if(t&&t.isRendered()&&e){var i=t.getPixelFromCoordinate(e),n=t.getSize();this.updateRenderedPosition(i,n)}else this.setVisible(!1)},e.prototype.updateRenderedPosition=function(t,e){var i=this.element.style,n=this.getOffset(),o=this.getPositioning();this.setVisible(!0);var r=Math.round(t[0]+n[0])+"px",s=Math.round(t[1]+n[1])+"px",a="0%",l="0%";o==p||o==d||"top-right"==o?a="-100%":o!=c&&o!=f&&"top-center"!=o||(a="-50%"),"bottom-left"==o||o==c||o==p?l="-100%":"center-left"!=o&&o!=f&&o!=d||(l="-50%");var h="translate("+a+", "+l+") translate("+r+", "+s+")";this.rendered.transform_!=h&&(this.rendered.transform_=h,i.transform=h,i.msTransform=h)},e.prototype.getOptions=function(){return this.options},e}(o.ZP);var w=i(8185),T=i(8288),b=i(596);const I=function(){function t(t){var e=t||{};this.font_=e.font,this.rotation_=e.rotation,this.rotateWithView_=e.rotateWithView,this.scale_=e.scale,this.scaleArray_=(0,b.Pq)(void 0!==e.scale?e.scale:1),this.text_=e.text,this.textAlign_=e.textAlign,this.textBaseline_=e.textBaseline,this.fill_=void 0!==e.fill?e.fill:new w.Z({color:"#333"}),this.maxAngle_=void 0!==e.maxAngle?e.maxAngle:Math.PI/4,this.placement_=void 0!==e.placement?e.placement:T.Z.POINT,this.overflow_=!!e.overflow,this.stroke_=void 0!==e.stroke?e.stroke:null,this.offsetX_=void 0!==e.offsetX?e.offsetX:0,this.offsetY_=void 0!==e.offsetY?e.offsetY:0,this.backgroundFill_=e.backgroundFill?e.backgroundFill:null,this.backgroundStroke_=e.backgroundStroke?e.backgroundStroke:null,this.padding_=void 0===e.padding?null:e.padding}return t.prototype.clone=function(){var e=this.getScale();return new t({font:this.getFont(),placement:this.getPlacement(),maxAngle:this.getMaxAngle(),overflow:this.getOverflow(),rotation:this.getRotation(),rotateWithView:this.getRotateWithView(),scale:Array.isArray(e)?e.slice():e,text:this.getText(),textAlign:this.getTextAlign(),textBaseline:this.getTextBaseline(),fill:this.getFill()?this.getFill().clone():void 0,stroke:this.getStroke()?this.getStroke().clone():void 0,offsetX:this.getOffsetX(),offsetY:this.getOffsetY(),backgroundFill:this.getBackgroundFill()?this.getBackgroundFill().clone():void 0,backgroundStroke:this.getBackgroundStroke()?this.getBackgroundStroke().clone():void 0,padding:this.getPadding()})},t.prototype.getOverflow=function(){return this.overflow_},t.prototype.getFont=function(){return this.font_},t.prototype.getMaxAngle=function(){return this.maxAngle_},t.prototype.getPlacement=function(){return this.placement_},t.prototype.getOffsetX=function(){return this.offsetX_},t.prototype.getOffsetY=function(){return this.offsetY_},t.prototype.getFill=function(){return this.fill_},t.prototype.getRotateWithView=function(){return this.rotateWithView_},t.prototype.getRotation=function(){return this.rotation_},t.prototype.getScale=function(){return this.scale_},t.prototype.getScaleArray=function(){return this.scaleArray_},t.prototype.getStroke=function(){return this.stroke_},t.prototype.getText=function(){return this.text_},t.prototype.getTextAlign=function(){return this.textAlign_},t.prototype.getTextBaseline=function(){return this.textBaseline_},t.prototype.getBackgroundFill=function(){return this.backgroundFill_},t.prototype.getBackgroundStroke=function(){return this.backgroundStroke_},t.prototype.getPadding=function(){return this.padding_},t.prototype.setOverflow=function(t){this.overflow_=t},t.prototype.setFont=function(t){this.font_=t},t.prototype.setMaxAngle=function(t){this.maxAngle_=t},t.prototype.setOffsetX=function(t){this.offsetX_=t},t.prototype.setOffsetY=function(t){this.offsetY_=t},t.prototype.setPlacement=function(t){this.placement_=t},t.prototype.setRotateWithView=function(t){this.rotateWithView_=t},t.prototype.setFill=function(t){this.fill_=t},t.prototype.setRotation=function(t){this.rotation_=t},t.prototype.setScale=function(t){this.scale_=t,this.scaleArray_=(0,b.Pq)(void 0!==t?t:1)},t.prototype.setStroke=function(t){this.stroke_=t},t.prototype.setText=function(t){this.text_=t},t.prototype.setTextAlign=function(t){this.textAlign_=t},t.prototype.setTextBaseline=function(t){this.textBaseline_=t},t.prototype.setBackgroundFill=function(t){this.backgroundFill_=t},t.prototype.setBackgroundStroke=function(t){this.backgroundStroke_=t},t.prototype.setPadding=function(t){this.padding_=t},t}();var P=i(1219),R=i(9797),L=i(767),M=i(2043),A=i(1964),F=i(8795),Z=i(9882);const D={primary:"#ff1493",secondary:"#ffff00"};class k extends h{constructor({name:t,location:e,info:i=null,infoHTML:n="",color:o={}}){super({type:F.Z.POINT,geometry:new M.Z((0,A.mi)(e)),name:t}),this.popup=null,this.handleChange=t=>{switch(t.key){case"location":this.popup.setPosition((0,A.mi)(this.get("location")));break;case"info":this.popup.setElement(this.get("info"))}},this.set("location",e),this.set("info",i||function(t=""){return Object.assign(document.createElement("div"),{className:"info",innerHTML:t})}(n)),this.set("color",Object.assign(Object.assign({},D),o)),this.on("propertychange",this.handleChange),this.popup=this.initPopup()}get hasInfo(){return""!==this.popup.getElement().innerHTML.trim()}showInfo(t){this.hasInfo&&t.addOverlay(this.popup)}hideInfo(t){t.removeOverlay(this.popup)}toggleInfo(t,e){return e?this.showInfo(t):this.hideInfo(t)}toJSON(){return{name:this.get("name"),location:this.get("location"),infoHTML:(t=this.get("info").innerHTML,t.trim().replace(/\s+/g," ")),color:(0,Z.v)(this.get("color"),((t,e)=>e.toLowerCase()!==D[t]))};var t}initPopup(){return this.popup&&this.popup.dispose(),new O({element:this.get("info"),position:(0,A.mi)(this.get("location")),positioning:"center-left",offset:[20,0],autoPan:{animation:{duration:200}}})}}function j(t,e=!1){const i=t.get("color");return new P.ZP({image:new R.Z(Object.assign({radius:10,fill:new w.Z({color:e?i.secondary:i.primary})},e?{stroke:new L.Z({color:i.primary,width:3})}:{})),text:new I({text:t.get("name"),textAlign:"top",backgroundFill:new w.Z({color:"white"}),padding:[4,4,4,4],offsetY:25})})}},9882:(t,e,i)=>{"use strict";function n(t,e){return Object.entries(t).reduce(((t,[i,n])=>Object.assign(Object.assign({},t),e(i,n)?{[i]:n}:{})),{})}i.d(e,{v:()=>n})}},r={};function s(t){if(r[t])return r[t].exports;var e=r[t]={exports:{}};return o[t].call(e.exports,e,e.exports,s),e.exports}s.m=o,s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.f={},s.e=t=>Promise.all(Object.keys(s.f).reduce(((e,i)=>(s.f[i](t,e),e)),[])),s.u=t=>t+".js",s.miniCssF=t=>t+".css",s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),t={},e="map-markers:",s.l=(i,n,o,r)=>{if(t[i])t[i].push(n);else{var a,l;if(void 0!==o)for(var h=document.getElementsByTagName("script"),u=0;u<h.length;u++){var c=h[u];if(c.getAttribute("src")==i||c.getAttribute("data-webpack")==e+o){a=c;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,s.nc&&a.setAttribute("nonce",s.nc),a.setAttribute("data-webpack",e+o),a.src=i),t[i]=[n];var p=(e,n)=>{a.onerror=a.onload=null,clearTimeout(f);var o=t[i];if(delete t[i],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((t=>t(n))),e)return e(n)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),l&&document.head.appendChild(a)}},s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),i=t=>new Promise(((e,i)=>{var n=s.miniCssF(t),o=s.p+n;if(((t,e)=>{for(var i=document.getElementsByTagName("link"),n=0;n<i.length;n++){var o=(s=i[n]).getAttribute("data-href")||s.getAttribute("href");if("stylesheet"===s.rel&&(o===t||o===e))return s}var r=document.getElementsByTagName("style");for(n=0;n<r.length;n++){var s;if((o=(s=r[n]).getAttribute("data-href"))===t||o===e)return s}})(n,o))return e();((t,e,i,n)=>{var o=document.createElement("link");o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=r=>{if(o.onerror=o.onload=null,"load"===r.type)i();else{var s=r&&("load"===r.type?"missing":r.type),a=r&&r.target&&r.target.href||e,l=new Error("Loading CSS chunk "+t+" failed.\n("+a+")");l.code="CSS_CHUNK_LOAD_FAILED",l.type=s,l.request=a,o.parentNode.removeChild(o),n(l)}},o.href=e,document.head.appendChild(o)})(t,o,e,i)})),n={179:0},s.f.miniCss=(t,e)=>{n[t]?e.push(n[t]):0!==n[t]&&{301:1}[t]&&e.push(n[t]=i(t).then((()=>{n[t]=0}),(e=>{throw delete n[t],e})))},(()=>{var t={179:0};s.f.j=(e,i)=>{var n=s.o(t,e)?t[e]:void 0;if(0!==n)if(n)i.push(n[2]);else{var o=new Promise(((i,o)=>{n=t[e]=[i,o]}));i.push(n[2]=o);var r=s.p+s.u(e),a=new Error;s.l(r,(i=>{if(s.o(t,e)&&(0!==(n=t[e])&&(t[e]=void 0),n)){var o=i&&("load"===i.type?"missing":i.type),r=i&&i.target&&i.target.src;a.message="Loading chunk "+e+" failed.\n("+o+": "+r+")",a.name="ChunkLoadError",a.type=o,a.request=r,n[1](a)}}),"chunk-"+e,e)}};var e=(e,i)=>{for(var n,o,[r,a,l]=i,h=0,u=[];h<r.length;h++)o=r[h],s.o(t,o)&&t[o]&&u.push(t[o][0]),t[o]=0;for(n in a)s.o(a,n)&&(s.m[n]=a[n]);for(l&&l(s),e&&e(i);u.length;)u.shift()()},i=self.webpackChunkmap_markers=self.webpackChunkmap_markers||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})(),(()=>{"use strict";var t=s(967),e=s(4011),i=s(9179),n=s(2359),o=s(1915),r=s(8913);function a(t,e,i){return e+":"+t+":"+(i?(0,r.XC)(i):"null")}var l=new(function(){function t(){this.cache_={},this.cacheSize_=0,this.maxCacheSize_=32}return t.prototype.clear=function(){this.cache_={},this.cacheSize_=0},t.prototype.canExpireCache=function(){return this.cacheSize_>this.maxCacheSize_},t.prototype.expire=function(){if(this.canExpireCache()){var t=0;for(var e in this.cache_){var i=this.cache_[e];0!=(3&t++)||i.hasListener()||(delete this.cache_[e],--this.cacheSize_)}}},t.prototype.get=function(t,e,i){var n=a(t,e,i);return n in this.cache_?this.cache_[n]:null},t.prototype.set=function(t,e,i,n){var o=a(t,e,i);this.cache_[o]=n,++this.cacheSize_},t.prototype.setSize=function(t){this.maxCacheSize_=t,this.expire()},t}()),h=s(8493);const u="opacity",c="visible",p="extent",f="zIndex",d="maxResolution",_="minResolution",g="maxZoom",y="minZoom",v="source";var m,x=s(8906),E=s(3580),C=s(1882),S=(m=function(t,e){return(m=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}m(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)});const O=function(t){function e(e){var i=t.call(this)||this,n=(0,E.f0)({},e);return n.opacity=void 0!==e.opacity?e.opacity:1,(0,x.h)("number"==typeof n.opacity,64),n.visible=void 0===e.visible||e.visible,n.zIndex=e.zIndex,n.maxResolution=void 0!==e.maxResolution?e.maxResolution:1/0,n.minResolution=void 0!==e.minResolution?e.minResolution:0,n.minZoom=void 0!==e.minZoom?e.minZoom:-1/0,n.maxZoom=void 0!==e.maxZoom?e.maxZoom:1/0,i.className_=void 0!==n.className?e.className:"ol-layer",delete n.className,i.setProperties(n),i.state_=null,i}return S(e,t),e.prototype.getClassName=function(){return this.className_},e.prototype.getLayerState=function(t){var e=this.state_||{layer:this,managed:void 0===t||t},i=this.getZIndex();return e.opacity=(0,C.uZ)(Math.round(100*this.getOpacity())/100,0,1),e.sourceState=this.getSourceState(),e.visible=this.getVisible(),e.extent=this.getExtent(),e.zIndex=void 0!==i?i:!1===e.managed?1/0:0,e.maxResolution=this.getMaxResolution(),e.minResolution=Math.max(this.getMinResolution(),0),e.minZoom=this.getMinZoom(),e.maxZoom=this.getMaxZoom(),this.state_=e,e},e.prototype.getLayersArray=function(t){return(0,i.O3)()},e.prototype.getLayerStatesArray=function(t){return(0,i.O3)()},e.prototype.getExtent=function(){return this.get(p)},e.prototype.getMaxResolution=function(){return this.get(d)},e.prototype.getMinResolution=function(){return this.get(_)},e.prototype.getMinZoom=function(){return this.get(y)},e.prototype.getMaxZoom=function(){return this.get(g)},e.prototype.getOpacity=function(){return this.get(u)},e.prototype.getSourceState=function(){return(0,i.O3)()},e.prototype.getVisible=function(){return this.get(c)},e.prototype.getZIndex=function(){return this.get(f)},e.prototype.setExtent=function(t){this.set(p,t)},e.prototype.setMaxResolution=function(t){this.set(d,t)},e.prototype.setMinResolution=function(t){this.set(_,t)},e.prototype.setMaxZoom=function(t){this.set(g,t)},e.prototype.setMinZoom=function(t){this.set(y,t)},e.prototype.setOpacity=function(t){(0,x.h)("number"==typeof t,64),this.set(u,t)},e.prototype.setVisible=function(t){this.set(c,t)},e.prototype.setZIndex=function(t){this.set(f,t)},e.prototype.disposeInternal=function(){this.state_&&(this.state_.layer=null,this.state_=null),t.prototype.disposeInternal.call(this)},e}(h.ZP);var w=s(3381);const T="precompose",b="rendercomplete",I="undefined",P="ready";var R=s(3002),L=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function M(t,e){if(!t.visible)return!1;var i=e.resolution;if(i<t.minResolution||i>=t.maxResolution)return!1;var n=e.zoom;return n>t.minZoom&&n<=t.maxZoom}const A=function(t){function e(e){var i=this,n=(0,E.f0)({},e);delete n.source,(i=t.call(this,n)||this).mapPrecomposeKey_=null,i.mapRenderKey_=null,i.sourceChangeKey_=null,i.renderer_=null,e.render&&(i.render=e.render),e.map&&i.setMap(e.map),i.addEventListener((0,h.v_)(v),i.handleSourcePropertyChange_);var o=e.source?e.source:null;return i.setSource(o),i}return L(e,t),e.prototype.getLayersArray=function(t){var e=t||[];return e.push(this),e},e.prototype.getLayerStatesArray=function(t){var e=t||[];return e.push(this.getLayerState()),e},e.prototype.getSource=function(){return this.get(v)||null},e.prototype.getSourceState=function(){var t=this.getSource();return t?t.getState():I},e.prototype.handleSourceChange_=function(){this.changed()},e.prototype.handleSourcePropertyChange_=function(){this.sourceChangeKey_&&((0,R.bN)(this.sourceChangeKey_),this.sourceChangeKey_=null);var t=this.getSource();t&&(this.sourceChangeKey_=(0,R.oL)(t,w.Z.CHANGE,this.handleSourceChange_,this)),this.changed()},e.prototype.getFeatures=function(t){return this.renderer_.getFeatures(t)},e.prototype.render=function(t,e){var i=this.getRenderer();if(i.prepareFrame(t))return i.renderFrame(t,e)},e.prototype.setMap=function(t){this.mapPrecomposeKey_&&((0,R.bN)(this.mapPrecomposeKey_),this.mapPrecomposeKey_=null),t||this.changed(),this.mapRenderKey_&&((0,R.bN)(this.mapRenderKey_),this.mapRenderKey_=null),t&&(this.mapPrecomposeKey_=(0,R.oL)(t,T,(function(t){var e=t.frameState.layerStatesArray,i=this.getLayerState(!1);(0,x.h)(!e.some((function(t){return t.layer===i.layer})),67),e.push(i)}),this),this.mapRenderKey_=(0,R.oL)(this,w.Z.CHANGE,t.render,t),this.changed())},e.prototype.setSource=function(t){this.set(v,t)},e.prototype.getRenderer=function(){return this.renderer_||(this.renderer_=this.createRenderer()),this.renderer_},e.prototype.hasRenderer=function(){return!!this.renderer_},e.prototype.createRenderer=function(){return null},e.prototype.disposeInternal=function(){this.setSource(null),t.prototype.disposeInternal.call(this)},e}(O);function F(t,e){for(var i=!0,n=t.length-1;n>=0;--n)if(t[n]!=e[n]){i=!1;break}return i}function Z(t,e){var i=Math.cos(e),n=Math.sin(e),o=t[0]*i-t[1]*n,r=t[1]*i+t[0]*n;return t[0]=o,t[1]=r,t}function D(t,e){if(e.canWrapX()){var i=(0,o.dz)(e.getExtent()),n=function(t,e,i){var n=e.getExtent(),r=0;if(e.canWrapX()&&(t[0]<n[0]||t[0]>n[2])){var s=i||(0,o.dz)(n);r=Math.floor((t[0]-n[0])/s)}return r}(t,e,i);n&&(t[0]-=n*i)}return t}var k=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function j(t,e){l.expire()}const N=function(t){function r(e){var i=t.call(this)||this;return i.map_=e,i}return k(r,t),r.prototype.dispatchRenderEvent=function(t,e){(0,i.O3)()},r.prototype.calculateMatrices2D=function(t){var e=t.viewState,i=t.coordinateToPixelTransform,o=t.pixelToCoordinateTransform;(0,n.qC)(i,t.size[0]/2,t.size[1]/2,1/e.resolution,-1/e.resolution,-e.rotation,-e.center[0],-e.center[1]),(0,n.nb)(o,i)},r.prototype.forEachFeatureAtCoordinate=function(t,e,i,n,r,s,a,l){var h,u=e.viewState;function c(t,e,i,n){return r.call(s,e,t?i:null,n)}var p=u.projection,f=D(t.slice(),p),d=[[0,0]];if(p.canWrapX()&&n){var _=p.getExtent(),g=(0,o.dz)(_);d.push([-g,0],[g,0])}for(var y=e.layerStatesArray,v=y.length,m=[],x=[],E=0;E<d.length;E++)for(var C=v-1;C>=0;--C){var S=y[C],O=S.layer;if(O.hasRenderer()&&M(S,u)&&a.call(l,O)){var w=O.getRenderer(),T=O.getSource();if(w&&T){var b=T.getWrapX()?f:t,I=c.bind(null,S.managed);x[0]=b[0]+d[E][0],x[1]=b[1]+d[E][1],h=w.forEachFeatureAtCoordinate(x,e,i,I,m)}if(h)return h}}if(0!==m.length){var P=1/m.length;return m.forEach((function(t,e){return t.distanceSq+=e*P})),m.sort((function(t,e){return t.distanceSq-e.distanceSq})),m.some((function(t){return h=t.callback(t.feature,t.layer,t.geometry)})),h}},r.prototype.forEachLayerAtPixel=function(t,e,n,o,r){return(0,i.O3)()},r.prototype.hasFeatureAtCoordinate=function(t,i,n,o,r,s){return void 0!==this.forEachFeatureAtCoordinate(t,i,n,o,e.uX,this,r,s)},r.prototype.getMap=function(){return this.map_},r.prototype.renderFrame=function(t){(0,i.O3)()},r.prototype.scheduleExpireIconCache=function(t){l.canExpireCache()&&t.postRenderFunctions.push(j)},r}(t.Z);var G=s(3910),z=s(9520),W=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Y=function(t){function e(e,i,n,o){var r=t.call(this,e)||this;return r.inversePixelTransform=i,r.frameState=n,r.context=o,r}return W(e,t),e}(z.ZP);var X=s(7644),K=s(8509),B=s(5386),V=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const U=function(t){function e(e){var i=t.call(this,e)||this;i.fontChangeListenerKey_=(0,R.oL)(K.sG,G.Z.PROPERTYCHANGE,e.redrawText.bind(e)),i.element_=document.createElement("div");var n=i.element_.style;n.position="absolute",n.width="100%",n.height="100%",n.zIndex="0",i.element_.className=X.XV+" ol-layers";var o=e.getViewport();return o.insertBefore(i.element_,o.firstChild||null),i.children_=[],i.renderedVisible_=!0,i}return V(e,t),e.prototype.dispatchRenderEvent=function(t,e){var i=this.getMap();if(i.hasListener(t)){var n=new Y(t,void 0,e);i.dispatchEvent(n)}},e.prototype.disposeInternal=function(){(0,R.bN)(this.fontChangeListenerKey_),this.element_.parentNode.removeChild(this.element_),t.prototype.disposeInternal.call(this)},e.prototype.renderFrame=function(t){if(t){this.calculateMatrices2D(t),this.dispatchRenderEvent(T,t);var e=t.layerStatesArray.sort((function(t,e){return t.zIndex-e.zIndex})),i=t.viewState;this.children_.length=0;for(var n=[],o=null,r=0,s=e.length;r<s;++r){var a=e[r];if(t.layerIndex=r,M(a,i)&&(a.sourceState==P||a.sourceState==I)){var l=a.layer,h=l.render(t,o);h&&(h!==o&&(this.children_.push(h),o=h),"getDeclutter"in l&&n.push(l))}}for(r=n.length-1;r>=0;--r)n[r].renderDeclutter(t);(0,B.hF)(this.element_,this.children_),this.dispatchRenderEvent("postcompose",t),this.renderedVisible_||(this.element_.style.display="",this.renderedVisible_=!0),this.scheduleExpireIconCache(t)}else this.renderedVisible_&&(this.element_.style.display="none",this.renderedVisible_=!1)},e.prototype.forEachLayerAtPixel=function(t,e,i,n,o){for(var r=e.viewState,s=e.layerStatesArray,a=s.length-1;a>=0;--a){var l=s[a],h=l.layer;if(h.hasRenderer()&&M(l,r)&&o(h)){var u=h.getRenderer().getDataAtPixel(t,e,i);if(u){var c=n(h,u);if(c)return c}}}},e}(N);var q=s(8426),H=s(9629),J=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),$="layers";const Q=function(t){function e(e){var i=this,n=e||{},o=(0,E.f0)({},n);delete o.layers;var r=n.layers;return(i=t.call(this,o)||this).layersListenerKeys_=[],i.listenerKeys_={},i.addEventListener((0,h.v_)($),i.handleLayersChanged_),r?Array.isArray(r)?r=new q.Z(r.slice(),{unique:!0}):(0,x.h)("function"==typeof r.getArray,43):r=new q.Z(void 0,{unique:!0}),i.setLayers(r),i}return J(e,t),e.prototype.handleLayerChange_=function(){this.changed()},e.prototype.handleLayersChanged_=function(){this.layersListenerKeys_.forEach(R.bN),this.layersListenerKeys_.length=0;var t=this.getLayers();for(var e in this.layersListenerKeys_.push((0,R.oL)(t,H.Z.ADD,this.handleLayersAdd_,this),(0,R.oL)(t,H.Z.REMOVE,this.handleLayersRemove_,this)),this.listenerKeys_)this.listenerKeys_[e].forEach(R.bN);(0,E.ZH)(this.listenerKeys_);for(var n=t.getArray(),o=0,r=n.length;o<r;o++){var s=n[o];this.listenerKeys_[(0,i.sq)(s)]=[(0,R.oL)(s,G.Z.PROPERTYCHANGE,this.handleLayerChange_,this),(0,R.oL)(s,w.Z.CHANGE,this.handleLayerChange_,this)]}this.changed()},e.prototype.handleLayersAdd_=function(t){var e=t.element;this.listenerKeys_[(0,i.sq)(e)]=[(0,R.oL)(e,G.Z.PROPERTYCHANGE,this.handleLayerChange_,this),(0,R.oL)(e,w.Z.CHANGE,this.handleLayerChange_,this)],this.changed()},e.prototype.handleLayersRemove_=function(t){var e=t.element,n=(0,i.sq)(e);this.listenerKeys_[n].forEach(R.bN),delete this.listenerKeys_[n],this.changed()},e.prototype.getLayers=function(){return this.get($)},e.prototype.setLayers=function(t){this.set($,t)},e.prototype.getLayersArray=function(t){var e=void 0!==t?t:[];return this.getLayers().forEach((function(t){t.getLayersArray(e)})),e},e.prototype.getLayerStatesArray=function(t){var e=void 0!==t?t:[],i=e.length;this.getLayers().forEach((function(t){t.getLayerStatesArray(e)}));for(var n=this.getLayerState(),r=i,s=e.length;r<s;r++){var a=e[r];a.opacity*=n.opacity,a.visible=a.visible&&n.visible,a.maxResolution=Math.min(a.maxResolution,n.maxResolution),a.minResolution=Math.max(a.minResolution,n.minResolution),a.minZoom=Math.max(a.minZoom,n.minZoom),a.maxZoom=Math.min(a.maxZoom,n.maxZoom),void 0!==n.extent&&(void 0!==a.extent?a.extent=(0,o.Ed)(a.extent,n.extent):a.extent=n.extent)}return e},e.prototype.getSourceState=function(){return P},e}(O);var tt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const et=function(t){function e(e,i,n){var o=t.call(this,e)||this;return o.map=i,o.frameState=void 0!==n?n:null,o}return tt(e,t),e}(z.ZP);var it=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const nt=function(t){function e(e,i,n,o,r){var s=t.call(this,e,i,r)||this;return s.originalEvent=n,s.pixel_=null,s.coordinate_=null,s.dragging=void 0!==o&&o,s}return it(e,t),Object.defineProperty(e.prototype,"pixel",{get:function(){return this.pixel_||(this.pixel_=this.map.getEventPixel(this.originalEvent)),this.pixel_},set:function(t){this.pixel_=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"coordinate",{get:function(){return this.coordinate_||(this.coordinate_=this.map.getCoordinateFromPixel(this.pixel)),this.coordinate_},set:function(t){this.coordinate_=t},enumerable:!1,configurable:!0}),e.prototype.preventDefault=function(){t.prototype.preventDefault.call(this),this.originalEvent.preventDefault()},e.prototype.stopPropagation=function(){t.prototype.stopPropagation.call(this),this.originalEvent.stopPropagation()},e}(et);var ot=s(6575),rt=s(6);const st="pointerdown";var at=s(1358),lt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ht=function(t){function e(e,i){var n=t.call(this,e)||this;n.map_=e,n.clickTimeoutId_,n.emulateClicks_=!1,n.dragging_=!1,n.dragListenerKeys_=[],n.moveTolerance_=i?i*at.MP:at.MP,n.down_=null;var o=n.map_.getViewport();return n.activePointers_=0,n.trackedTouches_={},n.element_=o,n.pointerdownListenerKey_=(0,R.oL)(o,st,n.handlePointerDown_,n),n.originalPointerMoveEvent_,n.relayedListenerKey_=(0,R.oL)(o,"pointermove",n.relayEvent_,n),n.boundHandleTouchMove_=n.handleTouchMove_.bind(n),n.element_.addEventListener(w.Z.TOUCHMOVE,n.boundHandleTouchMove_,!!at.bM&&{passive:!1}),n}return lt(e,t),e.prototype.emulateClick_=function(t){var e=new nt(rt.Z.CLICK,this.map_,t);this.dispatchEvent(e),void 0!==this.clickTimeoutId_?(clearTimeout(this.clickTimeoutId_),this.clickTimeoutId_=void 0,e=new nt(rt.Z.DBLCLICK,this.map_,t),this.dispatchEvent(e)):this.clickTimeoutId_=setTimeout(function(){this.clickTimeoutId_=void 0;var e=new nt(rt.Z.SINGLECLICK,this.map_,t);this.dispatchEvent(e)}.bind(this),250)},e.prototype.updateActivePointers_=function(t){var e=t;e.type==rt.Z.POINTERUP||e.type==rt.Z.POINTERCANCEL?delete this.trackedTouches_[e.pointerId]:e.type==rt.Z.POINTERDOWN&&(this.trackedTouches_[e.pointerId]=!0),this.activePointers_=Object.keys(this.trackedTouches_).length},e.prototype.handlePointerUp_=function(t){this.updateActivePointers_(t);var e=new nt(rt.Z.POINTERUP,this.map_,t);this.dispatchEvent(e),this.emulateClicks_&&!e.propagationStopped&&!this.dragging_&&this.isMouseActionButton_(t)&&this.emulateClick_(this.down_),0===this.activePointers_&&(this.dragListenerKeys_.forEach(R.bN),this.dragListenerKeys_.length=0,this.dragging_=!1,this.down_=null)},e.prototype.isMouseActionButton_=function(t){return 0===t.button},e.prototype.handlePointerDown_=function(t){this.emulateClicks_=0===this.activePointers_,this.updateActivePointers_(t);var e=new nt(rt.Z.POINTERDOWN,this.map_,t);if(this.dispatchEvent(e),this.down_=t,0===this.dragListenerKeys_.length){var i=this.map_.getOwnerDocument();this.dragListenerKeys_.push((0,R.oL)(i,rt.Z.POINTERMOVE,this.handlePointerMove_,this),(0,R.oL)(i,rt.Z.POINTERUP,this.handlePointerUp_,this),(0,R.oL)(this.element_,rt.Z.POINTERCANCEL,this.handlePointerUp_,this)),this.element_.getRootNode&&this.element_.getRootNode()!==i&&this.dragListenerKeys_.push((0,R.oL)(this.element_.getRootNode(),rt.Z.POINTERUP,this.handlePointerUp_,this))}},e.prototype.handlePointerMove_=function(t){if(this.isMoving_(t)){this.dragging_=!0;var e=new nt(rt.Z.POINTERDRAG,this.map_,t,this.dragging_);this.dispatchEvent(e)}},e.prototype.relayEvent_=function(t){this.originalPointerMoveEvent_=t;var e=!(!this.down_||!this.isMoving_(t));this.dispatchEvent(new nt(t.type,this.map_,t,e))},e.prototype.handleTouchMove_=function(t){this.originalPointerMoveEvent_&&!this.originalPointerMoveEvent_.defaultPrevented||t.preventDefault()},e.prototype.isMoving_=function(t){return this.dragging_||Math.abs(t.clientX-this.down_.clientX)>this.moveTolerance_||Math.abs(t.clientY-this.down_.clientY)>this.moveTolerance_},e.prototype.disposeInternal=function(){this.relayedListenerKey_&&((0,R.bN)(this.relayedListenerKey_),this.relayedListenerKey_=null),this.element_.removeEventListener(w.Z.TOUCHMOVE,this.boundHandleTouchMove_),this.pointerdownListenerKey_&&((0,R.bN)(this.pointerdownListenerKey_),this.pointerdownListenerKey_=null),this.dragListenerKeys_.forEach(R.bN),this.dragListenerKeys_.length=0,this.element_=null,t.prototype.disposeInternal.call(this)},e}(ot.Z);var ut=s(188);const ct="layergroup",pt="size",ft="target",dt="view";var _t=1/0;const gt=function(){function t(t,e){this.priorityFunction_=t,this.keyFunction_=e,this.elements_=[],this.priorities_=[],this.queuedElements_={}}return t.prototype.clear=function(){this.elements_.length=0,this.priorities_.length=0,(0,E.ZH)(this.queuedElements_)},t.prototype.dequeue=function(){var t=this.elements_,e=this.priorities_,i=t[0];1==t.length?(t.length=0,e.length=0):(t[0]=t.pop(),e[0]=e.pop(),this.siftUp_(0));var n=this.keyFunction_(i);return delete this.queuedElements_[n],i},t.prototype.enqueue=function(t){(0,x.h)(!(this.keyFunction_(t)in this.queuedElements_),31);var e=this.priorityFunction_(t);return e!=_t&&(this.elements_.push(t),this.priorities_.push(e),this.queuedElements_[this.keyFunction_(t)]=!0,this.siftDown_(0,this.elements_.length-1),!0)},t.prototype.getCount=function(){return this.elements_.length},t.prototype.getLeftChildIndex_=function(t){return 2*t+1},t.prototype.getRightChildIndex_=function(t){return 2*t+2},t.prototype.getParentIndex_=function(t){return t-1>>1},t.prototype.heapify_=function(){var t;for(t=(this.elements_.length>>1)-1;t>=0;t--)this.siftUp_(t)},t.prototype.isEmpty=function(){return 0===this.elements_.length},t.prototype.isKeyQueued=function(t){return t in this.queuedElements_},t.prototype.isQueued=function(t){return this.isKeyQueued(this.keyFunction_(t))},t.prototype.siftUp_=function(t){for(var e=this.elements_,i=this.priorities_,n=e.length,o=e[t],r=i[t],s=t;t<n>>1;){var a=this.getLeftChildIndex_(t),l=this.getRightChildIndex_(t),h=l<n&&i[l]<i[a]?l:a;e[t]=e[h],i[t]=i[h],t=h}e[t]=o,i[t]=r,this.siftDown_(s,t)},t.prototype.siftDown_=function(t,e){for(var i=this.elements_,n=this.priorities_,o=i[e],r=n[e];e>t;){var s=this.getParentIndex_(e);if(!(n[s]>r))break;i[e]=i[s],n[e]=n[s],e=s}i[e]=o,n[e]=r},t.prototype.reprioritize=function(){var t,e,i,n=this.priorityFunction_,o=this.elements_,r=this.priorities_,s=0,a=o.length;for(e=0;e<a;++e)(i=n(t=o[e]))==_t?delete this.queuedElements_[this.keyFunction_(t)]:(r[s]=i,o[s++]=t);o.length=s,r.length=s,this.heapify_()},t}();var yt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const vt=function(t){function e(e,i){var n=t.call(this,(function(t){return e.apply(null,t)}),(function(t){return t[0].getKey()}))||this;return n.boundHandleTileChange_=n.handleTileChange.bind(n),n.tileChangeCallback_=i,n.tilesLoading_=0,n.tilesLoadingKeys_={},n}return yt(e,t),e.prototype.enqueue=function(e){var i=t.prototype.enqueue.call(this,e);return i&&e[0].addEventListener(w.Z.CHANGE,this.boundHandleTileChange_),i},e.prototype.getTilesLoading=function(){return this.tilesLoading_},e.prototype.handleTileChange=function(t){var e=t.target,i=e.getState();if(e.hifi&&2===i||3===i||4===i){e.removeEventListener(w.Z.CHANGE,this.boundHandleTileChange_);var n=e.getKey();n in this.tilesLoadingKeys_&&(delete this.tilesLoadingKeys_[n],--this.tilesLoading_),this.tileChangeCallback_()}},e.prototype.loadMoreTiles=function(t,e){for(var i,n,o=0;this.tilesLoading_<t&&o<e&&this.getCount()>0;)n=(i=this.dequeue()[0]).getKey(),0!==i.getState()||n in this.tilesLoadingKeys_||(this.tilesLoadingKeys_[n]=!0,++this.tilesLoading_,++o,i.load())},e}(gt);var mt=s(8795),xt=s(868);const Et="center",Ct="resolution",St="rotation";var Ot=s(1964);function wt(t,e,i){return function(n,o,r,s,a){if(n){var l=e?0:r[0]*o,h=e?0:r[1]*o,u=a?a[0]:0,c=a?a[1]:0,p=t[0]+l/2+u,f=t[2]-l/2+u,d=t[1]+h/2+c,_=t[3]-h/2+c;p>f&&(f=p=(f+p)/2),d>_&&(_=d=(_+d)/2);var g=(0,C.uZ)(n[0],p,f),y=(0,C.uZ)(n[1],d,_),v=30*o;return s&&i&&(g+=-v*Math.log(1+Math.max(0,p-n[0])/v)+v*Math.log(1+Math.max(0,n[0]-f)/v),y+=-v*Math.log(1+Math.max(0,d-n[1])/v)+v*Math.log(1+Math.max(0,n[1]-_)/v)),[g,y]}}}function Tt(t){return t}var bt=s(9682);function It(t,e,i,n){var r=(0,o.dz)(e)/i[0],s=(0,o.Cr)(e)/i[1];return n?Math.min(t,Math.max(r,s)):Math.min(t,Math.min(r,s))}function Pt(t,e,i){var n=Math.min(t,e);return n*=Math.log(1+50*Math.max(0,t/e-1))/50+1,i&&(n=Math.max(n,i),n/=Math.log(1+50*Math.max(0,i/t-1))/50+1),(0,C.uZ)(n,i/2,2*e)}function Rt(t,e,i,n,o){return function(r,s,a,l){if(void 0!==r){var h=n?It(t,n,a,o):t;return(void 0===i||i)&&l?Pt(r,h,e):(0,C.uZ)(r,e,h)}}}function Lt(t){return void 0!==t?0:void 0}function Mt(t){return void 0!==t?t:void 0}var At=s(6320),Ft=s(3696),Zt=s(4759);function Dt(t,e,i,n,o,r,s){var a,l=t[e],h=t[e+1],u=t[i]-l,c=t[i+1]-h;if(0===u&&0===c)a=e;else{var p=((o-l)*u+(r-h)*c)/(u*u+c*c);if(p>1)a=i;else{if(p>0){for(var f=0;f<n;++f)s[f]=(0,C.t7)(t[e+f],t[i+f],p);return void(s.length=n)}a=e}}for(f=0;f<n;++f)s[f]=t[a+f];s.length=n}function kt(t,e,i,n,o){var r=t[e],s=t[e+1];for(e+=n;e<i;e+=n){var a=t[e],l=t[e+1],h=(0,C.bI)(r,s,a,l);h>o&&(o=h),r=a,s=l}return o}function jt(t,e,i,n,o,r,s,a,l,h,u){if(e==i)return h;var c,p;if(0===o){if((p=(0,C.bI)(s,a,t[e],t[e+1]))<h){for(c=0;c<n;++c)l[c]=t[e+c];return l.length=n,p}return h}for(var f=u||[NaN,NaN],d=e+n;d<i;)if(Dt(t,d-n,d,n,s,a,f),(p=(0,C.bI)(s,a,f[0],f[1]))<h){for(h=p,c=0;c<n;++c)l[c]=f[c];l.length=n,d+=n}else d+=n*Math.max((Math.sqrt(p)-Math.sqrt(h))/o|0,1);if(r&&(Dt(t,i-n,e,n,s,a,f),(p=(0,C.bI)(s,a,f[0],f[1]))<h)){for(h=p,c=0;c<n;++c)l[c]=f[c];l.length=n}return h}var Nt=s(8667);function Gt(t,e){return e*Math.round(t/e)}function zt(t,e,i,n,o,r,s){if(e==i)return s;var a,l,h=Gt(t[e],o),u=Gt(t[e+1],o);e+=n,r[s++]=h,r[s++]=u;do{if(a=Gt(t[e],o),l=Gt(t[e+1],o),(e+=n)==i)return r[s++]=a,r[s++]=l,s}while(a==h&&l==u);for(;e<i;){var c=Gt(t[e],o),p=Gt(t[e+1],o);if(e+=n,c!=a||p!=l){var f=a-h,d=l-u,_=c-h,g=p-u;f*g==d*_&&(f<0&&_<f||f==_||f>0&&_>f)&&(d<0&&g<d||d==g||d>0&&g>d)?(a=c,l=p):(r[s++]=a,r[s++]=l,h=a,u=l,a=c,l=p)}}return r[s++]=a,r[s++]=l,s}function Wt(t,e,i,n,o){for(var r=void 0!==o?o:[],s=0,a=e;a<i;a+=n)r[s++]=t.slice(a,a+n);return r.length=s,r}function Yt(t,e,i,n,o){for(var r=void 0!==o?o:[],s=0,a=0,l=i.length;a<l;++a){var h=i[a];r[s++]=Wt(t,e,h,n,r[s]),e=h}return r.length=s,r}function Xt(t,e,i,n,o){for(var r=void 0!==o?o:[],s=0,a=0,l=i.length;a<l;++a){var h=i[a];r[s++]=Yt(t,e,h,n,r[s]),e=h[h.length-1]}return r.length=s,r}function Kt(t,e,i,n){for(var o=0,r=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],l=t[e+1];o+=s*a-r*l,r=a,s=l}return o/2}var Bt=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Vt=function(t){function e(e,i){var n=t.call(this)||this;return n.maxDelta_=-1,n.maxDeltaRevision_=-1,void 0===i||Array.isArray(e[0])?n.setCoordinates(e,i):n.setFlatCoordinates(i,e),n}return Bt(e,t),e.prototype.clone=function(){return new e(this.flatCoordinates.slice(),this.layout)},e.prototype.closestPointXY=function(t,e,i,n){return n<(0,o.qf)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(kt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),jt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.getArea=function(){return Kt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getCoordinates=function(){return Wt(this.flatCoordinates,0,this.flatCoordinates.length,this.stride)},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[];return i.length=function(t,e,i,n,o,r,s){var a=(i-e)/n;if(a<3){for(;e<i;e+=n)r[s++]=t[e],r[s++]=t[e+1];return s}var l=new Array(a);l[0]=1,l[a-1]=1;for(var h=[e,i-n],u=0;h.length>0;){for(var c=h.pop(),p=h.pop(),f=0,d=t[p],_=t[p+1],g=t[c],y=t[c+1],v=p+n;v<c;v+=n){var m=t[v],x=t[v+1],E=(0,C.rU)(m,x,d,_,g,y);E>f&&(u=v,f=E)}f>o&&(l[(u-e)/n]=1,p+n<u&&h.push(p,u),u+n<c&&h.push(u,c))}for(v=0;v<a;++v)l[v]&&(r[s++]=t[e+v*n],r[s++]=t[e+v*n+1]);return s}(this.flatCoordinates,0,this.flatCoordinates.length,this.stride,t,i,0),new e(i,Ft.Z.XY)},e.prototype.getType=function(){return mt.Z.LINEAR_RING},e.prototype.intersectsExtent=function(t){return!1},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,1),this.flatCoordinates||(this.flatCoordinates=[]),this.flatCoordinates.length=(0,Nt.Sg)(this.flatCoordinates,0,t,this.stride),this.changed()},e}(Zt.ZP);var Ut=s(2043);function qt(t,e,i,n,r){return!(0,o.H6)(r,(function(o){return!Ht(t,e,i,n,o[0],o[1])}))}function Ht(t,e,i,n,o,r){for(var s=0,a=t[i-n],l=t[i-n+1];e<i;e+=n){var h=t[e],u=t[e+1];l<=r?u>r&&(h-a)*(r-l)-(o-a)*(u-l)>0&&s++:u<=r&&(h-a)*(r-l)-(o-a)*(u-l)<0&&s--,a=h,l=u}return 0!==s}function Jt(t,e,i,n,o,r){if(0===i.length)return!1;if(!Ht(t,e,i[0],n,o,r))return!1;for(var s=1,a=i.length;s<a;++s)if(Ht(t,i[s-1],i[s],n,o,r))return!1;return!0}function $t(t,e,i,n,r){var s=(0,o.qP)((0,o.lJ)(),t,e,i,n);return!!(0,o.kK)(r,s)&&(!!(0,o.r4)(r,s)||s[0]>=r[0]&&s[2]<=r[2]||s[1]>=r[1]&&s[3]<=r[3]||function(t,e,i,n,o){for(var r,s=[t[e],t[e+1]],a=[];e+n<i;e+=n){if(a[0]=t[e+n],a[1]=t[e+n+1],r=o(s,a))return r;s[0]=a[0],s[1]=a[1]}return!1}(t,e,i,n,(function(t,e){return(0,o.I7)(r,t,e)})))}function Qt(t,e,i,n){for(;e<i-n;){for(var o=0;o<n;++o){var r=t[e+o];t[e+o]=t[i-n+o],t[i-n+o]=r}e+=n,i-=n}}function te(t,e,i,n){for(var o=0,r=t[i-n],s=t[i-n+1];e<i;e+=n){var a=t[e],l=t[e+1];o+=(a-r)*(l+s),r=a,s=l}return 0===o?void 0:o>0}function ee(t,e,i,n,o){for(var r=void 0!==o&&o,s=0,a=i.length;s<a;++s){var l=i[s],h=te(t,e,l,n);(0===s?r&&h||!r&&!h:r&&!h||!r&&h)&&Qt(t,e,l,n),e=l}return e}var ie=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),ne=function(t){function e(e,i,n){var o=t.call(this)||this;return o.ends_=[],o.flatInteriorPointRevision_=-1,o.flatInteriorPoint_=null,o.maxDelta_=-1,o.maxDeltaRevision_=-1,o.orientedRevision_=-1,o.orientedFlatCoordinates_=null,void 0!==i&&n?(o.setFlatCoordinates(i,e),o.ends_=n):o.setCoordinates(e,i),o}return ie(e,t),e.prototype.appendLinearRing=function(t){this.flatCoordinates?(0,bt.l7)(this.flatCoordinates,t.getFlatCoordinates()):this.flatCoordinates=t.getFlatCoordinates().slice(),this.ends_.push(this.flatCoordinates.length),this.changed()},e.prototype.clone=function(){var t=new e(this.flatCoordinates.slice(),this.layout,this.ends_.slice());return t.applyProperties(this),t},e.prototype.closestPointXY=function(t,e,i,n){return n<(0,o.qf)(this.getExtent(),t,e)?n:(this.maxDeltaRevision_!=this.getRevision()&&(this.maxDelta_=Math.sqrt(function(t,e,i,n,o){for(var r=0,s=i.length;r<s;++r){var a=i[r];o=kt(t,e,a,n,o),e=a}return o}(this.flatCoordinates,0,this.ends_,this.stride,0)),this.maxDeltaRevision_=this.getRevision()),function(t,e,i,n,o,r,s,a,l,h,u){for(var c=u||[NaN,NaN],p=0,f=i.length;p<f;++p){var d=i[p];h=jt(t,e,d,n,o,r,s,a,l,h,c),e=d}return h}(this.flatCoordinates,0,this.ends_,this.stride,this.maxDelta_,!0,t,e,i,n))},e.prototype.containsXY=function(t,e){return Jt(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,e)},e.prototype.getArea=function(){return function(t,e,i,n){for(var o=0,r=0,s=i.length;r<s;++r){var a=i[r];o+=Kt(t,e,a,n),e=a}return o}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride)},e.prototype.getCoordinates=function(t){var e;return void 0!==t?ee(e=this.getOrientedFlatCoordinates().slice(),0,this.ends_,this.stride,t):e=this.flatCoordinates,Yt(e,0,this.ends_,this.stride)},e.prototype.getEnds=function(){return this.ends_},e.prototype.getFlatInteriorPoint=function(){if(this.flatInteriorPointRevision_!=this.getRevision()){var t=(0,o.qg)(this.getExtent());this.flatInteriorPoint_=function(t,e,i,n,o,r,s){for(var a,l,h,u,c,p,f,d=o[r+1],_=[],g=0,y=i.length;g<y;++g){var v=i[g];for(u=t[v-n],p=t[v-n+1],a=e;a<v;a+=n)c=t[a],f=t[a+1],(d<=p&&f<=d||p<=d&&d<=f)&&(h=(d-p)/(f-p)*(c-u)+u,_.push(h)),u=c,p=f}var m=NaN,x=-1/0;for(_.sort(bt.kK),u=_[0],a=1,l=_.length;a<l;++a){c=_[a];var E=Math.abs(c-u);E>x&&Jt(t,e,i,n,h=(u+c)/2,d)&&(m=h,x=E),u=c}return isNaN(m)&&(m=o[r]),s?(s.push(m,d,x),s):[m,d,x]}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t,0),this.flatInteriorPointRevision_=this.getRevision()}return this.flatInteriorPoint_},e.prototype.getInteriorPoint=function(){return new Ut.Z(this.getFlatInteriorPoint(),Ft.Z.XYM)},e.prototype.getLinearRingCount=function(){return this.ends_.length},e.prototype.getLinearRing=function(t){return t<0||this.ends_.length<=t?null:new Vt(this.flatCoordinates.slice(0===t?0:this.ends_[t-1],this.ends_[t]),this.layout)},e.prototype.getLinearRings=function(){for(var t=this.layout,e=this.flatCoordinates,i=this.ends_,n=[],o=0,r=0,s=i.length;r<s;++r){var a=i[r],l=new Vt(e.slice(o,a),t);n.push(l),o=a}return n},e.prototype.getOrientedFlatCoordinates=function(){if(this.orientedRevision_!=this.getRevision()){var t=this.flatCoordinates;!function(t,e,i,n,o){for(var r=void 0!==o&&o,s=0,a=i.length;s<a;++s){var l=i[s],h=te(t,e,l,n);if(0===s){if(r&&h||!r&&!h)return!1}else if(r&&!h||!r&&h)return!1;e=l}return!0}(t,0,this.ends_,this.stride)?(this.orientedFlatCoordinates_=t.slice(),this.orientedFlatCoordinates_.length=ee(this.orientedFlatCoordinates_,0,this.ends_,this.stride)):this.orientedFlatCoordinates_=t,this.orientedRevision_=this.getRevision()}return this.orientedFlatCoordinates_},e.prototype.getSimplifiedGeometryInternal=function(t){var i=[],n=[];return i.length=function(t,e,i,n,o,r,s,a){for(var l=0,h=i.length;l<h;++l){var u=i[l];s=zt(t,e,u,n,o,r,s),a.push(s),e=u}return s}(this.flatCoordinates,0,this.ends_,this.stride,Math.sqrt(t),i,0,n),new e(i,Ft.Z.XY,n)},e.prototype.getType=function(){return mt.Z.POLYGON},e.prototype.intersectsExtent=function(t){return function(t,e,i,n,o){if(!function(t,e,i,n,o){return!!($t(t,e,i,n,o)||Ht(t,e,i,n,o[0],o[1])||Ht(t,e,i,n,o[0],o[3])||Ht(t,e,i,n,o[2],o[1])||Ht(t,e,i,n,o[2],o[3]))}(t,e,i[0],n,o))return!1;if(1===i.length)return!0;for(var r=1,s=i.length;r<s;++r)if(qt(t,i[r-1],i[r],n,o)&&!$t(t,i[r-1],i[r],n,o))return!1;return!0}(this.getOrientedFlatCoordinates(),0,this.ends_,this.stride,t)},e.prototype.setCoordinates=function(t,e){this.setLayout(e,t,2),this.flatCoordinates||(this.flatCoordinates=[]);var i=(0,Nt._5)(this.flatCoordinates,0,t,this.stride,this.ends_);this.flatCoordinates.length=0===i.length?0:i[i.length-1],this.changed()},e}(Zt.ZP);const oe=ne;function re(t){var e=t[0],i=t[1],n=t[2],o=t[3],r=[e,i,e,o,n,o,n,i,e,i];return new ne(r,Ft.Z.XY,[r.length])}var se=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function ae(t,e){setTimeout((function(){t(e)}),0)}function le(t){return!(t.sourceCenter&&t.targetCenter&&!F(t.sourceCenter,t.targetCenter))&&t.sourceResolution===t.targetResolution&&t.sourceRotation===t.targetRotation}function he(t,e,i,n,o){var r=Math.cos(-o),s=Math.sin(-o),a=t[0]*r-t[1]*s,l=t[1]*r+t[0]*s;return[(a+=(e[0]/2-i[0])*n)*r-(l+=(i[1]-e[1]/2)*n)*(s=-s),l*r+a*s]}const ue=function(t){function i(e){var i=t.call(this)||this,n=(0,E.f0)({},e);return i.hints_=[0,0],i.animations_=[],i.updateAnimationKey_,i.projection_=(0,Ot.UQ)(n.projection,"EPSG:3857"),i.viewportSize_=[100,100],i.targetCenter_=null,i.targetResolution_,i.targetRotation_,i.cancelAnchor_=void 0,n.center&&(n.center=(0,Ot.Vs)(n.center,i.projection_)),n.extent&&(n.extent=(0,Ot.dY)(n.extent,i.projection_)),i.applyOptions_(n),i}return se(i,t),i.prototype.applyOptions_=function(t){var e=function(t){var e,i,n,r=void 0!==t.minZoom?t.minZoom:0,s=void 0!==t.maxZoom?t.maxZoom:28,a=void 0!==t.zoomFactor?t.zoomFactor:2,l=void 0!==t.multiWorld&&t.multiWorld,h=void 0===t.smoothResolutionConstraint||t.smoothResolutionConstraint,u=void 0!==t.showFullExtent&&t.showFullExtent,c=(0,Ot.UQ)(t.projection,"EPSG:3857"),p=c.getExtent(),f=t.constrainOnlyCenter,d=t.extent;if(l||d||!c.isGlobal()||(f=!1,d=p),void 0!==t.resolutions){var _=t.resolutions;i=_[r],n=void 0!==_[s]?_[s]:_[_.length-1],e=t.constrainResolution?function(t,e,i,n){return function(o,r,s,a){if(void 0!==o){var l=t[0],h=t[t.length-1],u=i?It(l,i,s,n):l;if(a)return void 0===e||e?Pt(o,u,h):(0,C.uZ)(o,h,u);var c=Math.min(u,o),p=Math.floor((0,bt.h7)(t,c,r));return t[p]>u&&p<t.length-1?t[p+1]:t[p]}}}(_,h,!f&&d,u):Rt(i,n,h,!f&&d,u)}else{var g=(p?Math.max((0,o.dz)(p),(0,o.Cr)(p)):360*Ot.Wm[xt.Z.DEGREES]/c.getMetersPerUnit())/256/Math.pow(2,0),y=g/Math.pow(2,28);void 0!==(i=t.maxResolution)?r=0:i=g/Math.pow(a,r),void 0===(n=t.minResolution)&&(n=void 0!==t.maxZoom?void 0!==t.maxResolution?i/Math.pow(a,s):g/Math.pow(a,s):y),s=r+Math.floor(Math.log(i/n)/Math.log(a)),n=i/Math.pow(a,s-r),e=t.constrainResolution?function(t,e,i,n,o,r){return function(s,a,l,h){if(void 0!==s){var u=o?It(e,o,l,r):e,c=void 0!==i?i:0;if(h)return void 0===n||n?Pt(s,u,c):(0,C.uZ)(s,c,u);var p=Math.ceil(Math.log(e/u)/Math.log(t)-1e-9),f=-a*(.5-1e-9)+.5,d=Math.min(u,s),_=Math.floor(Math.log(e/d)/Math.log(t)+f),g=Math.max(p,_),y=e/Math.pow(t,g);return(0,C.uZ)(y,c,u)}}}(a,i,n,h,!f&&d,u):Rt(i,n,h,!f&&d,u)}return{constraint:e,maxResolution:i,minResolution:n,minZoom:r,zoomFactor:a}}(t);this.maxResolution_=e.maxResolution,this.minResolution_=e.minResolution,this.zoomFactor_=e.zoomFactor,this.resolutions_=t.resolutions,this.padding=t.padding,this.minZoom_=e.minZoom;var i=function(t){if(void 0!==t.extent){var e=void 0===t.smoothExtentConstraint||t.smoothExtentConstraint;return wt(t.extent,t.constrainOnlyCenter,e)}var i=(0,Ot.UQ)(t.projection,"EPSG:3857");if(!0!==t.multiWorld&&i.isGlobal()){var n=i.getExtent().slice();return n[0]=-1/0,n[2]=1/0,wt(n,!1,!1)}return Tt}(t),n=e.constraint,r=function(t){if(void 0===t.enableRotation||t.enableRotation){var e=t.constrainRotation;return void 0===e||!0===e?(o=(0,C.Yr)(5),function(t,e){return e?t:void 0!==t?Math.abs(t)<=o?0:t:void 0}):!1===e?Mt:"number"==typeof e?(i=e,n=2*Math.PI/i,function(t,e){return e?t:void 0!==t?t=Math.floor(t/n+.5)*n:void 0}):Mt}return Lt;var i,n,o}(t);this.constraints_={center:i,resolution:n,rotation:r},this.setRotation(void 0!==t.rotation?t.rotation:0),this.setCenterInternal(void 0!==t.center?t.center:null),void 0!==t.resolution?this.setResolution(t.resolution):void 0!==t.zoom&&this.setZoom(t.zoom),this.setProperties({}),this.options_=t},i.prototype.getUpdatedOptions_=function(t){var e=(0,E.f0)({},this.options_);return void 0!==e.resolution?e.resolution=this.getResolution():e.zoom=this.getZoom(),e.center=this.getCenterInternal(),e.rotation=this.getRotation(),(0,E.f0)({},e,t)},i.prototype.animate=function(t){this.isDef()&&!this.getAnimating()&&this.resolveConstraints(0);for(var e=new Array(arguments.length),i=0;i<e.length;++i){var n=arguments[i];n.center&&((n=(0,E.f0)({},n)).center=(0,Ot.Vs)(n.center,this.getProjection())),n.anchor&&((n=(0,E.f0)({},n)).anchor=(0,Ot.Vs)(n.anchor,this.getProjection())),e[i]=n}this.animateInternal.apply(this,e)},i.prototype.animateInternal=function(t){var e,i=arguments.length;if(i>1&&"function"==typeof arguments[i-1]&&(e=arguments[i-1],--i),!this.isDef()){var n=arguments[i-1];return n.center&&this.setCenterInternal(n.center),void 0!==n.zoom&&this.setZoom(n.zoom),void 0!==n.rotation&&this.setRotation(n.rotation),void(e&&ae(e,!0))}for(var o=Date.now(),r=this.targetCenter_.slice(),s=this.targetResolution_,a=this.targetRotation_,l=[],h=0;h<i;++h){var u=arguments[h],c={start:o,complete:!1,anchor:u.anchor,duration:void 0!==u.duration?u.duration:1e3,easing:u.easing||At.rd,callback:e};if(u.center&&(c.sourceCenter=r,c.targetCenter=u.center.slice(),r=c.targetCenter),void 0!==u.zoom?(c.sourceResolution=s,c.targetResolution=this.getResolutionForZoom(u.zoom),s=c.targetResolution):u.resolution&&(c.sourceResolution=s,c.targetResolution=u.resolution,s=c.targetResolution),void 0!==u.rotation){c.sourceRotation=a;var p=(0,C.$W)(u.rotation-a+Math.PI,2*Math.PI)-Math.PI;c.targetRotation=a+p,a=c.targetRotation}le(c)?c.complete=!0:o+=c.duration,l.push(c)}this.animations_.push(l),this.setHint(0,1),this.updateAnimations_()},i.prototype.getAnimating=function(){return this.hints_[0]>0},i.prototype.getInteracting=function(){return this.hints_[1]>0},i.prototype.cancelAnimations=function(){var t;this.setHint(0,-this.hints_[0]);for(var e=0,i=this.animations_.length;e<i;++e){var n=this.animations_[e];if(n[0].callback&&ae(n[0].callback,!1),!t)for(var o=0,r=n.length;o<r;++o){var s=n[o];if(!s.complete){t=s.anchor;break}}}this.animations_.length=0,this.cancelAnchor_=t},i.prototype.updateAnimations_=function(){if(void 0!==this.updateAnimationKey_&&(cancelAnimationFrame(this.updateAnimationKey_),this.updateAnimationKey_=void 0),this.getAnimating()){for(var t=Date.now(),e=!1,i=this.animations_.length-1;i>=0;--i){for(var n=this.animations_[i],o=!0,r=0,s=n.length;r<s;++r){var a=n[r];if(!a.complete){var l=t-a.start,h=a.duration>0?l/a.duration:1;h>=1?(a.complete=!0,h=1):o=!1;var u=a.easing(h);if(a.sourceCenter){var c=a.sourceCenter[0],p=a.sourceCenter[1],f=c+u*(a.targetCenter[0]-c),d=p+u*(a.targetCenter[1]-p);this.targetCenter_=[f,d]}if(a.sourceResolution&&a.targetResolution){var _=1===u?a.targetResolution:a.sourceResolution+u*(a.targetResolution-a.sourceResolution);if(a.anchor){var g=this.getViewportSize_(this.getRotation()),y=this.constraints_.resolution(_,0,g,!0);this.targetCenter_=this.calculateCenterZoom(y,a.anchor)}this.targetResolution_=_,this.applyTargetState_(!0)}if(void 0!==a.sourceRotation&&void 0!==a.targetRotation){var v=1===u?(0,C.$W)(a.targetRotation+Math.PI,2*Math.PI)-Math.PI:a.sourceRotation+u*(a.targetRotation-a.sourceRotation);if(a.anchor){var m=this.constraints_.rotation(v,!0);this.targetCenter_=this.calculateCenterRotate(m,a.anchor)}this.targetRotation_=v}if(this.applyTargetState_(!0),e=!0,!a.complete)break}}if(o){this.animations_[i]=null,this.setHint(0,-1);var x=n[0].callback;x&&ae(x,!0)}}this.animations_=this.animations_.filter(Boolean),e&&void 0===this.updateAnimationKey_&&(this.updateAnimationKey_=requestAnimationFrame(this.updateAnimations_.bind(this)))}},i.prototype.calculateCenterRotate=function(t,e){var i,n,o,r=this.getCenterInternal();return void 0!==r&&(Z(i=[r[0]-e[0],r[1]-e[1]],t-this.getRotation()),o=e,(n=i)[0]+=+o[0],n[1]+=+o[1]),i},i.prototype.calculateCenterZoom=function(t,e){var i,n=this.getCenterInternal(),o=this.getResolution();return void 0!==n&&void 0!==o&&(i=[e[0]-t*(e[0]-n[0])/o,e[1]-t*(e[1]-n[1])/o]),i},i.prototype.getViewportSize_=function(t){var e=this.viewportSize_;if(t){var i=e[0],n=e[1];return[Math.abs(i*Math.cos(t))+Math.abs(n*Math.sin(t)),Math.abs(i*Math.sin(t))+Math.abs(n*Math.cos(t))]}return e},i.prototype.setViewportSize=function(t){this.viewportSize_=Array.isArray(t)?t.slice():[100,100],this.getAnimating()||this.resolveConstraints(0)},i.prototype.getCenter=function(){var t=this.getCenterInternal();return t?(0,Ot.lO)(t,this.getProjection()):t},i.prototype.getCenterInternal=function(){return this.get(Et)},i.prototype.getConstraints=function(){return this.constraints_},i.prototype.getConstrainResolution=function(){return this.options_.constrainResolution},i.prototype.getHints=function(t){return void 0!==t?(t[0]=this.hints_[0],t[1]=this.hints_[1],t):this.hints_.slice()},i.prototype.calculateExtent=function(t){var e=this.calculateExtentInternal(t);return(0,Ot.Fj)(e,this.getProjection())},i.prototype.calculateExtentInternal=function(t){var e=t||this.getViewportSize_(),i=this.getCenterInternal();(0,x.h)(i,1);var n=this.getResolution();(0,x.h)(void 0!==n,2);var r=this.getRotation();return(0,x.h)(void 0!==r,3),(0,o.p8)(i,n,r,e)},i.prototype.getMaxResolution=function(){return this.maxResolution_},i.prototype.getMinResolution=function(){return this.minResolution_},i.prototype.getMaxZoom=function(){return this.getZoomForResolution(this.minResolution_)},i.prototype.setMaxZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({maxZoom:t}))},i.prototype.getMinZoom=function(){return this.getZoomForResolution(this.maxResolution_)},i.prototype.setMinZoom=function(t){this.applyOptions_(this.getUpdatedOptions_({minZoom:t}))},i.prototype.setConstrainResolution=function(t){this.applyOptions_(this.getUpdatedOptions_({constrainResolution:t}))},i.prototype.getProjection=function(){return this.projection_},i.prototype.getResolution=function(){return this.get(Ct)},i.prototype.getResolutions=function(){return this.resolutions_},i.prototype.getResolutionForExtent=function(t,e){return this.getResolutionForExtentInternal((0,Ot.dY)(t,this.getProjection()),e)},i.prototype.getResolutionForExtentInternal=function(t,e){var i=e||this.getViewportSize_(),n=(0,o.dz)(t)/i[0],r=(0,o.Cr)(t)/i[1];return Math.max(n,r)},i.prototype.getResolutionForValueFunction=function(t){var e=t||2,i=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,o=Math.log(i/n)/Math.log(e);return function(t){return i/Math.pow(e,t*o)}},i.prototype.getRotation=function(){return this.get(St)},i.prototype.getValueForResolutionFunction=function(t){var e=Math.log(t||2),i=this.getConstrainedResolution(this.maxResolution_),n=this.minResolution_,o=Math.log(i/n)/e;return function(t){return Math.log(i/t)/e/o}},i.prototype.getViewportSizeMinusPadding_=function(t){var e=this.getViewportSize_(t),i=this.padding;return i&&(e=[e[0]-i[1]-i[3],e[1]-i[0]-i[2]]),e},i.prototype.getState=function(){var t=this.getProjection(),e=this.getResolution(),i=this.getRotation(),n=this.getCenterInternal(),o=this.padding;if(o){var r=this.getViewportSizeMinusPadding_();n=he(n,this.getViewportSize_(),[r[0]/2+o[3],r[1]/2+o[0]],e,i)}return{center:n.slice(0),projection:void 0!==t?t:null,resolution:e,rotation:i,zoom:this.getZoom()}},i.prototype.getZoom=function(){var t,e=this.getResolution();return void 0!==e&&(t=this.getZoomForResolution(e)),t},i.prototype.getZoomForResolution=function(t){var e,i,n=this.minZoom_||0;if(this.resolutions_){var o=(0,bt.h7)(this.resolutions_,t,1);n=o,e=this.resolutions_[o],i=o==this.resolutions_.length-1?2:e/this.resolutions_[o+1]}else e=this.maxResolution_,i=this.zoomFactor_;return n+Math.log(e/t)/Math.log(i)},i.prototype.getResolutionForZoom=function(t){if(this.resolutions_){if(this.resolutions_.length<=1)return 0;var e=(0,C.uZ)(Math.floor(t),0,this.resolutions_.length-2),i=this.resolutions_[e]/this.resolutions_[e+1];return this.resolutions_[e]/Math.pow(i,(0,C.uZ)(t-e,0,1))}return this.maxResolution_/Math.pow(this.zoomFactor_,t-this.minZoom_)},i.prototype.fit=function(t,e){var i;if((0,x.h)(Array.isArray(t)||"function"==typeof t.getSimplifiedGeometry,24),Array.isArray(t))(0,x.h)(!(0,o.xb)(t),25),i=re(n=(0,Ot.dY)(t,this.getProjection()));else if(t.getType()===mt.Z.CIRCLE){var n;(i=re(n=(0,Ot.dY)(t.getExtent(),this.getProjection()))).rotate(this.getRotation(),(0,o.qg)(n))}else{var r=(0,Ot.Cs)();i=r?t.clone().transform(r,this.getProjection()):t}this.fitInternal(i,e)},i.prototype.fitInternal=function(t,i){var n=i||{},o=n.size;o||(o=this.getViewportSizeMinusPadding_());var r,s=void 0!==n.padding?n.padding:[0,0,0,0],a=void 0!==n.nearest&&n.nearest;r=void 0!==n.minResolution?n.minResolution:void 0!==n.maxZoom?this.getResolutionForZoom(n.maxZoom):0;for(var l=t.getFlatCoordinates(),h=this.getRotation(),u=Math.cos(-h),c=Math.sin(-h),p=1/0,f=1/0,d=-1/0,_=-1/0,g=t.getStride(),y=0,v=l.length;y<v;y+=g){var m=l[y]*u-l[y+1]*c,x=l[y]*c+l[y+1]*u;p=Math.min(p,m),f=Math.min(f,x),d=Math.max(d,m),_=Math.max(_,x)}var E=this.getResolutionForExtentInternal([p,f,d,_],[o[0]-s[1]-s[3],o[1]-s[0]-s[2]]);E=isNaN(E)?r:Math.max(E,r),E=this.getConstrainedResolution(E,a?0:1),c=-c;var C=(p+d)/2,S=(f+_)/2,O=(C+=(s[1]-s[3])/2*E)*u-(S+=(s[0]-s[2])/2*E)*c,w=S*u+C*c,T=this.getConstrainedCenter([O,w],E),b=n.callback?n.callback:e.Zn;void 0!==n.duration?this.animateInternal({resolution:E,center:T,duration:n.duration,easing:n.easing},b):(this.targetResolution_=E,this.targetCenter_=T,this.applyTargetState_(!1,!0),ae(b,!0))},i.prototype.centerOn=function(t,e,i){this.centerOnInternal((0,Ot.Vs)(t,this.getProjection()),e,i)},i.prototype.centerOnInternal=function(t,e,i){this.setCenterInternal(he(t,e,i,this.getResolution(),this.getRotation()))},i.prototype.calculateCenterShift=function(t,e,i,n){var o,r=this.padding;if(r&&t){var s=this.getViewportSizeMinusPadding_(-i),a=he(t,n,[s[0]/2+r[3],s[1]/2+r[0]],e,i);o=[t[0]-a[0],t[1]-a[1]]}return o},i.prototype.isDef=function(){return!!this.getCenterInternal()&&void 0!==this.getResolution()},i.prototype.adjustCenter=function(t){var e=(0,Ot.lO)(this.targetCenter_,this.getProjection());this.setCenter([e[0]+t[0],e[1]+t[1]])},i.prototype.adjustCenterInternal=function(t){var e=this.targetCenter_;this.setCenterInternal([e[0]+t[0],e[1]+t[1]])},i.prototype.adjustResolution=function(t,e){var i=e&&(0,Ot.Vs)(e,this.getProjection());this.adjustResolutionInternal(t,i)},i.prototype.adjustResolutionInternal=function(t,e){var i=this.getAnimating()||this.getInteracting(),n=this.getViewportSize_(this.getRotation()),o=this.constraints_.resolution(this.targetResolution_*t,0,n,i);e&&(this.targetCenter_=this.calculateCenterZoom(o,e)),this.targetResolution_*=t,this.applyTargetState_()},i.prototype.adjustZoom=function(t,e){this.adjustResolution(Math.pow(this.zoomFactor_,-t),e)},i.prototype.adjustRotation=function(t,e){e&&(e=(0,Ot.Vs)(e,this.getProjection())),this.adjustRotationInternal(t,e)},i.prototype.adjustRotationInternal=function(t,e){var i=this.getAnimating()||this.getInteracting(),n=this.constraints_.rotation(this.targetRotation_+t,i);e&&(this.targetCenter_=this.calculateCenterRotate(n,e)),this.targetRotation_+=t,this.applyTargetState_()},i.prototype.setCenter=function(t){this.setCenterInternal((0,Ot.Vs)(t,this.getProjection()))},i.prototype.setCenterInternal=function(t){this.targetCenter_=t,this.applyTargetState_()},i.prototype.setHint=function(t,e){return this.hints_[t]+=e,this.changed(),this.hints_[t]},i.prototype.setResolution=function(t){this.targetResolution_=t,this.applyTargetState_()},i.prototype.setRotation=function(t){this.targetRotation_=t,this.applyTargetState_()},i.prototype.setZoom=function(t){this.setResolution(this.getResolutionForZoom(t))},i.prototype.applyTargetState_=function(t,e){var i=this.getAnimating()||this.getInteracting()||e,n=this.constraints_.rotation(this.targetRotation_,i),o=this.getViewportSize_(n),r=this.constraints_.resolution(this.targetResolution_,0,o,i),s=this.constraints_.center(this.targetCenter_,r,o,i,this.calculateCenterShift(this.targetCenter_,r,n,o));this.get(St)!==n&&this.set(St,n),this.get(Ct)!==r&&this.set(Ct,r),this.get(Et)&&F(this.get(Et),s)||this.set(Et,s),this.getAnimating()&&!t&&this.cancelAnimations(),this.cancelAnchor_=void 0},i.prototype.resolveConstraints=function(t,e,i){var n=void 0!==t?t:200,o=e||0,r=this.constraints_.rotation(this.targetRotation_),s=this.getViewportSize_(r),a=this.constraints_.resolution(this.targetResolution_,o,s),l=this.constraints_.center(this.targetCenter_,a,s,!1,this.calculateCenterShift(this.targetCenter_,a,r,s));if(0===n&&!this.cancelAnchor_)return this.targetResolution_=a,this.targetRotation_=r,this.targetCenter_=l,void this.applyTargetState_();var h=i||(0===n?this.cancelAnchor_:void 0);this.cancelAnchor_=void 0,this.getResolution()===a&&this.getRotation()===r&&this.getCenterInternal()&&F(this.getCenterInternal(),l)||(this.getAnimating()&&this.cancelAnimations(),this.animateInternal({rotation:r,center:l,resolution:a,duration:n,easing:At.Vv,anchor:h}))},i.prototype.beginInteraction=function(){this.resolveConstraints(0),this.setHint(1,1)},i.prototype.endInteraction=function(t,e,i){var n=i&&(0,Ot.Vs)(i,this.getProjection());this.endInteractionInternal(t,e,n)},i.prototype.endInteractionInternal=function(t,e,i){this.setHint(1,-1),this.resolveConstraints(t,e,i)},i.prototype.getConstrainedCenter=function(t,e){var i=this.getViewportSize_(this.getRotation());return this.constraints_.center(t,e||this.getResolution(),i)},i.prototype.getConstrainedZoom=function(t,e){var i=this.getResolutionForZoom(t);return this.getZoomForResolution(this.getConstrainedResolution(i,e))},i.prototype.getConstrainedResolution=function(t,e){var i=e||0,n=this.getViewportSize_(this.getRotation());return this.constraints_.resolution(t,i,n)},i}(h.ZP);var ce=s(596),pe=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const fe=function(t){function i(e){var i=t.call(this)||this,o=function(t){var e=null;void 0!==t.keyboardEventTarget&&(e="string"==typeof t.keyboardEventTarget?document.getElementById(t.keyboardEventTarget):t.keyboardEventTarget);var i,n,o,r={},s=t.layers&&"function"==typeof t.layers.getLayers?t.layers:new Q({layers:t.layers});return r.layergroup=s,r.target=t.target,r.view=void 0!==t.view?t.view:new ue,void 0!==t.controls&&(Array.isArray(t.controls)?i=new q.Z(t.controls.slice()):((0,x.h)("function"==typeof t.controls.getArray,47),i=t.controls)),void 0!==t.interactions&&(Array.isArray(t.interactions)?n=new q.Z(t.interactions.slice()):((0,x.h)("function"==typeof t.interactions.getArray,48),n=t.interactions)),void 0!==t.overlays?Array.isArray(t.overlays)?o=new q.Z(t.overlays.slice()):((0,x.h)("function"==typeof t.overlays.getArray,49),o=t.overlays):o=new q.Z,{controls:i,interactions:n,keyboardEventTarget:e,overlays:o,values:r}}(e);return i.boundHandleBrowserEvent_=i.handleBrowserEvent.bind(i),i.maxTilesLoading_=void 0!==e.maxTilesLoading?e.maxTilesLoading:16,i.pixelRatio_=void 0!==e.pixelRatio?e.pixelRatio:at.MP,i.postRenderTimeoutHandle_,i.animationDelayKey_,i.animationDelay_=function(){this.animationDelayKey_=void 0,this.renderFrame_(Date.now())}.bind(i),i.coordinateToPixelTransform_=(0,n.Ue)(),i.pixelToCoordinateTransform_=(0,n.Ue)(),i.frameIndex_=0,i.frameState_=null,i.previousExtent_=null,i.viewPropertyListenerKey_=null,i.viewChangeListenerKey_=null,i.layerGroupPropertyListenerKeys_=null,i.viewport_=document.createElement("div"),i.viewport_.className="ol-viewport"+("ontouchstart"in window?" ol-touch":""),i.viewport_.style.position="relative",i.viewport_.style.overflow="hidden",i.viewport_.style.width="100%",i.viewport_.style.height="100%",i.overlayContainer_=document.createElement("div"),i.overlayContainer_.style.position="absolute",i.overlayContainer_.style.zIndex="0",i.overlayContainer_.style.width="100%",i.overlayContainer_.style.height="100%",i.overlayContainer_.style.pointerEvents="none",i.overlayContainer_.className="ol-overlaycontainer",i.viewport_.appendChild(i.overlayContainer_),i.overlayContainerStopEvent_=document.createElement("div"),i.overlayContainerStopEvent_.style.position="absolute",i.overlayContainerStopEvent_.style.zIndex="0",i.overlayContainerStopEvent_.style.width="100%",i.overlayContainerStopEvent_.style.height="100%",i.overlayContainerStopEvent_.style.pointerEvents="none",i.overlayContainerStopEvent_.className="ol-overlaycontainer-stopevent",i.viewport_.appendChild(i.overlayContainerStopEvent_),i.mapBrowserEventHandler_=null,i.moveTolerance_=e.moveTolerance,i.keyboardEventTarget_=o.keyboardEventTarget,i.keyHandlerKeys_=null,i.controls=o.controls||new q.Z,i.interactions=o.interactions||new q.Z,i.overlays_=o.overlays,i.overlayIdIndex_={},i.renderer_=null,i.handleResize_,i.postRenderFunctions_=[],i.tileQueue_=new vt(i.getTilePriority.bind(i),i.handleTileChange_.bind(i)),i.addEventListener((0,h.v_)(ct),i.handleLayerGroupChanged_),i.addEventListener((0,h.v_)(dt),i.handleViewChanged_),i.addEventListener((0,h.v_)(pt),i.handleSizeChanged_),i.addEventListener((0,h.v_)(ft),i.handleTargetChanged_),i.setProperties(o.values),i.controls.forEach(function(t){t.setMap(this)}.bind(i)),i.controls.addEventListener(H.Z.ADD,function(t){t.element.setMap(this)}.bind(i)),i.controls.addEventListener(H.Z.REMOVE,function(t){t.element.setMap(null)}.bind(i)),i.interactions.forEach(function(t){t.setMap(this)}.bind(i)),i.interactions.addEventListener(H.Z.ADD,function(t){t.element.setMap(this)}.bind(i)),i.interactions.addEventListener(H.Z.REMOVE,function(t){t.element.setMap(null)}.bind(i)),i.overlays_.forEach(i.addOverlayInternal_.bind(i)),i.overlays_.addEventListener(H.Z.ADD,function(t){this.addOverlayInternal_(t.element)}.bind(i)),i.overlays_.addEventListener(H.Z.REMOVE,function(t){var e=t.element.getId();void 0!==e&&delete this.overlayIdIndex_[e.toString()],t.element.setMap(null)}.bind(i)),i}return pe(i,t),i.prototype.createRenderer=function(){throw new Error("Use a map type that has a createRenderer method")},i.prototype.addControl=function(t){this.getControls().push(t)},i.prototype.addInteraction=function(t){this.getInteractions().push(t)},i.prototype.addLayer=function(t){this.getLayerGroup().getLayers().push(t)},i.prototype.addOverlay=function(t){this.getOverlays().push(t)},i.prototype.addOverlayInternal_=function(t){var e=t.getId();void 0!==e&&(this.overlayIdIndex_[e.toString()]=t),t.setMap(this)},i.prototype.disposeInternal=function(){this.setTarget(null),t.prototype.disposeInternal.call(this)},i.prototype.forEachFeatureAtPixel=function(t,i,n){if(this.frameState_){var o=this.getCoordinateFromPixelInternal(t),r=void 0!==(n=void 0!==n?n:{}).hitTolerance?n.hitTolerance:0,s=void 0!==n.layerFilter?n.layerFilter:e.uX,a=!1!==n.checkWrapped;return this.renderer_.forEachFeatureAtCoordinate(o,this.frameState_,r,a,i,null,s,null)}},i.prototype.getFeaturesAtPixel=function(t,e){var i=[];return this.forEachFeatureAtPixel(t,(function(t){i.push(t)}),e),i},i.prototype.forEachLayerAtPixel=function(t,i,n){if(this.frameState_){var o=n||{},r=void 0!==o.hitTolerance?o.hitTolerance:0,s=o.layerFilter||e.uX;return this.renderer_.forEachLayerAtPixel(t,this.frameState_,r,i,s)}},i.prototype.hasFeatureAtPixel=function(t,i){if(!this.frameState_)return!1;var n=this.getCoordinateFromPixelInternal(t),o=void 0!==(i=void 0!==i?i:{}).layerFilter?i.layerFilter:e.uX,r=void 0!==i.hitTolerance?i.hitTolerance:0,s=!1!==i.checkWrapped;return this.renderer_.hasFeatureAtCoordinate(n,this.frameState_,r,s,o,null)},i.prototype.getEventCoordinate=function(t){return this.getCoordinateFromPixel(this.getEventPixel(t))},i.prototype.getEventCoordinateInternal=function(t){return this.getCoordinateFromPixelInternal(this.getEventPixel(t))},i.prototype.getEventPixel=function(t){var e=this.viewport_.getBoundingClientRect(),i="changedTouches"in t?t.changedTouches[0]:t;return[i.clientX-e.left,i.clientY-e.top]},i.prototype.getTarget=function(){return this.get(ft)},i.prototype.getTargetElement=function(){var t=this.getTarget();return void 0!==t?"string"==typeof t?document.getElementById(t):t:null},i.prototype.getCoordinateFromPixel=function(t){return(0,Ot.lO)(this.getCoordinateFromPixelInternal(t),this.getView().getProjection())},i.prototype.getCoordinateFromPixelInternal=function(t){var e=this.frameState_;return e?(0,n.nn)(e.pixelToCoordinateTransform,t.slice()):null},i.prototype.getControls=function(){return this.controls},i.prototype.getOverlays=function(){return this.overlays_},i.prototype.getOverlayById=function(t){var e=this.overlayIdIndex_[t.toString()];return void 0!==e?e:null},i.prototype.getInteractions=function(){return this.interactions},i.prototype.getLayerGroup=function(){return this.get(ct)},i.prototype.getLayers=function(){return this.getLayerGroup().getLayers()},i.prototype.getLoading=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,i=t.length;e<i;++e){var n=t[e].layer.getSource();if(n&&n.loading)return!0}return!1},i.prototype.getPixelFromCoordinate=function(t){var e=(0,Ot.Vs)(t,this.getView().getProjection());return this.getPixelFromCoordinateInternal(e)},i.prototype.getPixelFromCoordinateInternal=function(t){var e=this.frameState_;return e?(0,n.nn)(e.coordinateToPixelTransform,t.slice(0,2)):null},i.prototype.getRenderer=function(){return this.renderer_},i.prototype.getSize=function(){return this.get(pt)},i.prototype.getView=function(){return this.get(dt)},i.prototype.getViewport=function(){return this.viewport_},i.prototype.getOverlayContainer=function(){return this.overlayContainer_},i.prototype.getOverlayContainerStopEvent=function(){return this.overlayContainerStopEvent_},i.prototype.getOwnerDocument=function(){return this.getTargetElement()?this.getTargetElement().ownerDocument:document},i.prototype.getTilePriority=function(t,e,i,n){return function(t,e,i,n,o){if(!t||!(i in t.wantedTiles))return _t;if(!t.wantedTiles[i][e.getKey()])return _t;var r=t.viewState.center,s=n[0]-r[0],a=n[1]-r[1];return 65536*Math.log(o)+Math.sqrt(s*s+a*a)/o}(this.frameState_,t,e,i,n)},i.prototype.handleBrowserEvent=function(t,e){var i=e||t.type,n=new nt(i,this,t);this.handleMapBrowserEvent(n)},i.prototype.handleMapBrowserEvent=function(t){if(this.frameState_){var e=t.originalEvent,i=e.type;if(i===st||i===w.Z.WHEEL||i===w.Z.KEYDOWN){var n=this.getOwnerDocument(),o=this.viewport_.getRootNode?this.viewport_.getRootNode():n,r="host"in o?o.elementFromPoint(e.clientX,e.clientY):e.target;if(this.overlayContainerStopEvent_.contains(r)||!(o===n?n.documentElement:o).contains(r))return}if(t.frameState=this.frameState_,!1!==this.dispatchEvent(t))for(var s=this.getInteractions().getArray().slice(),a=s.length-1;a>=0;a--){var l=s[a];if(l.getMap()===this&&l.getActive()&&this.getTargetElement()&&(!l.handleEvent(t)||t.propagationStopped))break}}},i.prototype.handlePostRender=function(){var t=this.frameState_,e=this.tileQueue_;if(!e.isEmpty()){var i=this.maxTilesLoading_,n=i;if(t){var o=t.viewHints;if(o[0]||o[1]){var r=!at.Tp&&Date.now()-t.time>8;i=r?0:8,n=r?0:2}}e.getTilesLoading()<i&&(e.reprioritize(),e.loadMoreTiles(i,n))}!t||!this.hasListener(b)||t.animate||this.tileQueue_.getTilesLoading()||this.getLoading()||this.renderer_.dispatchRenderEvent(b,t);for(var s=this.postRenderFunctions_,a=0,l=s.length;a<l;++a)s[a](this,t);s.length=0},i.prototype.handleSizeChanged_=function(){this.getView()&&!this.getView().getAnimating()&&this.getView().resolveConstraints(0),this.render()},i.prototype.handleTargetChanged_=function(){var t;if(this.getTarget()&&(t=this.getTargetElement()),this.mapBrowserEventHandler_){for(var e=0,i=this.keyHandlerKeys_.length;e<i;++e)(0,R.bN)(this.keyHandlerKeys_[e]);this.keyHandlerKeys_=null,this.viewport_.removeEventListener(w.Z.CONTEXTMENU,this.boundHandleBrowserEvent_),this.viewport_.removeEventListener(w.Z.WHEEL,this.boundHandleBrowserEvent_),void 0!==this.handleResize_&&(removeEventListener(w.Z.RESIZE,this.handleResize_,!1),this.handleResize_=void 0),this.mapBrowserEventHandler_.dispose(),this.mapBrowserEventHandler_=null,(0,B.ZF)(this.viewport_)}if(t){for(var n in t.appendChild(this.viewport_),this.renderer_||(this.renderer_=this.createRenderer()),this.mapBrowserEventHandler_=new ht(this,this.moveTolerance_),rt.Z)this.mapBrowserEventHandler_.addEventListener(rt.Z[n],this.handleMapBrowserEvent.bind(this));this.viewport_.addEventListener(w.Z.CONTEXTMENU,this.boundHandleBrowserEvent_,!1),this.viewport_.addEventListener(w.Z.WHEEL,this.boundHandleBrowserEvent_,!!at.bM&&{passive:!1});var o=this.keyboardEventTarget_?this.keyboardEventTarget_:t;this.keyHandlerKeys_=[(0,R.oL)(o,w.Z.KEYDOWN,this.handleBrowserEvent,this),(0,R.oL)(o,w.Z.KEYPRESS,this.handleBrowserEvent,this)],this.handleResize_||(this.handleResize_=this.updateSize.bind(this),window.addEventListener(w.Z.RESIZE,this.handleResize_,!1))}else this.renderer_&&(clearTimeout(this.postRenderTimeoutHandle_),this.postRenderTimeoutHandle_=void 0,this.postRenderFunctions_.length=0,this.renderer_.dispose(),this.renderer_=null),this.animationDelayKey_&&(cancelAnimationFrame(this.animationDelayKey_),this.animationDelayKey_=void 0);this.updateSize()},i.prototype.handleTileChange_=function(){this.render()},i.prototype.handleViewPropertyChanged_=function(){this.render()},i.prototype.handleViewChanged_=function(){this.viewPropertyListenerKey_&&((0,R.bN)(this.viewPropertyListenerKey_),this.viewPropertyListenerKey_=null),this.viewChangeListenerKey_&&((0,R.bN)(this.viewChangeListenerKey_),this.viewChangeListenerKey_=null);var t=this.getView();t&&(this.updateViewportSize_(),this.viewPropertyListenerKey_=(0,R.oL)(t,G.Z.PROPERTYCHANGE,this.handleViewPropertyChanged_,this),this.viewChangeListenerKey_=(0,R.oL)(t,w.Z.CHANGE,this.handleViewPropertyChanged_,this),t.resolveConstraints(0)),this.render()},i.prototype.handleLayerGroupChanged_=function(){this.layerGroupPropertyListenerKeys_&&(this.layerGroupPropertyListenerKeys_.forEach(R.bN),this.layerGroupPropertyListenerKeys_=null);var t=this.getLayerGroup();t&&(this.layerGroupPropertyListenerKeys_=[(0,R.oL)(t,G.Z.PROPERTYCHANGE,this.render,this),(0,R.oL)(t,w.Z.CHANGE,this.render,this)]),this.render()},i.prototype.isRendered=function(){return!!this.frameState_},i.prototype.renderSync=function(){this.animationDelayKey_&&cancelAnimationFrame(this.animationDelayKey_),this.animationDelay_()},i.prototype.redrawText=function(){for(var t=this.getLayerGroup().getLayerStatesArray(),e=0,i=t.length;e<i;++e){var n=t[e].layer;n.hasRenderer()&&n.getRenderer().handleFontsChanged()}},i.prototype.render=function(){this.renderer_&&void 0===this.animationDelayKey_&&(this.animationDelayKey_=requestAnimationFrame(this.animationDelay_))},i.prototype.removeControl=function(t){return this.getControls().remove(t)},i.prototype.removeInteraction=function(t){return this.getInteractions().remove(t)},i.prototype.removeLayer=function(t){return this.getLayerGroup().getLayers().remove(t)},i.prototype.removeOverlay=function(t){return this.getOverlays().remove(t)},i.prototype.renderFrame_=function(t){var e=this,i=this.getSize(),n=this.getView(),r=this.frameState_,s=null;if(void 0!==i&&(0,ce.py)(i)&&n&&n.isDef()){var a=n.getHints(this.frameState_?this.frameState_.viewHints:void 0),l=n.getState();s={animate:!1,coordinateToPixelTransform:this.coordinateToPixelTransform_,declutterTree:null,extent:(0,o.p8)(l.center,l.resolution,l.rotation,i),index:this.frameIndex_++,layerIndex:0,layerStatesArray:this.getLayerGroup().getLayerStatesArray(),pixelRatio:this.pixelRatio_,pixelToCoordinateTransform:this.pixelToCoordinateTransform_,postRenderFunctions:[],size:i,tileQueue:this.tileQueue_,time:t,usedTiles:{},viewState:l,viewHints:a,wantedTiles:{}}}this.frameState_=s,this.renderer_.renderFrame(s),s&&(s.animate&&this.render(),Array.prototype.push.apply(this.postRenderFunctions_,s.postRenderFunctions),r&&(!this.previousExtent_||!(0,o.xb)(this.previousExtent_)&&!(0,o.fS)(s.extent,this.previousExtent_))&&(this.dispatchEvent(new et(ut.Z.MOVESTART,this,r)),this.previousExtent_=(0,o.YN)(this.previousExtent_)),this.previousExtent_&&!s.viewHints[0]&&!s.viewHints[1]&&!(0,o.fS)(s.extent,this.previousExtent_)&&(this.dispatchEvent(new et(ut.Z.MOVEEND,this,s)),(0,o.d9)(s.extent,this.previousExtent_))),this.dispatchEvent(new et(ut.Z.POSTRENDER,this,s)),this.postRenderTimeoutHandle_||(this.postRenderTimeoutHandle_=setTimeout((function(){e.postRenderTimeoutHandle_=void 0,e.handlePostRender()}),0))},i.prototype.setLayerGroup=function(t){this.set(ct,t)},i.prototype.setSize=function(t){this.set(pt,t)},i.prototype.setTarget=function(t){this.set(ft,t)},i.prototype.setView=function(t){this.set(dt,t)},i.prototype.updateSize=function(){var t=this.getTargetElement();if(t){var e=getComputedStyle(t);this.setSize([t.offsetWidth-parseFloat(e.borderLeftWidth)-parseFloat(e.paddingLeft)-parseFloat(e.paddingRight)-parseFloat(e.borderRightWidth),t.offsetHeight-parseFloat(e.borderTopWidth)-parseFloat(e.paddingTop)-parseFloat(e.paddingBottom)-parseFloat(e.borderBottomWidth)])}else this.setSize(void 0);this.updateViewportSize_()},i.prototype.updateViewportSize_=function(){var t=this.getView();if(t){var e=void 0,i=getComputedStyle(this.viewport_);i.width&&i.height&&(e=[parseInt(i.width,10),parseInt(i.height,10)]),t.setViewportSize(e)}},i}(h.ZP);var de=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const _e=function(t){function i(e){var i=t.call(this)||this,n=e.element;return!n||e.target||n.style.pointerEvents||(n.style.pointerEvents="auto"),i.element=n||null,i.target_=null,i.map_=null,i.listenerKeys=[],e.render&&(i.render=e.render),e.target&&i.setTarget(e.target),i}return de(i,t),i.prototype.disposeInternal=function(){(0,B.ZF)(this.element),t.prototype.disposeInternal.call(this)},i.prototype.getMap=function(){return this.map_},i.prototype.setMap=function(t){this.map_&&(0,B.ZF)(this.element);for(var i=0,n=this.listenerKeys.length;i<n;++i)(0,R.bN)(this.listenerKeys[i]);this.listenerKeys.length=0,this.map_=t,this.map_&&((this.target_?this.target_:t.getOverlayContainerStopEvent()).appendChild(this.element),this.render!==e.Zn&&this.listenerKeys.push((0,R.oL)(t,ut.Z.POSTRENDER,this.render,this)),t.render())},i.prototype.render=function(t){},i.prototype.setTarget=function(t){this.target_="string"==typeof t?document.getElementById(t):t},i}(h.ZP);var ge=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ye=function(t){function e(e){var i=this,n=e||{};(i=t.call(this,{element:document.createElement("div"),render:n.render,target:n.target})||this).ulElement_=document.createElement("ul"),i.collapsed_=void 0===n.collapsed||n.collapsed,i.userCollapsed_=i.collapsed_,i.overrideCollapsible_=void 0!==n.collapsible,i.collapsible_=void 0===n.collapsible||n.collapsible,i.collapsible_||(i.collapsed_=!1);var o=void 0!==n.className?n.className:"ol-attribution",r=void 0!==n.tipLabel?n.tipLabel:"Attributions",s=void 0!==n.expandClassName?n.expandClassName:o+"-expand",a=void 0!==n.collapseLabel?n.collapseLabel:"»",l=void 0!==n.collapseClassName?n.collapseClassName:o+"-collpase";"string"==typeof a?(i.collapseLabel_=document.createElement("span"),i.collapseLabel_.textContent=a,i.collapseLabel_.className=l):i.collapseLabel_=a;var h=void 0!==n.label?n.label:"i";"string"==typeof h?(i.label_=document.createElement("span"),i.label_.textContent=h,i.label_.className=s):i.label_=h;var u=i.collapsible_&&!i.collapsed_?i.collapseLabel_:i.label_,c=document.createElement("button");c.setAttribute("type","button"),c.title=r,c.appendChild(u),c.addEventListener(w.Z.CLICK,i.handleClick_.bind(i),!1);var p=o+" "+X.XV+" "+X.hg+(i.collapsed_&&i.collapsible_?" "+X.hN:"")+(i.collapsible_?"":" ol-uncollapsible"),f=i.element;return f.className=p,f.appendChild(i.ulElement_),f.appendChild(c),i.renderedAttributions_=[],i.renderedVisible_=!0,i}return ge(e,t),e.prototype.collectSourceAttributions_=function(t){for(var e={},i=[],n=!0,o=t.layerStatesArray,r=0,s=o.length;r<s;++r){var a=o[r];if(M(a,t.viewState)){var l=a.layer.getSource();if(l){var h=l.getAttributions();if(h){var u=h(t);if(u)if(n=n&&!1!==l.getAttributionsCollapsible(),Array.isArray(u))for(var c=0,p=u.length;c<p;++c)u[c]in e||(i.push(u[c]),e[u[c]]=!0);else u in e||(i.push(u),e[u]=!0)}}}}return this.overrideCollapsible_||this.setCollapsible(n),i},e.prototype.updateElement_=function(t){if(t){var e=this.collectSourceAttributions_(t),i=e.length>0;if(this.renderedVisible_!=i&&(this.element.style.display=i?"":"none",this.renderedVisible_=i),!(0,bt.fS)(e,this.renderedAttributions_)){(0,B.ep)(this.ulElement_);for(var n=0,o=e.length;n<o;++n){var r=document.createElement("li");r.innerHTML=e[n],this.ulElement_.appendChild(r)}this.renderedAttributions_=e}}else this.renderedVisible_&&(this.element.style.display="none",this.renderedVisible_=!1)},e.prototype.handleClick_=function(t){t.preventDefault(),this.handleToggle_(),this.userCollapsed_=this.collapsed_},e.prototype.handleToggle_=function(){this.element.classList.toggle(X.hN),this.collapsed_?(0,B.$H)(this.collapseLabel_,this.label_):(0,B.$H)(this.label_,this.collapseLabel_),this.collapsed_=!this.collapsed_},e.prototype.getCollapsible=function(){return this.collapsible_},e.prototype.setCollapsible=function(t){this.collapsible_!==t&&(this.collapsible_=t,this.element.classList.toggle("ol-uncollapsible"),this.userCollapsed_&&this.handleToggle_())},e.prototype.setCollapsed=function(t){this.userCollapsed_=t,this.collapsible_&&this.collapsed_!==t&&this.handleToggle_()},e.prototype.getCollapsed=function(){return this.collapsed_},e.prototype.render=function(t){this.updateElement_(t.frameState)},e}(_e);var ve=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const me=function(t){function e(e){var i=this,n=e||{};i=t.call(this,{element:document.createElement("div"),render:n.render,target:n.target})||this;var o=void 0!==n.className?n.className:"ol-rotate",r=void 0!==n.label?n.label:"⇧",s=void 0!==n.compassClassName?n.compassClassName:"ol-compass";i.label_=null,"string"==typeof r?(i.label_=document.createElement("span"),i.label_.className=s,i.label_.textContent=r):(i.label_=r,i.label_.classList.add(s));var a=n.tipLabel?n.tipLabel:"Reset rotation",l=document.createElement("button");l.className=o+"-reset",l.setAttribute("type","button"),l.title=a,l.appendChild(i.label_),l.addEventListener(w.Z.CLICK,i.handleClick_.bind(i),!1);var h=o+" "+X.XV+" "+X.hg,u=i.element;return u.className=h,u.appendChild(l),i.callResetNorth_=n.resetNorth?n.resetNorth:void 0,i.duration_=void 0!==n.duration?n.duration:250,i.autoHide_=void 0===n.autoHide||n.autoHide,i.rotation_=void 0,i.autoHide_&&i.element.classList.add(X.oj),i}return ve(e,t),e.prototype.handleClick_=function(t){t.preventDefault(),void 0!==this.callResetNorth_?this.callResetNorth_():this.resetNorth_()},e.prototype.resetNorth_=function(){var t=this.getMap().getView();if(t){var e=t.getRotation();void 0!==e&&(this.duration_>0&&e%(2*Math.PI)!=0?t.animate({rotation:0,duration:this.duration_,easing:At.Vv}):t.setRotation(0))}},e.prototype.render=function(t){var e=t.frameState;if(e){var i=e.viewState.rotation;if(i!=this.rotation_){var n="rotate("+i+"rad)";if(this.autoHide_){var o=this.element.classList.contains(X.oj);o||0!==i?o&&0!==i&&this.element.classList.remove(X.oj):this.element.classList.add(X.oj)}this.label_.style.transform=n}this.rotation_=i}},e}(_e);var xe=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ee=function(t){function e(e){var i=this,n=e||{};i=t.call(this,{element:document.createElement("div"),target:n.target})||this;var o=void 0!==n.className?n.className:"ol-zoom",r=void 0!==n.delta?n.delta:1,s=void 0!==n.zoomInClassName?n.zoomInClassName:o+"-in",a=void 0!==n.zoomOutClassName?n.zoomOutClassName:o+"-out",l=void 0!==n.zoomInLabel?n.zoomInLabel:"+",h=void 0!==n.zoomOutLabel?n.zoomOutLabel:"−",u=void 0!==n.zoomInTipLabel?n.zoomInTipLabel:"Zoom in",c=void 0!==n.zoomOutTipLabel?n.zoomOutTipLabel:"Zoom out",p=document.createElement("button");p.className=s,p.setAttribute("type","button"),p.title=u,p.appendChild("string"==typeof l?document.createTextNode(l):l),p.addEventListener(w.Z.CLICK,i.handleClick_.bind(i,r),!1);var f=document.createElement("button");f.className=a,f.setAttribute("type","button"),f.title=c,f.appendChild("string"==typeof h?document.createTextNode(h):h),f.addEventListener(w.Z.CLICK,i.handleClick_.bind(i,-r),!1);var d=o+" "+X.XV+" "+X.hg,_=i.element;return _.className=d,_.appendChild(p),_.appendChild(f),i.duration_=void 0!==n.duration?n.duration:250,i}return xe(e,t),e.prototype.handleClick_=function(t,e){e.preventDefault(),this.zoomByDelta_(t)},e.prototype.zoomByDelta_=function(t){var e=this.getMap().getView();if(e){var i=e.getZoom();if(void 0!==i){var n=e.getConstrainedZoom(i+t);this.duration_>0?(e.getAnimating()&&e.cancelAnimations(),e.animate({zoom:n,duration:this.duration_,easing:At.Vv})):e.setZoom(n)}}},e}(_e);var Ce=s(7588),Se=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Oe=function(t){function e(e){var i=t.call(this)||this,n=e||{};return i.delta_=n.delta?n.delta:1,i.duration_=void 0!==n.duration?n.duration:250,i}return Se(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==rt.Z.DBLCLICK){var i=t.originalEvent,n=t.map,o=t.coordinate,r=i.shiftKey?-this.delta_:this.delta_,s=n.getView();(0,Ce.FW)(s,r,o,this.duration_),i.preventDefault(),e=!0}return!e},e}(Ce.ZP);var we=s(8024),Te=s(6403),be=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ie=function(t){function i(i){var n=t.call(this,{stopDown:e.Dv})||this,o=i||{};n.kinetic_=o.kinetic,n.lastCentroid=null,n.lastPointersCount_,n.panning_=!1;var r=o.condition?o.condition:(0,Te.$6)(Te.rM,Te.Xp);return n.condition_=o.onFocusOnly?(0,Te.$6)(Te.yZ,r):r,n.noKinetic_=!1,n}return be(i,t),i.prototype.handleDragEvent=function(t){this.panning_||(this.panning_=!0,this.getMap().getView().beginInteraction());var e,i,n=this.targetPointers,o=(0,we.S)(n);if(n.length==this.lastPointersCount_){if(this.kinetic_&&this.kinetic_.update(o[0],o[1]),this.lastCentroid){var r=[this.lastCentroid[0]-o[0],o[1]-this.lastCentroid[1]],s=t.map.getView();e=r,i=s.getResolution(),e[0]*=i,e[1]*=i,Z(r,s.getRotation()),s.adjustCenterInternal(r)}}else this.kinetic_&&this.kinetic_.begin();this.lastCentroid=o,this.lastPointersCount_=n.length,t.originalEvent.preventDefault()},i.prototype.handleUpEvent=function(t){var e=t.map,i=e.getView();if(0===this.targetPointers.length){if(!this.noKinetic_&&this.kinetic_&&this.kinetic_.end()){var n=this.kinetic_.getDistance(),o=this.kinetic_.getAngle(),r=i.getCenterInternal(),s=e.getPixelFromCoordinateInternal(r),a=e.getCoordinateFromPixelInternal([s[0]-n*Math.cos(o),s[1]-n*Math.sin(o)]);i.animateInternal({center:i.getConstrainedCenter(a),duration:500,easing:At.Vv})}return this.panning_&&(this.panning_=!1,i.endInteraction()),!1}return this.kinetic_&&this.kinetic_.begin(),this.lastCentroid=null,!0},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>0&&this.condition_(t)){var e=t.map.getView();return this.lastCentroid=null,e.getAnimating()&&e.cancelAnimations(),this.kinetic_&&this.kinetic_.begin(),this.noKinetic_=this.targetPointers.length>1,!0}return!1},i}(we.Z);var Pe=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Re=function(t){function i(i){var n=this,o=i||{};return(n=t.call(this,{stopDown:e.Dv})||this).condition_=o.condition?o.condition:Te.aj,n.lastAngle_=void 0,n.duration_=void 0!==o.duration?o.duration:250,n}return Pe(i,t),i.prototype.handleDragEvent=function(t){if((0,Te.QL)(t)){var e=t.map,i=e.getView();if(i.getConstraints().rotation!==Lt){var n=e.getSize(),o=t.pixel,r=Math.atan2(n[1]/2-o[1],o[0]-n[0]/2);if(void 0!==this.lastAngle_){var s=r-this.lastAngle_;i.adjustRotationInternal(-s)}this.lastAngle_=r}}},i.prototype.handleUpEvent=function(t){return!(0,Te.QL)(t)||(t.map.getView().endInteraction(this.duration_),!1)},i.prototype.handleDownEvent=function(t){return!(!(0,Te.QL)(t)||!(0,Te.v8)(t)||!this.condition_(t)||(t.map.getView().beginInteraction(),this.lastAngle_=void 0,0))},i}(we.Z);var Le=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Me=function(t){function e(e){var i=t.call(this)||this;return i.geometry_=null,i.element_=document.createElement("div"),i.element_.style.position="absolute",i.element_.style.pointerEvents="auto",i.element_.className="ol-box "+e,i.map_=null,i.startPixel_=null,i.endPixel_=null,i}return Le(e,t),e.prototype.disposeInternal=function(){this.setMap(null)},e.prototype.render_=function(){var t=this.startPixel_,e=this.endPixel_,i="px",n=this.element_.style;n.left=Math.min(t[0],e[0])+i,n.top=Math.min(t[1],e[1])+i,n.width=Math.abs(e[0]-t[0])+i,n.height=Math.abs(e[1]-t[1])+i},e.prototype.setMap=function(t){if(this.map_){this.map_.getOverlayContainer().removeChild(this.element_);var e=this.element_.style;e.left="inherit",e.top="inherit",e.width="inherit",e.height="inherit"}this.map_=t,this.map_&&this.map_.getOverlayContainer().appendChild(this.element_)},e.prototype.setPixels=function(t,e){this.startPixel_=t,this.endPixel_=e,this.createOrUpdateGeometry(),this.render_()},e.prototype.createOrUpdateGeometry=function(){var t=this.startPixel_,e=this.endPixel_,i=[t,[t[0],e[1]],e,[e[0],t[1]]].map(this.map_.getCoordinateFromPixelInternal,this.map_);i[4]=i[0].slice(),this.geometry_?this.geometry_.setCoordinates([i]):this.geometry_=new oe([i])},e.prototype.getGeometry=function(){return this.geometry_},e}(t.Z);var Ae=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Fe=function(t){function e(e,i,n){var o=t.call(this,e)||this;return o.coordinate=i,o.mapBrowserEvent=n,o}return Ae(e,t),e}(z.ZP);const Ze=function(t){function e(e){var i=t.call(this)||this,n=e||{};return i.box_=new Me(n.className||"ol-dragbox"),i.minArea_=void 0!==n.minArea?n.minArea:64,n.onBoxEnd&&(i.onBoxEnd=n.onBoxEnd),i.startPixel_=null,i.condition_=n.condition?n.condition:Te.v8,i.boxEndCondition_=n.boxEndCondition?n.boxEndCondition:i.defaultBoxEndCondition,i}return Ae(e,t),e.prototype.defaultBoxEndCondition=function(t,e,i){var n=i[0]-e[0],o=i[1]-e[1];return n*n+o*o>=this.minArea_},e.prototype.getGeometry=function(){return this.box_.getGeometry()},e.prototype.handleDragEvent=function(t){this.box_.setPixels(this.startPixel_,t.pixel),this.dispatchEvent(new Fe("boxdrag",t.coordinate,t))},e.prototype.handleUpEvent=function(t){this.box_.setMap(null);var e=this.boxEndCondition_(t,this.startPixel_,t.pixel);return e&&this.onBoxEnd(t),this.dispatchEvent(new Fe(e?"boxend":"boxcancel",t.coordinate,t)),!1},e.prototype.handleDownEvent=function(t){return!!this.condition_(t)&&(this.startPixel_=t.pixel,this.box_.setMap(t.map),this.box_.setPixels(this.startPixel_,this.startPixel_),this.dispatchEvent(new Fe("boxstart",t.coordinate,t)),!0)},e.prototype.onBoxEnd=function(t){},e}(we.Z);var De=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ke=function(t){function e(e){var i=this,n=e||{},o=n.condition?n.condition:Te.vY;return(i=t.call(this,{condition:o,className:n.className||"ol-dragzoom",minArea:n.minArea})||this).duration_=void 0!==n.duration?n.duration:200,i.out_=void 0!==n.out&&n.out,i}return De(e,t),e.prototype.onBoxEnd=function(t){var e=this.getMap(),i=e.getView(),n=e.getSize(),r=this.getGeometry().getExtent();if(this.out_){var s=i.calculateExtentInternal(n),a=(0,o.ZT)([e.getPixelFromCoordinateInternal((0,o.hC)(r)),e.getPixelFromCoordinateInternal((0,o.Xv)(r))]),l=i.getResolutionForExtentInternal(a,n);(0,o.H9)(s,1/l),r=s}var h=i.getConstrainedResolution(i.getResolutionForExtentInternal(r,n)),u=i.getConstrainedCenter((0,o.qg)(r),h);i.animateInternal({resolution:h,center:u,duration:this.duration_,easing:At.Vv})},e}(Ze);var je=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ne=function(t){function e(e){var i=t.call(this)||this,n=e||{};return i.defaultCondition_=function(t){return(0,Te.rM)(t)&&(0,Te.TN)(t)},i.condition_=void 0!==n.condition?n.condition:i.defaultCondition_,i.duration_=void 0!==n.duration?n.duration:100,i.pixelDelta_=void 0!==n.pixelDelta?n.pixelDelta:128,i}return je(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==w.Z.KEYDOWN){var i=t.originalEvent,n=i.keyCode;if(this.condition_(t)&&(40==n||37==n||39==n||38==n)){var o=t.map.getView(),r=o.getResolution()*this.pixelDelta_,s=0,a=0;40==n?a=-r:37==n?s=-r:39==n?s=r:a=r;var l=[s,a];Z(l,o.getRotation()),(0,Ce.Cv)(o,l,this.duration_),i.preventDefault(),e=!0}}return!e},e}(Ce.ZP);var Ge=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ze=function(t){function e(e){var i=t.call(this)||this,n=e||{};return i.condition_=n.condition?n.condition:Te.TN,i.delta_=n.delta?n.delta:1,i.duration_=void 0!==n.duration?n.duration:100,i}return Ge(e,t),e.prototype.handleEvent=function(t){var e=!1;if(t.type==w.Z.KEYDOWN||t.type==w.Z.KEYPRESS){var i=t.originalEvent,n=i.charCode;if(this.condition_(t)&&(n=="+".charCodeAt(0)||n=="-".charCodeAt(0))){var o=t.map,r=n=="+".charCodeAt(0)?this.delta_:-this.delta_,s=o.getView();(0,Ce.FW)(s,r,void 0,this.duration_),i.preventDefault(),e=!0}}return!e},e}(Ce.ZP),We=function(){function t(t,e,i){this.decay_=t,this.minVelocity_=e,this.delay_=i,this.points_=[],this.angle_=0,this.initialVelocity_=0}return t.prototype.begin=function(){this.points_.length=0,this.angle_=0,this.initialVelocity_=0},t.prototype.update=function(t,e){this.points_.push(t,e,Date.now())},t.prototype.end=function(){if(this.points_.length<6)return!1;var t=Date.now()-this.delay_,e=this.points_.length-3;if(this.points_[e+2]<t)return!1;for(var i=e-3;i>0&&this.points_[i+2]>t;)i-=3;var n=this.points_[e+2]-this.points_[i+2];if(n<1e3/60)return!1;var o=this.points_[e]-this.points_[i],r=this.points_[e+1]-this.points_[i+1];return this.angle_=Math.atan2(r,o),this.initialVelocity_=Math.sqrt(o*o+r*r)/n,this.initialVelocity_>this.minVelocity_},t.prototype.getDistance=function(){return(this.minVelocity_-this.initialVelocity_)/this.decay_},t.prototype.getAngle=function(){return this.angle_},t}();var Ye=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Xe="trackpad";const Ke=function(t){function e(e){var i=this,n=e||{};(i=t.call(this,n)||this).totalDelta_=0,i.lastDelta_=0,i.maxDelta_=void 0!==n.maxDelta?n.maxDelta:1,i.duration_=void 0!==n.duration?n.duration:250,i.timeout_=void 0!==n.timeout?n.timeout:80,i.useAnchor_=void 0===n.useAnchor||n.useAnchor,i.constrainResolution_=void 0!==n.constrainResolution&&n.constrainResolution;var o=n.condition?n.condition:Te.Bx;return i.condition_=n.onFocusOnly?(0,Te.$6)(Te.yZ,o):o,i.lastAnchor_=null,i.startTime_=void 0,i.timeoutId_,i.mode_=void 0,i.trackpadEventGap_=400,i.trackpadTimeoutId_,i.deltaPerZoom_=300,i}return Ye(e,t),e.prototype.endInteraction_=function(){this.trackpadTimeoutId_=void 0,this.getMap().getView().endInteraction(void 0,this.lastDelta_?this.lastDelta_>0?1:-1:0,this.lastAnchor_)},e.prototype.handleEvent=function(t){if(!this.condition_(t))return!0;if(t.type!==w.Z.WHEEL)return!0;var e,i=t.map,n=t.originalEvent;if(n.preventDefault(),this.useAnchor_&&(this.lastAnchor_=t.coordinate),t.type==w.Z.WHEEL&&(e=n.deltaY,at.V&&n.deltaMode===WheelEvent.DOM_DELTA_PIXEL&&(e/=at.MP),n.deltaMode===WheelEvent.DOM_DELTA_LINE&&(e*=40)),0===e)return!1;this.lastDelta_=e;var o=Date.now();void 0===this.startTime_&&(this.startTime_=o),(!this.mode_||o-this.startTime_>this.trackpadEventGap_)&&(this.mode_=Math.abs(e)<4?Xe:"wheel");var r=i.getView();if(this.mode_===Xe&&!r.getConstrainResolution()&&!this.constrainResolution_)return this.trackpadTimeoutId_?clearTimeout(this.trackpadTimeoutId_):(r.getAnimating()&&r.cancelAnimations(),r.beginInteraction()),this.trackpadTimeoutId_=setTimeout(this.endInteraction_.bind(this),this.timeout_),r.adjustZoom(-e/this.deltaPerZoom_,this.lastAnchor_),this.startTime_=o,!1;this.totalDelta_+=e;var s=Math.max(this.timeout_-(o-this.startTime_),0);return clearTimeout(this.timeoutId_),this.timeoutId_=setTimeout(this.handleWheelZoom_.bind(this,i),s),!1},e.prototype.handleWheelZoom_=function(t){var e=t.getView();e.getAnimating()&&e.cancelAnimations();var i=-(0,C.uZ)(this.totalDelta_,-this.maxDelta_*this.deltaPerZoom_,this.maxDelta_*this.deltaPerZoom_)/this.deltaPerZoom_;(e.getConstrainResolution()||this.constrainResolution_)&&(i=i?i>0?1:-1:0),(0,Ce.FW)(e,i,this.lastAnchor_,this.duration_),this.mode_=void 0,this.totalDelta_=0,this.lastAnchor_=null,this.startTime_=void 0,this.timeoutId_=void 0},e.prototype.setMouseAnchor=function(t){this.useAnchor_=t,t||(this.lastAnchor_=null)},e}(Ce.ZP);var Be=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ve=function(t){function i(i){var n=this,o=i||{},r=o;return r.stopDown||(r.stopDown=e.Dv),(n=t.call(this,r)||this).anchor_=null,n.lastAngle_=void 0,n.rotating_=!1,n.rotationDelta_=0,n.threshold_=void 0!==o.threshold?o.threshold:.3,n.duration_=void 0!==o.duration?o.duration:250,n}return Be(i,t),i.prototype.handleDragEvent=function(t){var e=0,i=this.targetPointers[0],n=this.targetPointers[1],o=Math.atan2(n.clientY-i.clientY,n.clientX-i.clientX);if(void 0!==this.lastAngle_){var r=o-this.lastAngle_;this.rotationDelta_+=r,!this.rotating_&&Math.abs(this.rotationDelta_)>this.threshold_&&(this.rotating_=!0),e=r}this.lastAngle_=o;var s=t.map,a=s.getView();if(a.getConstraints().rotation!==Lt){var l=s.getViewport().getBoundingClientRect(),h=(0,we.S)(this.targetPointers);h[0]-=l.left,h[1]-=l.top,this.anchor_=s.getCoordinateFromPixelInternal(h),this.rotating_&&(s.render(),a.adjustRotationInternal(e,this.anchor_))}},i.prototype.handleUpEvent=function(t){return!(this.targetPointers.length<2&&(t.map.getView().endInteraction(this.duration_),1))},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastAngle_=void 0,this.rotating_=!1,this.rotationDelta_=0,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},i}(we.Z);var Ue=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const qe=function(t){function i(i){var n=this,o=i||{},r=o;return r.stopDown||(r.stopDown=e.Dv),(n=t.call(this,r)||this).anchor_=null,n.duration_=void 0!==o.duration?o.duration:400,n.lastDistance_=void 0,n.lastScaleDelta_=1,n}return Ue(i,t),i.prototype.handleDragEvent=function(t){var e=1,i=this.targetPointers[0],n=this.targetPointers[1],o=i.clientX-n.clientX,r=i.clientY-n.clientY,s=Math.sqrt(o*o+r*r);void 0!==this.lastDistance_&&(e=this.lastDistance_/s),this.lastDistance_=s;var a=t.map,l=a.getView();1!=e&&(this.lastScaleDelta_=e);var h=a.getViewport().getBoundingClientRect(),u=(0,we.S)(this.targetPointers);u[0]-=h.left,u[1]-=h.top,this.anchor_=a.getCoordinateFromPixelInternal(u),a.render(),l.adjustResolutionInternal(e,this.anchor_)},i.prototype.handleUpEvent=function(t){if(this.targetPointers.length<2){var e=t.map.getView(),i=this.lastScaleDelta_>1?1:-1;return e.endInteraction(this.duration_,i),!1}return!0},i.prototype.handleDownEvent=function(t){if(this.targetPointers.length>=2){var e=t.map;return this.anchor_=null,this.lastDistance_=void 0,this.lastScaleDelta_=1,this.handlingDownUpSequence||e.getView().beginInteraction(),!0}return!1},i}(we.Z);var He=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Je=function(t){function e(e){return(e=(0,E.f0)({},e)).controls||(e.controls=function(t){var e={},i=new q.Z;return(void 0===e.zoom||e.zoom)&&i.push(new Ee(e.zoomOptions)),(void 0===e.rotate||e.rotate)&&i.push(new me(e.rotateOptions)),(void 0===e.attribution||e.attribution)&&i.push(new ye(e.attributionOptions)),i}()),e.interactions||(e.interactions=function(t){var e={onFocusOnly:!0}||{},i=new q.Z,n=new We(-.005,.05,100);return(void 0===e.altShiftDragRotate||e.altShiftDragRotate)&&i.push(new Re),(void 0===e.doubleClickZoom||e.doubleClickZoom)&&i.push(new Oe({delta:e.zoomDelta,duration:e.zoomDuration})),(void 0===e.dragPan||e.dragPan)&&i.push(new Ie({onFocusOnly:e.onFocusOnly,kinetic:n})),(void 0===e.pinchRotate||e.pinchRotate)&&i.push(new Ve),(void 0===e.pinchZoom||e.pinchZoom)&&i.push(new qe({duration:e.zoomDuration})),(void 0===e.keyboard||e.keyboard)&&(i.push(new Ne),i.push(new ze({delta:e.zoomDelta,duration:e.zoomDuration}))),(void 0===e.mouseWheelZoom||e.mouseWheelZoom)&&i.push(new Ke({onFocusOnly:e.onFocusOnly,duration:e.zoomDuration})),(void 0===e.shiftDragZoom||e.shiftDragZoom)&&i.push(new ke({duration:e.zoomDuration})),i}()),t.call(this,e)||this}return He(e,t),e.prototype.createRenderer=function(){return new U(this)},e}(fe);var $e=s(1273);const Qe="preload",ti="useInterimTilesOnError";var ei=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ii=function(t){function e(e){var i=this,n=e||{},o=(0,E.f0)({},n);return delete o.preload,delete o.useInterimTilesOnError,(i=t.call(this,o)||this).setPreload(void 0!==n.preload?n.preload:0),i.setUseInterimTilesOnError(void 0===n.useInterimTilesOnError||n.useInterimTilesOnError),i}return ei(e,t),e.prototype.getPreload=function(){return this.get(Qe)},e.prototype.setPreload=function(t){this.set(Qe,t)},e.prototype.getUseInterimTilesOnError=function(){return this.get(ti)},e.prototype.setUseInterimTilesOnError=function(t){this.set(ti,t)},e}(A);var ni=s(1256),oi=s(6834),ri=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const si=function(t){function e(e){var i=t.call(this)||this;return i.boundHandleImageChange_=i.handleImageChange_.bind(i),i.layer_=e,i.declutterExecutorGroup=null,i}return ri(e,t),e.prototype.getFeatures=function(t){return(0,i.O3)()},e.prototype.prepareFrame=function(t){return(0,i.O3)()},e.prototype.renderFrame=function(t,e){return(0,i.O3)()},e.prototype.loadedTileCallback=function(t,e,i){t[e]||(t[e]={}),t[e][i.tileCoord.toString()]=i},e.prototype.createLoadedTileFinder=function(t,e,i){return function(n,o){var r=this.loadedTileCallback.bind(this,i,n);return t.forEachLoadedTile(e,n,o,r)}.bind(this)},e.prototype.forEachFeatureAtCoordinate=function(t,e,i,n,o){},e.prototype.getDataAtPixel=function(t,e,n){return(0,i.O3)()},e.prototype.getLayer=function(){return this.layer_},e.prototype.handleFontsChanged=function(){},e.prototype.handleImageChange_=function(t){t.target.getState()===ni.Z.LOADED&&this.renderIfReadyAndVisible()},e.prototype.loadImage=function(t){var e=t.getState();return e!=ni.Z.LOADED&&e!=ni.Z.ERROR&&t.addEventListener(w.Z.CHANGE,this.boundHandleImageChange_),e==ni.Z.IDLE&&(t.load(),e=t.getState()),e==ni.Z.LOADED},e.prototype.renderIfReadyAndVisible=function(){var t=this.getLayer();t.getVisible()&&t.getSourceState()==P&&t.changed()},e}(oi.Z);var ai=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const li=function(t){function e(e){var i=t.call(this,e)||this;return i.container=null,i.renderedResolution,i.tempTransform=(0,n.Ue)(),i.pixelTransform=(0,n.Ue)(),i.inversePixelTransform=(0,n.Ue)(),i.context=null,i.containerReused=!1,i}return ai(e,t),e.prototype.useContainer=function(t,e,i){var n,o,r=this.getLayer().getClassName();if(t&&""===t.style.opacity&&t.className===r&&(a=t.firstElementChild)instanceof HTMLCanvasElement&&(o=a.getContext("2d")),!o||0!==o.canvas.width&&o.canvas.style.transform!==e?this.containerReused&&(this.container=null,this.context=null,this.containerReused=!1):(this.container=t,this.context=o,this.containerReused=!0),!this.container){(n=document.createElement("div")).className=r;var s=n.style;s.position="absolute",s.width="100%",s.height="100%";var a=(o=(0,B.E4)()).canvas;n.appendChild(a),(s=a.style).position="absolute",s.left="0",s.transformOrigin="top left",this.container=n,this.context=o}},e.prototype.clip=function(t,e,i){var r=e.pixelRatio,s=e.size[0]*r/2,a=e.size[1]*r/2,l=e.viewState.rotation,h=(0,o.rL)(i),u=(0,o.Xv)(i),c=(0,o.w$)(i),p=(0,o.hC)(i);(0,n.nn)(e.coordinateToPixelTransform,h),(0,n.nn)(e.coordinateToPixelTransform,u),(0,n.nn)(e.coordinateToPixelTransform,c),(0,n.nn)(e.coordinateToPixelTransform,p),t.save(),(0,K.qs)(t,-l,s,a),t.beginPath(),t.moveTo(h[0]*r,h[1]*r),t.lineTo(u[0]*r,u[1]*r),t.lineTo(c[0]*r,c[1]*r),t.lineTo(p[0]*r,p[1]*r),t.clip(),(0,K.qs)(t,l,s,a)},e.prototype.clipUnrotated=function(t,e,i){var r=(0,o.rL)(i),s=(0,o.Xv)(i),a=(0,o.w$)(i),l=(0,o.hC)(i);(0,n.nn)(e.coordinateToPixelTransform,r),(0,n.nn)(e.coordinateToPixelTransform,s),(0,n.nn)(e.coordinateToPixelTransform,a),(0,n.nn)(e.coordinateToPixelTransform,l);var h=this.inversePixelTransform;(0,n.nn)(h,r),(0,n.nn)(h,s),(0,n.nn)(h,a),(0,n.nn)(h,l),t.save(),t.beginPath(),t.moveTo(Math.round(r[0]),Math.round(r[1])),t.lineTo(Math.round(s[0]),Math.round(s[1])),t.lineTo(Math.round(a[0]),Math.round(a[1])),t.lineTo(Math.round(l[0]),Math.round(l[1])),t.clip()},e.prototype.dispatchRenderEvent_=function(t,e,i){var n=this.getLayer();if(n.hasListener(t)){var o=new Y(t,this.inversePixelTransform,i,e);n.dispatchEvent(o)}},e.prototype.preRender=function(t,e){this.dispatchRenderEvent_("prerender",t,e)},e.prototype.postRender=function(t,e){this.dispatchRenderEvent_("postrender",t,e)},e.prototype.getRenderTransform=function(t,e,i,o,r,s,a){var l=r/2,h=s/2,u=o/e,c=-u,p=-t[0]+a,f=-t[1];return(0,n.qC)(this.tempTransform,l,h,u,c,-i,p,f)},e.prototype.getDataAtPixel=function(t,e,i){var r,s=(0,n.nn)(this.inversePixelTransform,t.slice()),a=this.context,l=this.getLayer().getExtent();if(l){var h=(0,n.nn)(e.pixelToCoordinateTransform,t.slice());if(!(0,o.b8)(l,h))return null}try{var u=Math.round(s[0]),c=Math.round(s[1]),p=document.createElement("canvas"),f=p.getContext("2d");p.width=1,p.height=1,f.clearRect(0,0,1,1),f.drawImage(a.canvas,u,c,1,1,0,0,1,1),r=f.getImageData(0,0,1,1).data}catch(t){return"SecurityError"===t.name?new Uint8Array:r}return 0===r[3]?null:r},e}(si);var hi=function(){function t(t,e,i,n){this.minX=t,this.maxX=e,this.minY=i,this.maxY=n}return t.prototype.contains=function(t){return this.containsXY(t[1],t[2])},t.prototype.containsTileRange=function(t){return this.minX<=t.minX&&t.maxX<=this.maxX&&this.minY<=t.minY&&t.maxY<=this.maxY},t.prototype.containsXY=function(t,e){return this.minX<=t&&t<=this.maxX&&this.minY<=e&&e<=this.maxY},t.prototype.equals=function(t){return this.minX==t.minX&&this.minY==t.minY&&this.maxX==t.maxX&&this.maxY==t.maxY},t.prototype.extend=function(t){t.minX<this.minX&&(this.minX=t.minX),t.maxX>this.maxX&&(this.maxX=t.maxX),t.minY<this.minY&&(this.minY=t.minY),t.maxY>this.maxY&&(this.maxY=t.maxY)},t.prototype.getHeight=function(){return this.maxY-this.minY+1},t.prototype.getSize=function(){return[this.getWidth(),this.getHeight()]},t.prototype.getWidth=function(){return this.maxX-this.minX+1},t.prototype.intersects=function(t){return this.minX<=t.maxX&&this.maxX>=t.minX&&this.minY<=t.maxY&&this.maxY>=t.minY},t}();function ui(t,e,i,n,o){return void 0!==o?(o.minX=t,o.maxX=e,o.minY=i,o.maxY=n,o):new hi(t,e,i,n)}const ci=hi;var pi=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),fi=function(t){function e(e){var i=t.call(this,e)||this;return i.extentChanged=!0,i.renderedExtent_=null,i.renderedPixelRatio,i.renderedProjection=null,i.renderedRevision,i.renderedTiles=[],i.newTiles_=!1,i.tmpExtent=(0,o.lJ)(),i.tmpTileRange_=new ci(0,0,0,0),i}return pi(e,t),e.prototype.isDrawableTile=function(t){var e=this.getLayer(),i=t.getState(),n=e.getUseInterimTilesOnError();return 2==i||4==i||3==i&&!n},e.prototype.getTile=function(t,e,i,n){var o=n.pixelRatio,r=n.viewState.projection,s=this.getLayer(),a=s.getSource().getTile(t,e,i,o,r);return 3==a.getState()&&(s.getUseInterimTilesOnError()?s.getPreload()>0&&(this.newTiles_=!0):a.setState(2)),this.isDrawableTile(a)||(a=a.getInterimTile()),a},e.prototype.loadedTileCallback=function(e,i,n){return!!this.isDrawableTile(n)&&t.prototype.loadedTileCallback.call(this,e,i,n)},e.prototype.prepareFrame=function(t){return!!this.getLayer().getSource()},e.prototype.renderFrame=function(t,e){var r=t.layerStatesArray[t.layerIndex],s=t.viewState,a=s.projection,l=s.resolution,h=s.center,u=s.rotation,c=t.pixelRatio,p=this.getLayer(),f=p.getSource(),d=f.getRevision(),_=f.getTileGridForProjection(a),g=_.getZForResolution(l,f.zDirection),y=_.getResolution(g),v=t.extent,m=r.extent&&(0,Ot.dY)(r.extent,a);m&&(v=(0,o.Ed)(v,(0,Ot.dY)(r.extent,a)));var x=f.getTilePixelRatio(c),C=Math.round(t.size[0]*x),S=Math.round(t.size[1]*x);if(u){var O=Math.round(Math.sqrt(C*C+S*S));C=O,S=O}var w=y*C/2/x,T=y*S/2/x,b=[h[0]-w,h[1]-T,h[0]+w,h[1]+T],I=_.getTileRangeForExtentAndZ(v,g),P={};P[g]={};var R=this.createLoadedTileFinder(f,a,P),L=this.tmpExtent,M=this.tmpTileRange_;this.newTiles_=!1;for(var A=I.minX;A<=I.maxX;++A)for(var F=I.minY;F<=I.maxY;++F){var Z=this.getTile(g,A,F,t);if(this.isDrawableTile(Z)){var D=(0,i.sq)(this);if(2==Z.getState()){P[g][Z.tileCoord.toString()]=Z;var k=Z.inTransition(D);this.newTiles_||!k&&-1!==this.renderedTiles.indexOf(Z)||(this.newTiles_=!0)}if(1===Z.getAlpha(D,t.time))continue}var j=_.getTileCoordChildTileRange(Z.tileCoord,M,L),N=!1;j&&(N=R(g+1,j)),N||_.forEachTileCoordParentTileRange(Z.tileCoord,R,M,L)}var G=y/l;(0,n.qC)(this.pixelTransform,t.size[0]/2,t.size[1]/2,1/x,1/x,u,-C/2,-S/2);var z=(0,K.QP)(this.pixelTransform);this.useContainer(e,z,r.opacity);var W=this.context,Y=W.canvas;(0,n.nb)(this.inversePixelTransform,this.pixelTransform),(0,n.qC)(this.tempTransform,C/2,S/2,G,G,0,-C/2,-S/2),Y.width!=C||Y.height!=S?(Y.width=C,Y.height=S):this.containerReused||W.clearRect(0,0,C,S),m&&this.clipUnrotated(W,t,m),(0,E.f0)(W,f.getContextOptions()),this.preRender(W,t),this.renderedTiles.length=0;var X,B,V,U=Object.keys(P).map(Number);U.sort(bt.kK),1!==r.opacity||this.containerReused&&!f.getOpaque(t.viewState.projection)?(X=[],B=[]):U=U.reverse();for(var q=U.length-1;q>=0;--q){var H=U[q],J=f.getTilePixelSize(H,c,a),$=_.getResolution(H)/y,Q=J[0]*$*G,tt=J[1]*$*G,et=_.getTileCoordForCoordAndZ((0,o.rL)(b),H),it=_.getTileCoordExtent(et),nt=(0,n.nn)(this.tempTransform,[x*(it[0]-b[0])/y,x*(b[3]-it[3])/y]),ot=x*f.getGutterForProjection(a),rt=P[H];for(var st in rt){var at=(Z=rt[st]).tileCoord,lt=nt[0]-(et[1]-at[1])*Q,ht=Math.round(lt+Q),ut=nt[1]-(et[2]-at[2])*tt,ct=Math.round(ut+tt),pt=ht-(A=Math.round(lt)),ft=ct-(F=Math.round(ut)),dt=g===H;if(!(k=dt&&1!==Z.getAlpha((0,i.sq)(this),t.time)))if(X){W.save(),V=[A,F,A+pt,F,A+pt,F+ft,A,F+ft];for(var _t=0,gt=X.length;_t<gt;++_t)if(g!==H&&H<B[_t]){var yt=X[_t];W.beginPath(),W.moveTo(V[0],V[1]),W.lineTo(V[2],V[3]),W.lineTo(V[4],V[5]),W.lineTo(V[6],V[7]),W.moveTo(yt[6],yt[7]),W.lineTo(yt[4],yt[5]),W.lineTo(yt[2],yt[3]),W.lineTo(yt[0],yt[1]),W.clip()}X.push(V),B.push(H)}else W.clearRect(A,F,pt,ft);this.drawTileImage(Z,t,A,F,pt,ft,ot,dt,r.opacity),X&&!k&&W.restore(),this.renderedTiles.push(Z),this.updateUsedTiles(t.usedTiles,f,Z)}}return this.renderedRevision=d,this.renderedResolution=y,this.extentChanged=!this.renderedExtent_||!(0,o.fS)(this.renderedExtent_,b),this.renderedExtent_=b,this.renderedPixelRatio=c,this.renderedProjection=a,this.manageTilePyramid(t,f,_,c,a,v,g,p.getPreload()),this.scheduleExpireCache(t,f),this.postRender(W,t),r.extent&&W.restore(),z!==Y.style.transform&&(Y.style.transform=z),this.container},e.prototype.drawTileImage=function(t,e,n,o,r,s,a,l,h){var u=this.getTileImage(t);if(u){var c=(0,i.sq)(this),p=l?t.getAlpha(c,e.time):1,f=h*p,d=f!==this.context.globalAlpha;d&&(this.context.save(),this.context.globalAlpha=f),this.context.drawImage(u,a,a,u.width-2*a,u.height-2*a,n,o,r,s),d&&this.context.restore(),1!==p?e.animate=!0:l&&t.endTransition(c)}},e.prototype.getImage=function(){var t=this.context;return t?t.canvas:null},e.prototype.getTileImage=function(t){return t.getImage()},e.prototype.scheduleExpireCache=function(t,e){if(e.canExpireCache()){var n=function(t,e,n){var o=(0,i.sq)(t);o in n.usedTiles&&t.expireCache(n.viewState.projection,n.usedTiles[o])}.bind(null,e);t.postRenderFunctions.push(n)}},e.prototype.updateUsedTiles=function(t,e,n){var o=(0,i.sq)(e);o in t||(t[o]={}),t[o][n.getKey()]=!0},e.prototype.manageTilePyramid=function(t,e,n,o,r,s,a,l,h){var u=(0,i.sq)(e);u in t.wantedTiles||(t.wantedTiles[u]={});var c,p,f,d,_,g,y=t.wantedTiles[u],v=t.tileQueue,m=0;for(g=n.getMinZoom();g<=a;++g)for(p=n.getTileRangeForExtentAndZ(s,g,p),f=n.getResolution(g),d=p.minX;d<=p.maxX;++d)for(_=p.minY;_<=p.maxY;++_)a-g<=l?(++m,0==(c=e.getTile(g,d,_,o,r)).getState()&&(y[c.getKey()]=!0,v.isKeyQueued(c.getKey())||v.enqueue([c,u,n.getTileCoordCenter(c.tileCoord),f])),void 0!==h&&h(c)):e.useTile(g,d,_,r);e.updateCacheSize(m,r)},e}(li);fi.prototype.getLayer;const di=fi;var _i=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const gi=function(t){function e(e){return t.call(this,e)||this}return _i(e,t),e.prototype.createRenderer=function(){return new di(this)},e}(ii);var yi=s(2582),vi=s.n(yi),mi=s(1219),xi=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Ei="renderOrder";const Ci=function(t){function e(e){var i=this,n=e||{},o=(0,E.f0)({},n);return delete o.style,delete o.renderBuffer,delete o.updateWhileAnimating,delete o.updateWhileInteracting,(i=t.call(this,o)||this).declutter_=void 0!==n.declutter&&n.declutter,i.renderBuffer_=void 0!==n.renderBuffer?n.renderBuffer:100,i.style_=null,i.styleFunction_=void 0,i.setStyle(n.style),i.updateWhileAnimating_=void 0!==n.updateWhileAnimating&&n.updateWhileAnimating,i.updateWhileInteracting_=void 0!==n.updateWhileInteracting&&n.updateWhileInteracting,i}return xi(e,t),e.prototype.getDeclutter=function(){return this.declutter_},e.prototype.getFeatures=function(e){return t.prototype.getFeatures.call(this,e)},e.prototype.getRenderBuffer=function(){return this.renderBuffer_},e.prototype.getRenderOrder=function(){return this.get(Ei)},e.prototype.getStyle=function(){return this.style_},e.prototype.getStyleFunction=function(){return this.styleFunction_},e.prototype.getUpdateWhileAnimating=function(){return this.updateWhileAnimating_},e.prototype.getUpdateWhileInteracting=function(){return this.updateWhileInteracting_},e.prototype.renderDeclutter=function(t){t.declutterTree||(t.declutterTree=new(vi())(9)),this.getRenderer().renderDeclutter(t)},e.prototype.setRenderOrder=function(t){this.set(Ei,t)},e.prototype.setStyle=function(t){this.style_=void 0!==t?t:mi.yF,this.styleFunction_=null===t?void 0:(0,mi.J$)(this.style_),this.changed()},e}(A);var Si={BEGIN_GEOMETRY:0,BEGIN_PATH:1,CIRCLE:2,CLOSE_PATH:3,CUSTOM:4,DRAW_CHARS:5,DRAW_IMAGE:6,END_GEOMETRY:7,FILL:8,MOVE_TO_LINE_TO:9,SET_FILL_STYLE:10,SET_STROKE_STYLE:11,STROKE:12},Oi=[Si.FILL],wi=[Si.STROKE],Ti=[Si.BEGIN_PATH],bi=[Si.CLOSE_PATH];const Ii=Si;var Pi=s(4178);const Ri=function(){function t(){}return t.prototype.drawCustom=function(t,e,i){},t.prototype.drawGeometry=function(t){},t.prototype.setStyle=function(t){},t.prototype.drawCircle=function(t,e){},t.prototype.drawFeature=function(t,e){},t.prototype.drawGeometryCollection=function(t,e){},t.prototype.drawLineString=function(t,e){},t.prototype.drawMultiLineString=function(t,e){},t.prototype.drawMultiPoint=function(t,e){},t.prototype.drawMultiPolygon=function(t,e){},t.prototype.drawPoint=function(t,e){},t.prototype.drawPolygon=function(t,e){},t.prototype.drawText=function(t,e){},t.prototype.setFillStrokeStyle=function(t,e){},t.prototype.setImageStyle=function(t,e){},t.prototype.setTextStyle=function(t,e){},t}();var Li=s(5120),Mi=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ai=function(t){function e(e,i,n,o){var r=t.call(this)||this;return r.tolerance=e,r.maxExtent=i,r.pixelRatio=o,r.maxLineWidth=0,r.resolution=n,r.beginGeometryInstruction1_=null,r.beginGeometryInstruction2_=null,r.bufferedMaxExtent_=null,r.instructions=[],r.coordinates=[],r.tmpCoordinate_=[],r.hitDetectionInstructions=[],r.state={},r}return Mi(e,t),e.prototype.applyPixelRatio=function(t){var e=this.pixelRatio;return 1==e?t:t.map((function(t){return t*e}))},e.prototype.appendFlatPointCoordinates=function(t,e){for(var i=this.getBufferedMaxExtent(),n=this.tmpCoordinate_,r=this.coordinates,s=r.length,a=0,l=t.length;a<l;a+=e)n[0]=t[a],n[1]=t[a+1],(0,o.b8)(i,n)&&(r[s++]=n[0],r[s++]=n[1]);return s},e.prototype.appendFlatLineCoordinates=function(t,e,i,n,r,s){var a=this.coordinates,l=a.length,h=this.getBufferedMaxExtent();s&&(e+=n);var u,c,p,f=t[e],d=t[e+1],_=this.tmpCoordinate_,g=!0;for(u=e+n;u<i;u+=n)_[0]=t[u],_[1]=t[u+1],(p=(0,o.pX)(h,_))!==c?(g&&(a[l++]=f,a[l++]=d,g=!1),a[l++]=_[0],a[l++]=_[1]):p===Pi.Z.INTERSECTING?(a[l++]=_[0],a[l++]=_[1],g=!1):g=!0,f=_[0],d=_[1],c=p;return(r&&g||u===e+n)&&(a[l++]=f,a[l++]=d),l},e.prototype.drawCustomCoordinates_=function(t,e,i,n,o){for(var r=0,s=i.length;r<s;++r){var a=i[r],l=this.appendFlatLineCoordinates(t,e,a,n,!1,!1);o.push(l),e=a}return e},e.prototype.drawCustom=function(t,e,i){this.beginGeometry(t,e);var n,o,r,s,a,l=t.getType(),h=t.getStride(),u=this.coordinates.length;if(l==mt.Z.MULTI_POLYGON){n=t.getOrientedFlatCoordinates(),s=[];var c=t.getEndss();a=0;for(var p=0,f=c.length;p<f;++p){var d=[];a=this.drawCustomCoordinates_(n,a,c[p],h,d),s.push(d)}this.instructions.push([Ii.CUSTOM,u,s,t,i,Xt])}else l==mt.Z.POLYGON||l==mt.Z.MULTI_LINE_STRING?(r=[],n=l==mt.Z.POLYGON?t.getOrientedFlatCoordinates():t.getFlatCoordinates(),a=this.drawCustomCoordinates_(n,0,t.getEnds(),h,r),this.instructions.push([Ii.CUSTOM,u,r,t,i,Yt])):l==mt.Z.LINE_STRING||l==mt.Z.CIRCLE?(n=t.getFlatCoordinates(),o=this.appendFlatLineCoordinates(n,0,n.length,h,!1,!1),this.instructions.push([Ii.CUSTOM,u,o,t,i,Wt])):l==mt.Z.MULTI_POINT?(n=t.getFlatCoordinates(),(o=this.appendFlatPointCoordinates(n,h))>u&&this.instructions.push([Ii.CUSTOM,u,o,t,i,Wt])):l==mt.Z.POINT&&(n=t.getFlatCoordinates(),this.coordinates.push(n[0],n[1]),o=this.coordinates.length,this.instructions.push([Ii.CUSTOM,u,o,t,i]));this.endGeometry(e)},e.prototype.beginGeometry=function(t,e){this.beginGeometryInstruction1_=[Ii.BEGIN_GEOMETRY,e,0,t],this.instructions.push(this.beginGeometryInstruction1_),this.beginGeometryInstruction2_=[Ii.BEGIN_GEOMETRY,e,0,t],this.hitDetectionInstructions.push(this.beginGeometryInstruction2_)},e.prototype.finish=function(){return{instructions:this.instructions,hitDetectionInstructions:this.hitDetectionInstructions,coordinates:this.coordinates}},e.prototype.reverseHitDetectionInstructions=function(){var t,e=this.hitDetectionInstructions;e.reverse();var i,n,o=e.length,r=-1;for(t=0;t<o;++t)(n=(i=e[t])[0])==Ii.END_GEOMETRY?r=t:n==Ii.BEGIN_GEOMETRY&&(i[2]=t,(0,bt.FZ)(this.hitDetectionInstructions,r,t),r=-1)},e.prototype.setFillStrokeStyle=function(t,e){var i=this.state;if(t){var n=t.getColor();i.fillStyle=(0,Li.y)(n||K.bL)}else i.fillStyle=void 0;if(e){var o=e.getColor();i.strokeStyle=(0,Li.y)(o||K.Tx);var r=e.getLineCap();i.lineCap=void 0!==r?r:K.mb;var s=e.getLineDash();i.lineDash=s?s.slice():K.X9;var a=e.getLineDashOffset();i.lineDashOffset=a||K.He;var l=e.getLineJoin();i.lineJoin=void 0!==l?l:K.rc;var h=e.getWidth();i.lineWidth=void 0!==h?h:K.yC;var u=e.getMiterLimit();i.miterLimit=void 0!==u?u:K.V4,i.lineWidth>this.maxLineWidth&&(this.maxLineWidth=i.lineWidth,this.bufferedMaxExtent_=null)}else i.strokeStyle=void 0,i.lineCap=void 0,i.lineDash=null,i.lineDashOffset=void 0,i.lineJoin=void 0,i.lineWidth=void 0,i.miterLimit=void 0},e.prototype.createFill=function(t){var e=t.fillStyle,i=[Ii.SET_FILL_STYLE,e];return"string"!=typeof e&&i.push(!0),i},e.prototype.applyStroke=function(t){this.instructions.push(this.createStroke(t))},e.prototype.createStroke=function(t){return[Ii.SET_STROKE_STYLE,t.strokeStyle,t.lineWidth*this.pixelRatio,t.lineCap,t.lineJoin,t.miterLimit,this.applyPixelRatio(t.lineDash),t.lineDashOffset*this.pixelRatio]},e.prototype.updateFillStyle=function(t,e){var i=t.fillStyle;"string"==typeof i&&t.currentFillStyle==i||(void 0!==i&&this.instructions.push(e.call(this,t)),t.currentFillStyle=i)},e.prototype.updateStrokeStyle=function(t,e){var i=t.strokeStyle,n=t.lineCap,o=t.lineDash,r=t.lineDashOffset,s=t.lineJoin,a=t.lineWidth,l=t.miterLimit;(t.currentStrokeStyle!=i||t.currentLineCap!=n||o!=t.currentLineDash&&!(0,bt.fS)(t.currentLineDash,o)||t.currentLineDashOffset!=r||t.currentLineJoin!=s||t.currentLineWidth!=a||t.currentMiterLimit!=l)&&(void 0!==i&&e.call(this,t),t.currentStrokeStyle=i,t.currentLineCap=n,t.currentLineDash=o,t.currentLineDashOffset=r,t.currentLineJoin=s,t.currentLineWidth=a,t.currentMiterLimit=l)},e.prototype.endGeometry=function(t){this.beginGeometryInstruction1_[2]=this.instructions.length,this.beginGeometryInstruction1_=null,this.beginGeometryInstruction2_[2]=this.hitDetectionInstructions.length,this.beginGeometryInstruction2_=null;var e=[Ii.END_GEOMETRY,t];this.instructions.push(e),this.hitDetectionInstructions.push(e)},e.prototype.getBufferedMaxExtent=function(){if(!this.bufferedMaxExtent_&&(this.bufferedMaxExtent_=(0,o.d9)(this.maxExtent),this.maxLineWidth>0)){var t=this.resolution*(this.maxLineWidth+1)/2;(0,o.f3)(this.bufferedMaxExtent_,t,this.bufferedMaxExtent_)}return this.bufferedMaxExtent_},e}(Ri);var Fi=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Zi=function(t){function e(e,i,n,o){var r=t.call(this,e,i,n,o)||this;return r.hitDetectionImage_=null,r.image_=null,r.imagePixelRatio_=void 0,r.anchorX_=void 0,r.anchorY_=void 0,r.height_=void 0,r.opacity_=void 0,r.originX_=void 0,r.originY_=void 0,r.rotateWithView_=void 0,r.rotation_=void 0,r.scale_=void 0,r.width_=void 0,r.declutterImageWithText_=void 0,r}return Fi(e,t),e.prototype.drawPoint=function(t,e){if(this.image_){this.beginGeometry(t,e);var i=t.getFlatCoordinates(),n=t.getStride(),o=this.coordinates.length,r=this.appendFlatPointCoordinates(i,n);this.instructions.push([Ii.DRAW_IMAGE,o,r,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterImageWithText_]),this.hitDetectionInstructions.push([Ii.DRAW_IMAGE,o,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterImageWithText_]),this.endGeometry(e)}},e.prototype.drawMultiPoint=function(t,e){if(this.image_){this.beginGeometry(t,e);var i=t.getFlatCoordinates(),n=t.getStride(),o=this.coordinates.length,r=this.appendFlatPointCoordinates(i,n);this.instructions.push([Ii.DRAW_IMAGE,o,r,this.image_,this.anchorX_*this.imagePixelRatio_,this.anchorY_*this.imagePixelRatio_,Math.ceil(this.height_*this.imagePixelRatio_),this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,[this.scale_[0]*this.pixelRatio/this.imagePixelRatio_,this.scale_[1]*this.pixelRatio/this.imagePixelRatio_],Math.ceil(this.width_*this.imagePixelRatio_),this.declutterImageWithText_]),this.hitDetectionInstructions.push([Ii.DRAW_IMAGE,o,r,this.hitDetectionImage_,this.anchorX_,this.anchorY_,this.height_,this.opacity_,this.originX_,this.originY_,this.rotateWithView_,this.rotation_,this.scale_,this.width_,this.declutterImageWithText_]),this.endGeometry(e)}},e.prototype.finish=function(){return this.reverseHitDetectionInstructions(),this.anchorX_=void 0,this.anchorY_=void 0,this.hitDetectionImage_=null,this.image_=null,this.imagePixelRatio_=void 0,this.height_=void 0,this.scale_=void 0,this.opacity_=void 0,this.originX_=void 0,this.originY_=void 0,this.rotateWithView_=void 0,this.rotation_=void 0,this.width_=void 0,t.prototype.finish.call(this)},e.prototype.setImageStyle=function(t,e){var i=t.getAnchor(),n=t.getSize(),o=t.getHitDetectionImage(),r=t.getImage(this.pixelRatio),s=t.getOrigin();this.imagePixelRatio_=t.getPixelRatio(this.pixelRatio),this.anchorX_=i[0],this.anchorY_=i[1],this.hitDetectionImage_=o,this.image_=r,this.height_=n[1],this.opacity_=t.getOpacity(),this.originX_=s[0],this.originY_=s[1],this.rotateWithView_=t.getRotateWithView(),this.rotation_=t.getRotation(),this.scale_=t.getScaleArray(),this.width_=n[0],this.declutterImageWithText_=e},e}(Ai);var Di=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const ki=function(t){function e(e,i,n,o){return t.call(this,e,i,n,o)||this}return Di(e,t),e.prototype.drawFlatCoordinates_=function(t,e,i,n){var o=this.coordinates.length,r=this.appendFlatLineCoordinates(t,e,i,n,!1,!1),s=[Ii.MOVE_TO_LINE_TO,o,r];return this.instructions.push(s),this.hitDetectionInstructions.push(s),i},e.prototype.drawLineString=function(t,e){var i=this.state,n=i.strokeStyle,o=i.lineWidth;if(void 0!==n&&void 0!==o){this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Ii.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],Ti);var r=t.getFlatCoordinates(),s=t.getStride();this.drawFlatCoordinates_(r,0,r.length,s),this.hitDetectionInstructions.push(wi),this.endGeometry(e)}},e.prototype.drawMultiLineString=function(t,e){var i=this.state,n=i.strokeStyle,o=i.lineWidth;if(void 0!==n&&void 0!==o){this.updateStrokeStyle(i,this.applyStroke),this.beginGeometry(t,e),this.hitDetectionInstructions.push([Ii.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset],Ti);for(var r=t.getEnds(),s=t.getFlatCoordinates(),a=t.getStride(),l=0,h=0,u=r.length;h<u;++h)l=this.drawFlatCoordinates_(s,l,r[h],a);this.hitDetectionInstructions.push(wi),this.endGeometry(e)}},e.prototype.finish=function(){var e=this.state;return null!=e.lastStroke&&e.lastStroke!=this.coordinates.length&&this.instructions.push(wi),this.reverseHitDetectionInstructions(),this.state=null,t.prototype.finish.call(this)},e.prototype.applyStroke=function(e){null!=e.lastStroke&&e.lastStroke!=this.coordinates.length&&(this.instructions.push(wi),e.lastStroke=this.coordinates.length),e.lastStroke=0,t.prototype.applyStroke.call(this,e),this.instructions.push(Ti)},e}(Ai);var ji=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Ni=function(t){function e(e,i,n,o){return t.call(this,e,i,n,o)||this}return ji(e,t),e.prototype.drawFlatCoordinatess_=function(t,e,i,n){var o=this.state,r=void 0!==o.fillStyle,s=void 0!==o.strokeStyle,a=i.length;this.instructions.push(Ti),this.hitDetectionInstructions.push(Ti);for(var l=0;l<a;++l){var h=i[l],u=this.coordinates.length,c=this.appendFlatLineCoordinates(t,e,h,n,!0,!s),p=[Ii.MOVE_TO_LINE_TO,u,c];this.instructions.push(p),this.hitDetectionInstructions.push(p),s&&(this.instructions.push(bi),this.hitDetectionInstructions.push(bi)),e=h}return r&&(this.instructions.push(Oi),this.hitDetectionInstructions.push(Oi)),s&&(this.instructions.push(wi),this.hitDetectionInstructions.push(wi)),e},e.prototype.drawCircle=function(t,e){var i=this.state,n=i.fillStyle,o=i.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ii.SET_FILL_STYLE,K.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ii.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);var r=t.getFlatCoordinates(),s=t.getStride(),a=this.coordinates.length;this.appendFlatLineCoordinates(r,0,r.length,s,!1,!1);var l=[Ii.CIRCLE,a];this.instructions.push(Ti,l),this.hitDetectionInstructions.push(Ti,l),void 0!==i.fillStyle&&(this.instructions.push(Oi),this.hitDetectionInstructions.push(Oi)),void 0!==i.strokeStyle&&(this.instructions.push(wi),this.hitDetectionInstructions.push(wi)),this.endGeometry(e)}},e.prototype.drawPolygon=function(t,e){var i=this.state,n=i.fillStyle,o=i.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ii.SET_FILL_STYLE,K.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ii.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);var r=t.getEnds(),s=t.getOrientedFlatCoordinates(),a=t.getStride();this.drawFlatCoordinatess_(s,0,r,a),this.endGeometry(e)}},e.prototype.drawMultiPolygon=function(t,e){var i=this.state,n=i.fillStyle,o=i.strokeStyle;if(void 0!==n||void 0!==o){this.setFillStrokeStyles_(),this.beginGeometry(t,e),void 0!==i.fillStyle&&this.hitDetectionInstructions.push([Ii.SET_FILL_STYLE,K.bL]),void 0!==i.strokeStyle&&this.hitDetectionInstructions.push([Ii.SET_STROKE_STYLE,i.strokeStyle,i.lineWidth,i.lineCap,i.lineJoin,i.miterLimit,i.lineDash,i.lineDashOffset]);for(var r=t.getEndss(),s=t.getOrientedFlatCoordinates(),a=t.getStride(),l=0,h=0,u=r.length;h<u;++h)l=this.drawFlatCoordinatess_(s,l,r[h],a);this.endGeometry(e)}},e.prototype.finish=function(){this.reverseHitDetectionInstructions(),this.state=null;var e=this.tolerance;if(0!==e)for(var i=this.coordinates,n=0,o=i.length;n<o;++n)i[n]=Gt(i[n],e);return t.prototype.finish.call(this)},e.prototype.setFillStrokeStyles_=function(){var t=this.state;void 0!==t.fillStyle&&this.updateFillStyle(t,this.createFill),void 0!==t.strokeStyle&&this.updateStrokeStyle(t,this.applyStroke)},e}(Ai);var Gi=s(8288);function zi(t,e,i,n,o){var r,s,a,l,h,u,c,p,f,d=i,_=i,g=0,y=0,v=i;for(r=i;r<n;r+=o){var m=e[r],x=e[r+1];void 0!==l&&(p=m-l,f=x-h,a=Math.sqrt(p*p+f*f),void 0!==u&&(y+=s,Math.acos((u*p+c*f)/(s*a))>t&&(y>g&&(g=y,d=v,_=r),y=0,v=r-o)),s=a,u=p,c=f),l=m,h=x}return(y+=a)>g?[v,r]:[d,_]}var Wi=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Yi={left:0,end:0,center:.5,right:1,start:1,top:0,middle:.5,hanging:.2,alphabetic:.8,ideographic:.8,bottom:1},Xi={Circle:Ni,Default:Ai,Image:Zi,LineString:ki,Polygon:Ni,Text:function(t){function e(e,i,n,o){var r=t.call(this,e,i,n,o)||this;return r.labels_=null,r.text_="",r.textOffsetX_=0,r.textOffsetY_=0,r.textRotateWithView_=void 0,r.textRotation_=0,r.textFillState_=null,r.fillStates={},r.textStrokeState_=null,r.strokeStates={},r.textState_={},r.textStates={},r.textKey_="",r.fillKey_="",r.strokeKey_="",r.declutterImageWithText_=void 0,r}return Wi(e,t),e.prototype.finish=function(){var e=t.prototype.finish.call(this);return e.textStates=this.textStates,e.fillStates=this.fillStates,e.strokeStates=this.strokeStates,e},e.prototype.drawText=function(t,e){var i=this.textFillState_,n=this.textStrokeState_,r=this.textState_;if(""!==this.text_&&r&&(i||n)){var s=this.coordinates,a=s.length,l=t.getType(),h=null,u=t.getStride();if(r.placement!==Gi.Z.LINE||l!=mt.Z.LINE_STRING&&l!=mt.Z.MULTI_LINE_STRING&&l!=mt.Z.POLYGON&&l!=mt.Z.MULTI_POLYGON){var c=r.overflow?null:[];switch(l){case mt.Z.POINT:case mt.Z.MULTI_POINT:h=t.getFlatCoordinates();break;case mt.Z.LINE_STRING:h=t.getFlatMidpoint();break;case mt.Z.CIRCLE:h=t.getCenter();break;case mt.Z.MULTI_LINE_STRING:h=t.getFlatMidpoints(),u=2;break;case mt.Z.POLYGON:h=t.getFlatInteriorPoint(),r.overflow||c.push(h[2]/this.resolution),u=3;break;case mt.Z.MULTI_POLYGON:var p=t.getFlatInteriorPoints();for(h=[],C=0,S=p.length;C<S;C+=3)r.overflow||c.push(p[C+2]/this.resolution),h.push(p[C],p[C+1]);if(0===h.length)return;u=2}if((R=this.appendFlatPointCoordinates(h,u))===a)return;this.saveTextStates_(),(r.backgroundFill||r.backgroundStroke)&&(this.setFillStrokeStyle(r.backgroundFill,r.backgroundStroke),r.backgroundFill&&(this.updateFillStyle(this.state,this.createFill),this.hitDetectionInstructions.push(this.createFill(this.state))),r.backgroundStroke&&(this.updateStrokeStyle(this.state,this.applyStroke),this.hitDetectionInstructions.push(this.createStroke(this.state)))),this.beginGeometry(t,e);var f=r.padding;if(f!=K.oB&&(r.scale[0]<0||r.scale[1]<0)){var d=r.padding[0],_=r.padding[1],g=r.padding[2],y=r.padding[3];r.scale[0]<0&&(_=-_,y=-y),r.scale[1]<0&&(d=-d,g=-g),f=[d,_,g,y]}var v=this.pixelRatio;this.instructions.push([Ii.DRAW_IMAGE,a,R,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[1,1],NaN,this.declutterImageWithText_,f==K.oB?K.oB:f.map((function(t){return t*v})),!!r.backgroundFill,!!r.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,c]);var m=1/v;this.hitDetectionInstructions.push([Ii.DRAW_IMAGE,a,R,null,NaN,NaN,NaN,1,0,0,this.textRotateWithView_,this.textRotation_,[m,m],NaN,this.declutterImageWithText_,f,!!r.backgroundFill,!!r.backgroundStroke,this.text_,this.textKey_,this.strokeKey_,this.fillKey_,this.textOffsetX_,this.textOffsetY_,c]),this.endGeometry(e)}else{if(!(0,o.kK)(this.getBufferedMaxExtent(),t.getExtent()))return;var x=void 0;if(h=t.getFlatCoordinates(),l==mt.Z.LINE_STRING)x=[h.length];else if(l==mt.Z.MULTI_LINE_STRING)x=t.getEnds();else if(l==mt.Z.POLYGON)x=t.getEnds().slice(0,1);else if(l==mt.Z.MULTI_POLYGON){var E=t.getEndss();x=[];for(var C=0,S=E.length;C<S;++C)x.push(E[C][0])}this.beginGeometry(t,e);for(var O=r.textAlign,w=0,T=void 0,b=0,I=x.length;b<I;++b){if(null==O){var P=zi(r.maxAngle,h,w,x[b],u);w=P[0],T=P[1]}else T=x[b];for(C=w;C<T;C+=u)s.push(h[C],h[C+1]);var R=s.length;w=x[b],this.drawChars_(a,R),a=R}this.endGeometry(e)}}},e.prototype.saveTextStates_=function(){var t=this.textStrokeState_,e=this.textState_,i=this.textFillState_,n=this.strokeKey_;t&&(n in this.strokeStates||(this.strokeStates[n]={strokeStyle:t.strokeStyle,lineCap:t.lineCap,lineDashOffset:t.lineDashOffset,lineWidth:t.lineWidth,lineJoin:t.lineJoin,miterLimit:t.miterLimit,lineDash:t.lineDash}));var o=this.textKey_;o in this.textStates||(this.textStates[o]={font:e.font,textAlign:e.textAlign||K.PH,textBaseline:e.textBaseline||K.ru,scale:e.scale});var r=this.fillKey_;i&&(r in this.fillStates||(this.fillStates[r]={fillStyle:i.fillStyle}))},e.prototype.drawChars_=function(t,e){var i=this.textStrokeState_,n=this.textState_,o=this.strokeKey_,r=this.textKey_,s=this.fillKey_;this.saveTextStates_();var a=this.pixelRatio,l=Yi[n.textBaseline],h=this.textOffsetY_*a,u=this.text_,c=i?i.lineWidth*Math.abs(n.scale[0])/2:0;this.instructions.push([Ii.DRAW_CHARS,t,e,l,n.overflow,s,n.maxAngle,a,h,o,c*a,u,r,1]),this.hitDetectionInstructions.push([Ii.DRAW_CHARS,t,e,l,n.overflow,s,n.maxAngle,1,h,o,c,u,r,1/a])},e.prototype.setTextStyle=function(t,e){var n,o,r;if(t){var s=t.getFill();s?((o=this.textFillState_)||(o={},this.textFillState_=o),o.fillStyle=(0,Li.y)(s.getColor()||K.bL)):(o=null,this.textFillState_=o);var a=t.getStroke();if(a){(r=this.textStrokeState_)||(r={},this.textStrokeState_=r);var l=a.getLineDash(),h=a.getLineDashOffset(),u=a.getWidth(),c=a.getMiterLimit();r.lineCap=a.getLineCap()||K.mb,r.lineDash=l?l.slice():K.X9,r.lineDashOffset=void 0===h?K.He:h,r.lineJoin=a.getLineJoin()||K.rc,r.lineWidth=void 0===u?K.yC:u,r.miterLimit=void 0===c?K.V4:c,r.strokeStyle=(0,Li.y)(a.getColor()||K.Tx)}else r=null,this.textStrokeState_=r;n=this.textState_;var p=t.getFont()||K.Df;(0,K.Qx)(p);var f=t.getScaleArray();n.overflow=t.getOverflow(),n.font=p,n.maxAngle=t.getMaxAngle(),n.placement=t.getPlacement(),n.textAlign=t.getTextAlign(),n.textBaseline=t.getTextBaseline()||K.ru,n.backgroundFill=t.getBackgroundFill(),n.backgroundStroke=t.getBackgroundStroke(),n.padding=t.getPadding()||K.oB,n.scale=void 0===f?[1,1]:f;var d=t.getOffsetX(),_=t.getOffsetY(),g=t.getRotateWithView(),y=t.getRotation();this.text_=t.getText()||"",this.textOffsetX_=void 0===d?0:d,this.textOffsetY_=void 0===_?0:_,this.textRotateWithView_=void 0!==g&&g,this.textRotation_=void 0===y?0:y,this.strokeKey_=r?("string"==typeof r.strokeStyle?r.strokeStyle:(0,i.sq)(r.strokeStyle))+r.lineCap+r.lineDashOffset+"|"+r.lineWidth+r.lineJoin+r.miterLimit+"["+r.lineDash.join()+"]":"",this.textKey_=n.font+n.scale+(n.textAlign||"?")+(n.textBaseline||"?"),this.fillKey_=o?"string"==typeof o.fillStyle?o.fillStyle:"|"+(0,i.sq)(o.fillStyle):""}else this.text_="";this.declutterImageWithText_=e},e}(Ai)};const Ki=function(){function t(t,e,i,n){this.tolerance_=t,this.maxExtent_=e,this.pixelRatio_=n,this.resolution_=i,this.buildersByZIndex_={}}return t.prototype.finish=function(){var t={};for(var e in this.buildersByZIndex_){t[e]=t[e]||{};var i=this.buildersByZIndex_[e];for(var n in i){var o=i[n].finish();t[e][n]=o}}return t},t.prototype.getBuilder=function(t,e){var i=void 0!==t?t.toString():"0",n=this.buildersByZIndex_[i];void 0===n&&(n={},this.buildersByZIndex_[i]=n);var o=n[e];return void 0===o&&(o=new(0,Xi[e])(this.tolerance_,this.maxExtent_,this.resolution_,this.pixelRatio_),n[e]=o),o},t}(),Bi="Circle",Vi="Default",Ui="Image",qi="LineString",Hi="Polygon",Ji="Text";var $i=s(7882);function Qi(t,e,i,n,o,r,s,a,l,h,u,c){var p=t[e],f=t[e+1],d=0,_=0,g=0,y=0;function v(){d=p,_=f,p=t[e+=n],f=t[e+1],y+=g,g=Math.sqrt((p-d)*(p-d)+(f-_)*(f-_))}do{v()}while(e<i-n&&y+g<r);for(var m=(r-y)/g,x=(0,C.t7)(d,p,m),E=(0,C.t7)(_,f,m),S=e-n,O=y,w=r+a*l(h,o,u);e<i-n&&y+g<w;)v();m=(w-y)/g;var T,b=(0,C.t7)(d,p,m),I=(0,C.t7)(_,f,m);if(c){var P=[x,E,b,I];(0,$i.U1)(P,0,4,2,c,P,P),T=P[0]>P[2]}else T=x>b;var R,L=Math.PI,M=[],A=S+n===e;if(g=0,y=O,p=t[e=S],f=t[e+1],A){v();var F=Math.atan2(f-_,p-d);T&&(F+=F>0?-L:L);var Z=(b+x)/2,D=(I+E)/2;return M[0]=[Z,D,(w-r)/2,F,o],M}for(var k=0,j=o.length;k<j;){v();var N=Math.atan2(f-_,p-d);if(T&&(N+=N>0?-L:L),void 0!==R){var G=N-R;if(G+=G>L?-2*L:G<-L?2*L:0,Math.abs(G)>s)return null}R=N;for(var z=k,W=0;k<j;++k){var Y=a*l(h,o[T?j-k-1:k],u);if(e+n<i&&y+g<r+W+Y/2)break;W+=Y}if(k!==z){var X=T?o.substring(j-z,j-k):o.substring(z,k);m=(r+W/2-y)/g,Z=(0,C.t7)(d,p,m),D=(0,C.t7)(_,f,m),M.push([Z,D,W/2,N,X]),r+=W}}return M}function tn(t,e,i,n){for(var o=t[e],r=t[e+1],s=0,a=e+n;a<i;a+=n){var l=t[a],h=t[a+1];s+=Math.sqrt((l-o)*(l-o)+(h-r)*(h-r)),o=l,r=h}return s}var en=(0,o.lJ)(),nn=[],on=[],rn=[],sn=[];function an(t){return t[3].declutterBox}var ln=new RegExp("["+String.fromCharCode(1425)+"-"+String.fromCharCode(2303)+String.fromCharCode(64285)+"-"+String.fromCharCode(65023)+String.fromCharCode(65136)+"-"+String.fromCharCode(65276)+String.fromCharCode(67584)+"-"+String.fromCharCode(69631)+String.fromCharCode(124928)+"-"+String.fromCharCode(126975)+"]");function hn(t,e){return"start"!==e&&"end"!==e||ln.test(t)||(e="start"===e?"left":"right"),Yi[e]}const un=function(){function t(t,e,i,o,r){this.overlaps=i,this.pixelRatio=e,this.resolution=t,this.alignFill_,this.instructions=o.instructions,this.coordinates=o.coordinates,this.coordinateCache_={},this.renderBuffer_=r,this.renderedTransform_=(0,n.Ue)(),this.hitDetectionInstructions=o.hitDetectionInstructions,this.pixelCoordinates_=null,this.viewRotation_=0,this.fillStates=o.fillStates||{},this.strokeStates=o.strokeStates||{},this.textStates=o.textStates||{},this.widths_={},this.labels_={}}return t.prototype.createLabel=function(t,e,i,n){var o=t+e+i+n;if(this.labels_[o])return this.labels_[o];var r=n?this.strokeStates[n]:null,s=i?this.fillStates[i]:null,a=this.textStates[e],l=this.pixelRatio,h=[a.scale[0]*l,a.scale[1]*l],u=hn(t,a.textAlign||K.PH),c=n&&r.lineWidth?r.lineWidth:0,p=t.split("\n"),f=p.length,d=[],_=(0,K.gs)(a.font,p,d),g=(0,K.fk)(a.font),y=_+c,v=[],m=(y+2)*h[0],x=(g*f+c)*h[1],E={width:m<0?Math.floor(m):Math.ceil(m),height:x<0?Math.floor(x):Math.ceil(x),contextInstructions:v};1==h[0]&&1==h[1]||v.push("scale",h),v.push("font",a.font),n&&(v.push("strokeStyle",r.strokeStyle),v.push("lineWidth",c),v.push("lineCap",r.lineCap),v.push("lineJoin",r.lineJoin),v.push("miterLimit",r.miterLimit),(at.Id?OffscreenCanvasRenderingContext2D:CanvasRenderingContext2D).prototype.setLineDash&&(v.push("setLineDash",[r.lineDash]),v.push("lineDashOffset",r.lineDashOffset))),i&&v.push("fillStyle",s.fillStyle),v.push("textBaseline","middle"),v.push("textAlign","center");var C,S=.5-u,O=u*y+S*c;if(n)for(C=0;C<f;++C)v.push("strokeText",[p[C],O+S*d[C],.5*(c+g)+C*g]);if(i)for(C=0;C<f;++C)v.push("fillText",[p[C],O+S*d[C],.5*(c+g)+C*g]);return this.labels_[o]=E,E},t.prototype.replayTextBackground_=function(t,e,i,n,o,r,s){t.beginPath(),t.moveTo.apply(t,e),t.lineTo.apply(t,i),t.lineTo.apply(t,n),t.lineTo.apply(t,o),t.lineTo.apply(t,e),r&&(this.alignFill_=r[2],this.fill_(t)),s&&(this.setStrokeStyle_(t,s),t.stroke())},t.prototype.calculateImageOrLabelDimensions_=function(t,e,i,r,s,a,l,h,u,c,p,f,d,_,g,y){var v,m=i-(l*=f[0]),x=r-(h*=f[1]),E=s+u>t?t-u:s,C=a+c>e?e-c:a,S=_[3]+E*f[0]+_[1],O=_[0]+C*f[1]+_[2],w=m-_[3],T=x-_[0];return(g||0!==p)&&(nn[0]=w,sn[0]=w,nn[1]=T,on[1]=T,on[0]=w+S,rn[0]=on[0],rn[1]=T+O,sn[1]=rn[1]),0!==p?(v=(0,n.qC)((0,n.Ue)(),i,r,1,1,p,-i,-r),(0,n.nn)(v,nn),(0,n.nn)(v,on),(0,n.nn)(v,rn),(0,n.nn)(v,sn),(0,o.T9)(Math.min(nn[0],on[0],rn[0],sn[0]),Math.min(nn[1],on[1],rn[1],sn[1]),Math.max(nn[0],on[0],rn[0],sn[0]),Math.max(nn[1],on[1],rn[1],sn[1]),en)):(0,o.T9)(Math.min(w,w+S),Math.min(T,T+O),Math.max(w,w+S),Math.max(T,T+O),en),d&&(m=Math.round(m),x=Math.round(x)),{drawImageX:m,drawImageY:x,drawImageW:E,drawImageH:C,originX:u,originY:c,declutterBox:{minX:en[0],minY:en[1],maxX:en[2],maxY:en[3],value:y},canvasTransform:v,scale:f}},t.prototype.replayImageOrLabel_=function(t,e,i,n,o,r,s){var a=!(!r&&!s),l=n.declutterBox,h=t.canvas,u=s?s[2]*n.scale[0]/2:0;return l.minX-u<=h.width/e&&l.maxX+u>=0&&l.minY-u<=h.height/e&&l.maxY+u>=0&&(a&&this.replayTextBackground_(t,nn,on,rn,sn,r,s),(0,K._f)(t,n.canvasTransform,o,i,n.originX,n.originY,n.drawImageW,n.drawImageH,n.drawImageX,n.drawImageY,n.scale)),!0},t.prototype.fill_=function(t){if(this.alignFill_){var e=(0,n.nn)(this.renderedTransform_,[0,0]),i=512*this.pixelRatio;t.save(),t.translate(e[0]%i,e[1]%i),t.rotate(this.viewRotation_)}t.fill(),this.alignFill_&&t.restore()},t.prototype.setStrokeStyle_=function(t,e){t.strokeStyle=e[1],t.lineWidth=e[2],t.lineCap=e[3],t.lineJoin=e[4],t.miterLimit=e[5],t.setLineDash&&(t.lineDashOffset=e[7],t.setLineDash(e[6]))},t.prototype.drawLabelWithPointPlacement_=function(t,e,i,n){var o=this.textStates[e],r=this.createLabel(t,e,n,i),s=this.strokeStates[i],a=this.pixelRatio,l=hn(t,o.textAlign||K.PH),h=Yi[o.textBaseline||K.ru],u=s&&s.lineWidth?s.lineWidth:0;return{label:r,anchorX:l*(r.width/a-2*o.scale[0])+2*(.5-l)*u,anchorY:h*r.height/a+2*(.5-h)*u}},t.prototype.execute_=function(t,e,i,r,s,a,l,h){var u;this.pixelCoordinates_&&(0,bt.fS)(i,this.renderedTransform_)?u=this.pixelCoordinates_:(this.pixelCoordinates_||(this.pixelCoordinates_=[]),u=(0,$i.vT)(this.coordinates,0,this.coordinates.length,2,i,this.pixelCoordinates_),(0,n.lk)(this.renderedTransform_,i));for(var c,p,f,d,_,g,y,v,m,x,E,C,S,O,w,T,b=0,I=r.length,P=0,R=0,L=0,M=null,A=null,F=this.coordinateCache_,Z=this.viewRotation_,D=Math.round(1e12*Math.atan2(-i[1],i[0]))/1e12,k={context:t,pixelRatio:this.pixelRatio,resolution:this.resolution,rotation:Z},j=this.instructions!=r||this.overlaps?0:200;b<I;){var N=r[b];switch(N[0]){case Ii.BEGIN_GEOMETRY:S=N[1],T=N[3],S.getGeometry()?void 0===l||(0,o.kK)(l,T.getExtent())?++b:b=N[2]+1:b=N[2];break;case Ii.BEGIN_PATH:R>j&&(this.fill_(t),R=0),L>j&&(t.stroke(),L=0),R||L||(t.beginPath(),d=NaN,_=NaN),++b;break;case Ii.CIRCLE:var G=u[P=N[1]],z=u[P+1],W=u[P+2]-G,Y=u[P+3]-z,X=Math.sqrt(W*W+Y*Y);t.moveTo(G+X,z),t.arc(G,z,X,0,2*Math.PI,!0),++b;break;case Ii.CLOSE_PATH:t.closePath(),++b;break;case Ii.CUSTOM:P=N[1],c=N[2];var B=N[3],V=N[4],U=6==N.length?N[5]:void 0;k.geometry=B,k.feature=S,b in F||(F[b]=[]);var q=F[b];U?U(u,P,c,2,q):(q[0]=u[P],q[1]=u[P+1],q.length=2),V(q,k),++b;break;case Ii.DRAW_IMAGE:P=N[1],c=N[2],v=N[3],p=N[4],f=N[5];var H=N[6],J=N[7],$=N[8],Q=N[9],tt=N[10],et=N[11],it=N[12],nt=N[13],ot=N[14];if(!v&&N.length>=19){m=N[18],x=N[19],E=N[20],C=N[21];var rt=this.drawLabelWithPointPlacement_(m,x,E,C);v=rt.label,N[3]=v;var st=N[22];p=(rt.anchorX-st)*this.pixelRatio,N[4]=p;var at=N[23];f=(rt.anchorY-at)*this.pixelRatio,N[5]=f,H=v.height,N[6]=H,nt=v.width,N[13]=nt}var lt=void 0;N.length>24&&(lt=N[24]);var ht=void 0,ut=void 0,ct=void 0;N.length>16?(ht=N[15],ut=N[16],ct=N[17]):(ht=K.oB,ut=!1,ct=!1),tt&&D?et+=Z:tt||D||(et-=Z);for(var pt=0;P<c;P+=2)if(!(lt&&lt[pt++]<nt/this.pixelRatio)){var ft=[t,e,v,Gt=this.calculateImageOrLabelDimensions_(v.width,v.height,u[P],u[P+1],nt,H,p,f,$,Q,et,it,s,ht,ut||ct,S),J,ut?M:null,ct?A:null],dt=void 0,_t=void 0;if(h&&ot){if(!ot[P]){ot[P]=ft;continue}if(dt=ot[P],delete ot[P],_t=an(dt),h.collides(_t))continue}h&&h.collides(Gt.declutterBox)||(dt&&(h&&h.insert(_t),this.replayImageOrLabel_.apply(this,dt)),h&&h.insert(Gt.declutterBox),this.replayImageOrLabel_.apply(this,ft))}++b;break;case Ii.DRAW_CHARS:var gt=N[1],yt=N[2],vt=N[3],mt=N[4];C=N[5];var xt=N[6],Et=N[7],Ct=N[8];E=N[9];var St=N[10];m=N[11],x=N[12];var Ot=[N[13],N[13]],wt=this.textStates[x],Tt=wt.font,It=[wt.scale[0]*Et,wt.scale[1]*Et],Pt=void 0;Tt in this.widths_?Pt=this.widths_[Tt]:(Pt={},this.widths_[Tt]=Pt);var Rt=tn(u,gt,yt,2),Lt=Math.abs(It[0])*(0,K.Kd)(Tt,m,Pt);if(mt||Lt<=Rt){var Mt=this.textStates[x].textAlign,At=Qi(u,gt,yt,2,m,(Rt-Lt)*Yi[Mt],xt,Math.abs(It[0]),K.Kd,Tt,Pt,D?0:this.viewRotation_);t:if(At){var Ft=[],Zt=void 0,Dt=void 0,kt=void 0,jt=void 0,Nt=void 0;if(E)for(Zt=0,Dt=At.length;Zt<Dt;++Zt){kt=(Nt=At[Zt])[4],jt=this.createLabel(kt,x,"",E),p=Nt[2]+(It[0]<0?-St:St),f=vt*jt.height+2*(.5-vt)*St*It[1]/It[0]-Ct;var Gt=this.calculateImageOrLabelDimensions_(jt.width,jt.height,Nt[0],Nt[1],jt.width,jt.height,p,f,0,0,Nt[3],Ot,!1,K.oB,!1,S);if(h&&h.collides(Gt.declutterBox))break t;Ft.push([t,e,jt,Gt,1,null,null])}if(C)for(Zt=0,Dt=At.length;Zt<Dt;++Zt){if(kt=(Nt=At[Zt])[4],jt=this.createLabel(kt,x,C,""),p=Nt[2],f=vt*jt.height-Ct,Gt=this.calculateImageOrLabelDimensions_(jt.width,jt.height,Nt[0],Nt[1],jt.width,jt.height,p,f,0,0,Nt[3],Ot,!1,K.oB,!1,S),h&&h.collides(Gt.declutterBox))break t;Ft.push([t,e,jt,Gt,1,null,null])}h&&h.load(Ft.map(an));for(var zt=0,Wt=Ft.length;zt<Wt;++zt)this.replayImageOrLabel_.apply(this,Ft[zt])}}++b;break;case Ii.END_GEOMETRY:if(void 0!==a){var Yt=a(S=N[1],T);if(Yt)return Yt}++b;break;case Ii.FILL:j?R++:this.fill_(t),++b;break;case Ii.MOVE_TO_LINE_TO:for(P=N[1],c=N[2],O=u[P],y=(w=u[P+1])+.5|0,(g=O+.5|0)===d&&y===_||(t.moveTo(O,w),d=g,_=y),P+=2;P<c;P+=2)g=(O=u[P])+.5|0,y=(w=u[P+1])+.5|0,P!=c-2&&g===d&&y===_||(t.lineTo(O,w),d=g,_=y);++b;break;case Ii.SET_FILL_STYLE:M=N,this.alignFill_=N[2],R&&(this.fill_(t),R=0,L&&(t.stroke(),L=0)),t.fillStyle=N[1],++b;break;case Ii.SET_STROKE_STYLE:A=N,L&&(t.stroke(),L=0),this.setStrokeStyle_(t,N),++b;break;case Ii.STROKE:j?L++:t.stroke(),++b;break;default:++b}}R&&this.fill_(t),L&&t.stroke()},t.prototype.execute=function(t,e,i,n,o,r){this.viewRotation_=n,this.execute_(t,e,i,this.instructions,o,void 0,void 0,r)},t.prototype.executeHitDetection=function(t,e,i,n,o){return this.viewRotation_=i,this.execute_(t,1,e,this.hitDetectionInstructions,!0,n,o)},t}();var cn=[Hi,Bi,qi,Ui,Ji,Vi],pn=function(){function t(t,e,i,o,r,s){this.maxExtent_=t,this.overlaps_=o,this.pixelRatio_=i,this.resolution_=e,this.renderBuffer_=s,this.executorsByZIndex_={},this.hitDetectionContext_=null,this.hitDetectionTransform_=(0,n.Ue)(),this.createExecutors_(r)}return t.prototype.clip=function(t,e){var i=this.getClipCoords(e);t.beginPath(),t.moveTo(i[0],i[1]),t.lineTo(i[2],i[3]),t.lineTo(i[4],i[5]),t.lineTo(i[6],i[7]),t.clip()},t.prototype.createExecutors_=function(t){for(var e in t){var i=this.executorsByZIndex_[e];void 0===i&&(i={},this.executorsByZIndex_[e]=i);var n=t[e],o=[this.renderBuffer_||0,this.renderBuffer_||0];for(var r in n){var s=n[r];i[r]=new un(this.resolution_,this.pixelRatio_,this.overlaps_,s,o)}}},t.prototype.hasExecutors=function(t){for(var e in this.executorsByZIndex_)for(var i=this.executorsByZIndex_[e],n=0,o=t.length;n<o;++n)if(t[n]in i)return!0;return!1},t.prototype.forEachFeatureAtCoordinate=function(t,e,i,r,s,a){var l=2*(r=Math.round(r))+1,h=(0,n.qC)(this.hitDetectionTransform_,r+.5,r+.5,1/e,-1/e,-i,-t[0],-t[1]),u=!this.hitDetectionContext_;u&&(this.hitDetectionContext_=(0,B.E4)(l,l));var c,p=this.hitDetectionContext_;p.canvas.width!==l||p.canvas.height!==l?(p.canvas.width=l,p.canvas.height=l):u||p.clearRect(0,0,l,l),void 0!==this.renderBuffer_&&(c=(0,o.lJ)(),(0,o.Wj)(c,t),(0,o.f3)(c,e*(this.renderBuffer_+r),c));var f,d=function(t){if(void 0!==fn[t])return fn[t];for(var e=2*t+1,i=t*t,n=new Array(i+1),o=0;o<=t;++o)for(var r=0;r<=t;++r){var s=o*o+r*r;if(s>i)break;var a=n[s];a||(a=[],n[s]=a),a.push(4*((t+o)*e+(t+r))+3),o>0&&a.push(4*((t-o)*e+(t+r))+3),r>0&&(a.push(4*((t+o)*e+(t-r))+3),o>0&&a.push(4*((t-o)*e+(t-r))+3))}for(var l=[],h=(o=0,n.length);o<h;++o)n[o]&&l.push.apply(l,n[o]);return fn[t]=l,l}(r);function _(t,e){for(var i=p.getImageData(0,0,l,l).data,n=0,o=d.length;n<o;n++)if(i[d[n]]>0){if(!a||f!==Ui&&f!==Ji||-1!==a.indexOf(t)){var h=(d[n]-3)/4,u=r-h%l,c=r-(h/l|0),_=s(t,e,u*u+c*c);if(_)return _}p.clearRect(0,0,l,l);break}}var g,y,v,m,x,E=Object.keys(this.executorsByZIndex_).map(Number);for(E.sort(bt.kK),g=E.length-1;g>=0;--g){var C=E[g].toString();for(v=this.executorsByZIndex_[C],y=cn.length-1;y>=0;--y)if(void 0!==(m=v[f=cn[y]])&&(x=m.executeHitDetection(p,h,i,_,c)))return x}},t.prototype.getClipCoords=function(t){var e=this.maxExtent_;if(!e)return null;var i=e[0],n=e[1],o=e[2],r=e[3],s=[i,n,i,r,o,r,o,n];return(0,$i.vT)(s,0,8,2,t,s),s},t.prototype.isEmpty=function(){return(0,E.xb)(this.executorsByZIndex_)},t.prototype.execute=function(t,e,i,n,o,r,s){var a=Object.keys(this.executorsByZIndex_).map(Number);a.sort(bt.kK),this.maxExtent_&&(t.save(),this.clip(t,i));var l,h,u,c,p,f,d=r||cn;for(s&&a.reverse(),l=0,h=a.length;l<h;++l){var _=a[l].toString();for(p=this.executorsByZIndex_[_],u=0,c=d.length;u<c;++u)void 0!==(f=p[d[u]])&&f.execute(t,e,i,n,o,s)}this.maxExtent_&&t.restore()},t}(),fn={};const dn=pn;var _n=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const gn=function(t){function e(e,i,o,r,s,a,l){var h=t.call(this)||this;return h.context_=e,h.pixelRatio_=i,h.extent_=o,h.transform_=r,h.viewRotation_=s,h.squaredTolerance_=a,h.userTransform_=l,h.contextFillState_=null,h.contextStrokeState_=null,h.contextTextState_=null,h.fillState_=null,h.strokeState_=null,h.image_=null,h.imageAnchorX_=0,h.imageAnchorY_=0,h.imageHeight_=0,h.imageOpacity_=0,h.imageOriginX_=0,h.imageOriginY_=0,h.imageRotateWithView_=!1,h.imageRotation_=0,h.imageScale_=[0,0],h.imageWidth_=0,h.text_="",h.textOffsetX_=0,h.textOffsetY_=0,h.textRotateWithView_=!1,h.textRotation_=0,h.textScale_=[0,0],h.textFillState_=null,h.textStrokeState_=null,h.textState_=null,h.pixelCoordinates_=[],h.tmpLocalTransform_=(0,n.Ue)(),h}return _n(e,t),e.prototype.drawImages_=function(t,e,i,o){if(this.image_){var r=(0,$i.vT)(t,e,i,2,this.transform_,this.pixelCoordinates_),s=this.context_,a=this.tmpLocalTransform_,l=s.globalAlpha;1!=this.imageOpacity_&&(s.globalAlpha=l*this.imageOpacity_);var h=this.imageRotation_;this.imageRotateWithView_&&(h+=this.viewRotation_);for(var u=0,c=r.length;u<c;u+=2){var p=r[u]-this.imageAnchorX_,f=r[u+1]-this.imageAnchorY_;if(0!==h||1!=this.imageScale_[0]||1!=this.imageScale_[1]){var d=p+this.imageAnchorX_,_=f+this.imageAnchorY_;(0,n.qC)(a,d,_,1,1,h,-d,-_),s.setTransform.apply(s,a),s.translate(d,_),s.scale(this.imageScale_[0],this.imageScale_[1]),s.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,-this.imageAnchorX_,-this.imageAnchorY_,this.imageWidth_,this.imageHeight_),s.setTransform(1,0,0,1,0,0)}else s.drawImage(this.image_,this.imageOriginX_,this.imageOriginY_,this.imageWidth_,this.imageHeight_,p,f,this.imageWidth_,this.imageHeight_)}1!=this.imageOpacity_&&(s.globalAlpha=l)}},e.prototype.drawText_=function(t,e,i,o){if(this.textState_&&""!==this.text_){this.textFillState_&&this.setContextFillState_(this.textFillState_),this.textStrokeState_&&this.setContextStrokeState_(this.textStrokeState_),this.setContextTextState_(this.textState_);var r=(0,$i.vT)(t,e,i,o,this.transform_,this.pixelCoordinates_),s=this.context_,a=this.textRotation_;for(this.textRotateWithView_&&(a+=this.viewRotation_);e<i;e+=o){var l=r[e]+this.textOffsetX_,h=r[e+1]+this.textOffsetY_;if(0!==a||1!=this.textScale_[0]||1!=this.textScale_[1]){var u=(0,n.qC)(this.tmpLocalTransform_,l,h,1,1,a,-l,-h);s.setTransform.apply(s,u),s.translate(l,h),s.scale(this.textScale_[0],this.textScale_[1]),this.textStrokeState_&&s.strokeText(this.text_,0,0),this.textFillState_&&s.fillText(this.text_,0,0),s.setTransform(1,0,0,1,0,0)}else this.textStrokeState_&&s.strokeText(this.text_,l,h),this.textFillState_&&s.fillText(this.text_,l,h)}}},e.prototype.moveToLineTo_=function(t,e,i,n,o){var r=this.context_,s=(0,$i.vT)(t,e,i,n,this.transform_,this.pixelCoordinates_);r.moveTo(s[0],s[1]);var a=s.length;o&&(a-=2);for(var l=2;l<a;l+=2)r.lineTo(s[l],s[l+1]);return o&&r.closePath(),i},e.prototype.drawRings_=function(t,e,i,n){for(var o=0,r=i.length;o<r;++o)e=this.moveToLineTo_(t,e,i[o],n,!0);return e},e.prototype.drawCircle=function(t){if((0,o.kK)(this.extent_,t.getExtent())){if(this.fillState_||this.strokeState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=(0,Zt.Kr)(t,this.transform_,this.pixelCoordinates_),i=e[2]-e[0],n=e[3]-e[1],r=Math.sqrt(i*i+n*n),s=this.context_;s.beginPath(),s.arc(e[0],e[1],r,0,2*Math.PI),this.fillState_&&s.fill(),this.strokeState_&&s.stroke()}""!==this.text_&&this.drawText_(t.getCenter(),0,2,2)}},e.prototype.setStyle=function(t){this.setFillStrokeStyle(t.getFill(),t.getStroke()),this.setImageStyle(t.getImage()),this.setTextStyle(t.getText())},e.prototype.setTransform=function(t){this.transform_=t},e.prototype.drawGeometry=function(t){switch(t.getType()){case mt.Z.POINT:this.drawPoint(t);break;case mt.Z.LINE_STRING:this.drawLineString(t);break;case mt.Z.POLYGON:this.drawPolygon(t);break;case mt.Z.MULTI_POINT:this.drawMultiPoint(t);break;case mt.Z.MULTI_LINE_STRING:this.drawMultiLineString(t);break;case mt.Z.MULTI_POLYGON:this.drawMultiPolygon(t);break;case mt.Z.GEOMETRY_COLLECTION:this.drawGeometryCollection(t);break;case mt.Z.CIRCLE:this.drawCircle(t)}},e.prototype.drawFeature=function(t,e){var i=e.getGeometryFunction()(t);i&&(0,o.kK)(this.extent_,i.getExtent())&&(this.setStyle(e),this.drawGeometry(i))},e.prototype.drawGeometryCollection=function(t){for(var e=t.getGeometriesArray(),i=0,n=e.length;i<n;++i)this.drawGeometry(e[i])},e.prototype.drawPoint=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawMultiPoint=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getFlatCoordinates(),i=t.getStride();this.image_&&this.drawImages_(e,0,e.length,i),""!==this.text_&&this.drawText_(e,0,e.length,i)},e.prototype.drawLineString=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,o.kK)(this.extent_,t.getExtent())){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getFlatCoordinates();e.beginPath(),this.moveToLineTo_(i,0,i.length,t.getStride(),!1),e.stroke()}if(""!==this.text_){var n=t.getFlatMidpoint();this.drawText_(n,0,2,2)}}},e.prototype.drawMultiLineString=function(t){this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_));var e=t.getExtent();if((0,o.kK)(this.extent_,e)){if(this.strokeState_){this.setContextStrokeState_(this.strokeState_);var i=this.context_,n=t.getFlatCoordinates(),r=0,s=t.getEnds(),a=t.getStride();i.beginPath();for(var l=0,h=s.length;l<h;++l)r=this.moveToLineTo_(n,r,s[l],a,!1);i.stroke()}if(""!==this.text_){var u=t.getFlatMidpoints();this.drawText_(u,0,u.length,2)}}},e.prototype.drawPolygon=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,o.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_;e.beginPath(),this.drawRings_(t.getOrientedFlatCoordinates(),0,t.getEnds(),t.getStride()),this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var i=t.getFlatInteriorPoint();this.drawText_(i,0,2,2)}}},e.prototype.drawMultiPolygon=function(t){if(this.squaredTolerance_&&(t=t.simplifyTransformed(this.squaredTolerance_,this.userTransform_)),(0,o.kK)(this.extent_,t.getExtent())){if(this.strokeState_||this.fillState_){this.fillState_&&this.setContextFillState_(this.fillState_),this.strokeState_&&this.setContextStrokeState_(this.strokeState_);var e=this.context_,i=t.getOrientedFlatCoordinates(),n=0,r=t.getEndss(),s=t.getStride();e.beginPath();for(var a=0,l=r.length;a<l;++a){var h=r[a];n=this.drawRings_(i,n,h,s)}this.fillState_&&e.fill(),this.strokeState_&&e.stroke()}if(""!==this.text_){var u=t.getFlatInteriorPoints();this.drawText_(u,0,u.length,2)}}},e.prototype.setContextFillState_=function(t){var e=this.context_,i=this.contextFillState_;i?i.fillStyle!=t.fillStyle&&(i.fillStyle=t.fillStyle,e.fillStyle=t.fillStyle):(e.fillStyle=t.fillStyle,this.contextFillState_={fillStyle:t.fillStyle})},e.prototype.setContextStrokeState_=function(t){var e=this.context_,i=this.contextStrokeState_;i?(i.lineCap!=t.lineCap&&(i.lineCap=t.lineCap,e.lineCap=t.lineCap),e.setLineDash&&((0,bt.fS)(i.lineDash,t.lineDash)||e.setLineDash(i.lineDash=t.lineDash),i.lineDashOffset!=t.lineDashOffset&&(i.lineDashOffset=t.lineDashOffset,e.lineDashOffset=t.lineDashOffset)),i.lineJoin!=t.lineJoin&&(i.lineJoin=t.lineJoin,e.lineJoin=t.lineJoin),i.lineWidth!=t.lineWidth&&(i.lineWidth=t.lineWidth,e.lineWidth=t.lineWidth),i.miterLimit!=t.miterLimit&&(i.miterLimit=t.miterLimit,e.miterLimit=t.miterLimit),i.strokeStyle!=t.strokeStyle&&(i.strokeStyle=t.strokeStyle,e.strokeStyle=t.strokeStyle)):(e.lineCap=t.lineCap,e.setLineDash&&(e.setLineDash(t.lineDash),e.lineDashOffset=t.lineDashOffset),e.lineJoin=t.lineJoin,e.lineWidth=t.lineWidth,e.miterLimit=t.miterLimit,e.strokeStyle=t.strokeStyle,this.contextStrokeState_={lineCap:t.lineCap,lineDash:t.lineDash,lineDashOffset:t.lineDashOffset,lineJoin:t.lineJoin,lineWidth:t.lineWidth,miterLimit:t.miterLimit,strokeStyle:t.strokeStyle})},e.prototype.setContextTextState_=function(t){var e=this.context_,i=this.contextTextState_,n=t.textAlign?t.textAlign:K.PH;i?(i.font!=t.font&&(i.font=t.font,e.font=t.font),i.textAlign!=n&&(i.textAlign=n,e.textAlign=n),i.textBaseline!=t.textBaseline&&(i.textBaseline=t.textBaseline,e.textBaseline=t.textBaseline)):(e.font=t.font,e.textAlign=n,e.textBaseline=t.textBaseline,this.contextTextState_={font:t.font,textAlign:n,textBaseline:t.textBaseline})},e.prototype.setFillStrokeStyle=function(t,e){if(t){var i=t.getColor();this.fillState_={fillStyle:(0,Li.y)(i||K.bL)}}else this.fillState_=null;if(e){var n=e.getColor(),o=e.getLineCap(),r=e.getLineDash(),s=e.getLineDashOffset(),a=e.getLineJoin(),l=e.getWidth(),h=e.getMiterLimit();this.strokeState_={lineCap:void 0!==o?o:K.mb,lineDash:r||K.X9,lineDashOffset:s||K.He,lineJoin:void 0!==a?a:K.rc,lineWidth:this.pixelRatio_*(void 0!==l?l:K.yC),miterLimit:void 0!==h?h:K.V4,strokeStyle:(0,Li.y)(n||K.Tx)}}else this.strokeState_=null},e.prototype.setImageStyle=function(t){if(t){var e=t.getSize();if(e){var i=t.getAnchor(),n=t.getImage(1),o=t.getOrigin(),r=t.getScaleArray();this.imageAnchorX_=i[0],this.imageAnchorY_=i[1],this.imageHeight_=e[1],this.image_=n,this.imageOpacity_=t.getOpacity(),this.imageOriginX_=o[0],this.imageOriginY_=o[1],this.imageRotateWithView_=t.getRotateWithView(),this.imageRotation_=t.getRotation(),this.imageScale_=[this.pixelRatio_*r[0],this.pixelRatio_*r[1]],this.imageWidth_=e[0]}else this.image_=null}else this.image_=null},e.prototype.setTextStyle=function(t){if(t){var e=t.getFill();if(e){var i=e.getColor();this.textFillState_={fillStyle:(0,Li.y)(i||K.bL)}}else this.textFillState_=null;var n=t.getStroke();if(n){var o=n.getColor(),r=n.getLineCap(),s=n.getLineDash(),a=n.getLineDashOffset(),l=n.getLineJoin(),h=n.getWidth(),u=n.getMiterLimit();this.textStrokeState_={lineCap:void 0!==r?r:K.mb,lineDash:s||K.X9,lineDashOffset:a||K.He,lineJoin:void 0!==l?l:K.rc,lineWidth:void 0!==h?h:K.yC,miterLimit:void 0!==u?u:K.V4,strokeStyle:(0,Li.y)(o||K.Tx)}}else this.textStrokeState_=null;var c=t.getFont(),p=t.getOffsetX(),f=t.getOffsetY(),d=t.getRotateWithView(),_=t.getRotation(),g=t.getScaleArray(),y=t.getText(),v=t.getTextAlign(),m=t.getTextBaseline();this.textState_={font:void 0!==c?c:K.Df,textAlign:void 0!==v?v:K.PH,textBaseline:void 0!==m?m:K.ru},this.text_=void 0!==y?y:"",this.textOffsetX_=void 0!==p?this.pixelRatio_*p:0,this.textOffsetY_=void 0!==f?this.pixelRatio_*f:0,this.textRotateWithView_=void 0!==d&&d,this.textRotation_=void 0!==_?_:0,this.textScale_=[this.pixelRatio_*g[0],this.pixelRatio_*g[1]]}else this.text_=""},e}(Ri),yn="fraction",vn="pixels",mn="bottom-left",xn="bottom-right",En="top-left",Cn="top-right";var Sn=s(8039),On=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const wn=function(t){function e(e,i,n,o){var r=t.call(this)||this;return r.extent=e,r.pixelRatio_=n,r.resolution=i,r.state=o,r}return On(e,t),e.prototype.changed=function(){this.dispatchEvent(w.Z.CHANGE)},e.prototype.getExtent=function(){return this.extent},e.prototype.getImage=function(){return(0,i.O3)()},e.prototype.getPixelRatio=function(){return this.pixelRatio_},e.prototype.getResolution=function(){return this.resolution},e.prototype.getState=function(){return this.state},e.prototype.load=function(){(0,i.O3)()},e}(ot.Z);var Tn=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function bn(t,e,i){var n=t;if(n.src&&at.Tp){var o=n.decode(),r=!0;return o.then((function(){r&&e()})).catch((function(t){r&&("EncodingError"===t.name&&"Invalid image type."===t.message?e():i())})),function(){r=!1}}var s=[(0,R.Vx)(n,w.Z.LOAD,e),(0,R.Vx)(n,w.Z.ERROR,i)];return function(){s.forEach(R.bN)}}!function(t){function e(e,i,n,o,r,s){var a=t.call(this,e,i,n,ni.Z.IDLE)||this;return a.src_=o,a.image_=new Image,null!==r&&(a.image_.crossOrigin=r),a.unlisten_=null,a.state=ni.Z.IDLE,a.imageLoadFunction_=s,a}Tn(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){this.state=ni.Z.ERROR,this.unlistenImage_(),this.changed()},e.prototype.handleImageLoad_=function(){void 0===this.resolution&&(this.resolution=(0,o.Cr)(this.extent)/this.image_.height),this.state=ni.Z.LOADED,this.unlistenImage_(),this.changed()},e.prototype.load=function(){this.state!=ni.Z.IDLE&&this.state!=ni.Z.ERROR||(this.state=ni.Z.LOADING,this.changed(),this.imageLoadFunction_(this,this.src_),this.unlisten_=bn(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.setImage=function(t){this.image_=t},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)}}(wn);var In=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),Pn=null,Rn=function(t){function e(e,i,n,o,r,s){var a=t.call(this)||this;return a.hitDetectionImage_=null,a.image_=e||new Image,null!==o&&(a.image_.crossOrigin=o),a.canvas_={},a.color_=s,a.unlisten_=null,a.imageState_=r,a.size_=n,a.src_=i,a.tainted_,a}return In(e,t),e.prototype.isTainted_=function(){if(void 0===this.tainted_&&this.imageState_===ni.Z.LOADED){Pn||(Pn=(0,B.E4)(1,1)),Pn.drawImage(this.image_,0,0);try{Pn.getImageData(0,0,1,1),this.tainted_=!1}catch(t){Pn=null,this.tainted_=!0}}return!0===this.tainted_},e.prototype.dispatchChangeEvent_=function(){this.dispatchEvent(w.Z.CHANGE)},e.prototype.handleImageError_=function(){this.imageState_=ni.Z.ERROR,this.unlistenImage_(),this.dispatchChangeEvent_()},e.prototype.handleImageLoad_=function(){this.imageState_=ni.Z.LOADED,this.size_?(this.image_.width=this.size_[0],this.image_.height=this.size_[1]):this.size_=[this.image_.width,this.image_.height],this.unlistenImage_(),this.dispatchChangeEvent_()},e.prototype.getImage=function(t){return this.replaceColor_(t),this.canvas_[t]?this.canvas_[t]:this.image_},e.prototype.getPixelRatio=function(t){return this.replaceColor_(t),this.canvas_[t]?t:1},e.prototype.getImageState=function(){return this.imageState_},e.prototype.getHitDetectionImage=function(){if(!this.hitDetectionImage_)if(this.isTainted_()){var t=this.size_[0],e=this.size_[1],i=(0,B.E4)(t,e);i.fillRect(0,0,t,e),this.hitDetectionImage_=i.canvas}else this.hitDetectionImage_=this.image_;return this.hitDetectionImage_},e.prototype.getSize=function(){return this.size_},e.prototype.getSrc=function(){return this.src_},e.prototype.load=function(){if(this.imageState_==ni.Z.IDLE){this.imageState_=ni.Z.LOADING;try{this.image_.src=this.src_}catch(t){this.handleImageError_()}this.unlisten_=bn(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this))}},e.prototype.replaceColor_=function(t){if(this.color_&&!this.canvas_[t]){var e=document.createElement("canvas");this.canvas_[t]=e,e.width=Math.ceil(this.image_.width*t),e.height=Math.ceil(this.image_.height*t);var i=e.getContext("2d");if(i.scale(t,t),i.drawImage(this.image_,0,0),i.globalCompositeOperation="multiply","multiply"===i.globalCompositeOperation||this.isTainted_())i.fillStyle=(0,r.XC)(this.color_),i.fillRect(0,0,e.width,e.height),i.globalCompositeOperation="destination-in",i.drawImage(this.image_,0,0);else{for(var n=i.getImageData(0,0,e.width,e.height),o=n.data,s=this.color_[0]/255,a=this.color_[1]/255,l=this.color_[2]/255,h=this.color_[3],u=0,c=o.length;u<c;u+=4)o[u]*=s,o[u+1]*=a,o[u+2]*=l,o[u+3]*=h;i.putImageData(n,0,0)}}},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)},e}(ot.Z),Ln=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Mn=function(t){function e(e){var n=this,o=e||{},s=void 0!==o.opacity?o.opacity:1,a=void 0!==o.rotation?o.rotation:0,h=void 0!==o.scale?o.scale:1,u=void 0!==o.rotateWithView&&o.rotateWithView;(n=t.call(this,{opacity:s,rotation:a,scale:h,displacement:void 0!==o.displacement?o.displacement:[0,0],rotateWithView:u})||this).anchor_=void 0!==o.anchor?o.anchor:[.5,.5],n.normalizedAnchor_=null,n.anchorOrigin_=void 0!==o.anchorOrigin?o.anchorOrigin:En,n.anchorXUnits_=void 0!==o.anchorXUnits?o.anchorXUnits:yn,n.anchorYUnits_=void 0!==o.anchorYUnits?o.anchorYUnits:yn,n.crossOrigin_=void 0!==o.crossOrigin?o.crossOrigin:null;var c=void 0!==o.img?o.img:null,p=void 0!==o.imgSize?o.imgSize:null,f=o.src;(0,x.h)(!(void 0!==f&&c),4),(0,x.h)(!c||c&&p,5),void 0!==f&&0!==f.length||!c||(f=c.src||(0,i.sq)(c)),(0,x.h)(void 0!==f&&f.length>0,6);var d=void 0!==o.src?ni.Z.IDLE:ni.Z.LOADED;return n.color_=void 0!==o.color?(0,r._2)(o.color):null,n.iconImage_=function(t,e,i,n,o,r){var s=l.get(e,n,r);return s||(s=new Rn(t,e,i,n,o,r),l.set(e,n,r,s)),s}(c,f,p,n.crossOrigin_,d,n.color_),n.offset_=void 0!==o.offset?o.offset:[0,0],n.offsetOrigin_=void 0!==o.offsetOrigin?o.offsetOrigin:En,n.origin_=null,n.size_=void 0!==o.size?o.size:null,n}return Ln(e,t),e.prototype.clone=function(){var t=this.getScale();return new e({anchor:this.anchor_.slice(),anchorOrigin:this.anchorOrigin_,anchorXUnits:this.anchorXUnits_,anchorYUnits:this.anchorYUnits_,crossOrigin:this.crossOrigin_,color:this.color_&&this.color_.slice?this.color_.slice():this.color_||void 0,src:this.getSrc(),offset:this.offset_.slice(),offsetOrigin:this.offsetOrigin_,size:null!==this.size_?this.size_.slice():void 0,opacity:this.getOpacity(),scale:Array.isArray(t)?t.slice():t,rotation:this.getRotation(),rotateWithView:this.getRotateWithView()})},e.prototype.getAnchor=function(){if(this.normalizedAnchor_)return this.normalizedAnchor_;var t=this.anchor_,e=this.getSize();if(this.anchorXUnits_==yn||this.anchorYUnits_==yn){if(!e)return null;t=this.anchor_.slice(),this.anchorXUnits_==yn&&(t[0]*=e[0]),this.anchorYUnits_==yn&&(t[1]*=e[1])}if(this.anchorOrigin_!=En){if(!e)return null;t===this.anchor_&&(t=this.anchor_.slice()),this.anchorOrigin_!=Cn&&this.anchorOrigin_!=xn||(t[0]=-t[0]+e[0]),this.anchorOrigin_!=mn&&this.anchorOrigin_!=xn||(t[1]=-t[1]+e[1])}return this.normalizedAnchor_=t,this.normalizedAnchor_},e.prototype.setAnchor=function(t){this.anchor_=t,this.normalizedAnchor_=null},e.prototype.getColor=function(){return this.color_},e.prototype.getImage=function(t){return this.iconImage_.getImage(t)},e.prototype.getPixelRatio=function(t){return this.iconImage_.getPixelRatio(t)},e.prototype.getImageSize=function(){return this.iconImage_.getSize()},e.prototype.getHitDetectionImageSize=function(){return this.getImageSize()},e.prototype.getImageState=function(){return this.iconImage_.getImageState()},e.prototype.getHitDetectionImage=function(){return this.iconImage_.getHitDetectionImage()},e.prototype.getOrigin=function(){if(this.origin_)return this.origin_;var t=this.offset_,e=this.getDisplacement();if(this.offsetOrigin_!=En){var i=this.getSize(),n=this.iconImage_.getSize();if(!i||!n)return null;t=t.slice(),this.offsetOrigin_!=Cn&&this.offsetOrigin_!=xn||(t[0]=n[0]-i[0]-t[0]),this.offsetOrigin_!=mn&&this.offsetOrigin_!=xn||(t[1]=n[1]-i[1]-t[1])}return t[0]+=e[0],t[1]+=e[1],this.origin_=t,this.origin_},e.prototype.getSrc=function(){return this.iconImage_.getSrc()},e.prototype.getSize=function(){return this.size_?this.size_:this.iconImage_.getSize()},e.prototype.listenImageChange=function(t){this.iconImage_.addEventListener(w.Z.CHANGE,t)},e.prototype.load=function(){this.iconImage_.load()},e.prototype.unlistenImageChange=function(t){this.iconImage_.removeEventListener(w.Z.CHANGE,t)},e}(Sn.Z);var An={Point:function(t,e,i,n,o){var r,s=i.getImage(),a=i.getText();if(o&&(t=o,r=s&&a&&a.getText()?{}:void 0),s){if(s.getImageState()!=ni.Z.LOADED)return;var l=t.getBuilder(i.getZIndex(),Ui);l.setImageStyle(s,r),l.drawPoint(e,n)}if(a&&a.getText()){var h=t.getBuilder(i.getZIndex(),Ji);h.setTextStyle(a,r),h.drawText(e,n)}},LineString:function(t,e,i,n,o){var r=i.getStroke();if(r){var s=t.getBuilder(i.getZIndex(),qi);s.setFillStrokeStyle(null,r),s.drawLineString(e,n)}var a=i.getText();if(a&&a.getText()){var l=(o||t).getBuilder(i.getZIndex(),Ji);l.setTextStyle(a),l.drawText(e,n)}},Polygon:function(t,e,i,n,o){var r=i.getFill(),s=i.getStroke();if(r||s){var a=t.getBuilder(i.getZIndex(),Hi);a.setFillStrokeStyle(r,s),a.drawPolygon(e,n)}var l=i.getText();if(l&&l.getText()){var h=(o||t).getBuilder(i.getZIndex(),Ji);h.setTextStyle(l),h.drawText(e,n)}},MultiPoint:function(t,e,i,n,o){var r,s=i.getImage(),a=i.getText();if(o&&(t=o,r=s&&a&&a.getText()?{}:void 0),s){if(s.getImageState()!=ni.Z.LOADED)return;var l=t.getBuilder(i.getZIndex(),Ui);l.setImageStyle(s,r),l.drawMultiPoint(e,n)}if(a&&a.getText()){var h=(o||t).getBuilder(i.getZIndex(),Ji);h.setTextStyle(a,r),h.drawText(e,n)}},MultiLineString:function(t,e,i,n,o){var r=i.getStroke();if(r){var s=t.getBuilder(i.getZIndex(),qi);s.setFillStrokeStyle(null,r),s.drawMultiLineString(e,n)}var a=i.getText();if(a&&a.getText()){var l=(o||t).getBuilder(i.getZIndex(),Ji);l.setTextStyle(a),l.drawText(e,n)}},MultiPolygon:function(t,e,i,n,o){var r=i.getFill(),s=i.getStroke();if(s||r){var a=t.getBuilder(i.getZIndex(),Hi);a.setFillStrokeStyle(r,s),a.drawMultiPolygon(e,n)}var l=i.getText();if(l&&l.getText()){var h=(o||t).getBuilder(i.getZIndex(),Ji);h.setTextStyle(l),h.drawText(e,n)}},GeometryCollection:function(t,e,i,n,o){var r,s,a=e.getGeometriesArray();for(r=0,s=a.length;r<s;++r)(0,An[a[r].getType()])(t,a[r],i,n,o)},Circle:function(t,e,i,n,o){var r=i.getFill(),s=i.getStroke();if(r||s){var a=t.getBuilder(i.getZIndex(),Bi);a.setFillStrokeStyle(r,s),a.drawCircle(e,n)}var l=i.getText();if(l&&l.getText()){var h=(o||t).getBuilder(i.getZIndex(),Ji);h.setTextStyle(l),h.drawText(e,n)}}};function Fn(t,e){return parseInt((0,i.sq)(t),10)-parseInt((0,i.sq)(e),10)}function Zn(t,e){return.5*t/e}function Dn(t,e,i,n,o,r,s){var a=!1,l=i.getImage();if(l){var h=l.getImageState();h==ni.Z.LOADED||h==ni.Z.ERROR?l.unlistenImageChange(o):(h==ni.Z.IDLE&&l.load(),h=l.getImageState(),l.listenImageChange(o),a=!0)}return function(t,e,i,n,o,r){var s=i.getGeometryFunction()(e);if(s){var a=s.simplifyTransformed(n,o);i.getRenderer()?kn(t,a,i,e):(0,An[a.getType()])(t,a,i,e,r)}}(t,e,i,n,r,s),a}function kn(t,e,i,n){if(e.getType()!=mt.Z.GEOMETRY_COLLECTION)t.getBuilder(i.getZIndex(),Vi).drawCustom(e,n,i.getRenderer());else for(var o=e.getGeometries(),r=0,s=o.length;r<s;++r)kn(t,o[r],i,n)}var jn=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Nn=function(t){function e(e){var i=t.call(this,e)||this;return i.boundHandleStyleImageChange_=i.handleStyleImageChange_.bind(i),i.animatingOrInteracting_,i.dirty_=!1,i.hitDetectionImageData_=null,i.renderedFeatures_=null,i.renderedRevision_=-1,i.renderedResolution_=NaN,i.renderedExtent_=(0,o.lJ)(),i.renderedRotation_,i.renderedCenter_=null,i.renderedProjection_=null,i.renderedRenderOrder_=null,i.replayGroup_=null,i.replayGroupChanged=!0,i.declutterExecutorGroup=null,i.clipping=!0,i}return jn(e,t),e.prototype.useContainer=function(e,i,n){n<1&&(e=null),t.prototype.useContainer.call(this,e,i,n)},e.prototype.renderWorlds=function(t,e,i){var n=e.extent,r=e.viewState,s=r.center,a=r.resolution,l=r.projection,h=r.rotation,u=l.getExtent(),c=this.getLayer().getSource(),p=e.pixelRatio,f=e.viewHints,d=!(f[0]||f[1]),_=this.context,g=Math.round(e.size[0]*p),y=Math.round(e.size[1]*p),v=c.getWrapX()&&l.canWrapX(),m=v?(0,o.dz)(u):null,x=v?Math.ceil((n[2]-u[2])/m)+1:1,E=v?Math.floor((n[0]-u[0])/m):0;do{var C=this.getRenderTransform(s,a,h,p,g,y,E*m);t.execute(_,1,C,h,d,void 0,i)}while(++E<x)},e.prototype.renderDeclutter=function(t){this.declutterExecutorGroup&&this.renderWorlds(this.declutterExecutorGroup,t,t.declutterTree)},e.prototype.renderFrame=function(t,e){var i=t.pixelRatio,r=t.layerStatesArray[t.layerIndex];(0,n.n3)(this.pixelTransform,1/i,1/i),(0,n.nb)(this.inversePixelTransform,this.pixelTransform);var s=(0,n.BB)(this.pixelTransform);this.useContainer(e,s,r.opacity);var a=this.context,l=a.canvas,h=this.replayGroup_,u=this.declutterExecutorGroup;if((!h||h.isEmpty())&&(!u||u.isEmpty()))return!this.containerReused&&l.width>0&&(l.width=0),this.container;var c=Math.round(t.size[0]*i),p=Math.round(t.size[1]*i);l.width!=c||l.height!=p?(l.width=c,l.height=p,l.style.transform!==s&&(l.style.transform=s)):this.containerReused||a.clearRect(0,0,c,p),this.preRender(a,t);var f=t.viewState,d=f.projection,_=!1;if(r.extent&&this.clipping){var g=(0,Ot.dY)(r.extent,d);(_=!(0,o.r4)(g,t.extent)&&(0,o.kK)(g,t.extent))&&this.clipUnrotated(a,t,g)}this.renderWorlds(h,t),_&&a.restore(),this.postRender(a,t);var y=r.opacity,v=this.container;return y!==parseFloat(v.style.opacity)&&(v.style.opacity=1===y?"":String(y)),this.renderedRotation_!==f.rotation&&(this.renderedRotation_=f.rotation,this.hitDetectionImageData_=null),this.container},e.prototype.getFeatures=function(t){return new Promise(function(e){if(!this.hitDetectionImageData_&&!this.animatingOrInteracting_){var i=[this.context.canvas.width,this.context.canvas.height];(0,n.nn)(this.pixelTransform,i);var r=this.renderedCenter_,s=this.renderedResolution_,a=this.renderedRotation_,l=this.renderedProjection_,h=this.renderedExtent_,u=this.getLayer(),c=[],p=i[0]/2,f=i[1]/2;c.push(this.getRenderTransform(r,s,a,.5,p,f,0).slice());var d=u.getSource(),_=l.getExtent();if(d.getWrapX()&&l.canWrapX()&&!(0,o.r4)(_,h)){for(var g=h[0],y=(0,o.dz)(_),v=0,m=void 0;g<_[0];)m=y*--v,c.push(this.getRenderTransform(r,s,a,.5,p,f,m).slice()),g+=y;for(v=0,g=h[2];g>_[2];)m=y*++v,c.push(this.getRenderTransform(r,s,a,.5,p,f,m).slice()),g-=y}this.hitDetectionImageData_=function(t,e,i,n,r,s,a){var l=t[0]/2,h=t[1]/2,u=(0,B.E4)(l,h);u.imageSmoothingEnabled=!1;for(var c=u.canvas,p=new gn(u,.5,r,null,a),f=i.length,d=Math.floor(16777215/f),_={},g=1;g<=f;++g){var y=i[g-1],v=y.getStyleFunction()||n;if(n){var m=v(y,s);if(m){Array.isArray(m)||(m=[m]);for(var x="#"+("000000"+(g*d).toString(16)).slice(-6),E=0,C=m.length;E<C;++E){var S=m[E],O=S.clone(),w=O.getFill();w&&w.setColor(x);var T=O.getStroke();T&&T.setColor(x),O.setText(void 0);var b=S.getImage();if(b){var I=b.getImageSize();if(!I)continue;var P=document.createElement("canvas");P.width=I[0],P.height=I[1];var R=P.getContext("2d",{alpha:!1});R.fillStyle=x;var L=R.canvas;R.fillRect(0,0,L.width,L.height);var M=I?I[0]:L.width,A=I?I[1]:L.height;(0,B.E4)(M,A).drawImage(L,0,0),O.setImage(new Mn({img:L,imgSize:I,anchor:b.getAnchor(),anchorXUnits:vn,anchorYUnits:vn,offset:b.getOrigin(),size:b.getSize(),opacity:b.getOpacity(),scale:b.getScale(),rotation:b.getRotation(),rotateWithView:b.getRotateWithView()}))}var F=Number(O.getZIndex());(j=_[F])||(j={},_[F]=j,j[mt.Z.POLYGON]=[],j[mt.Z.CIRCLE]=[],j[mt.Z.LINE_STRING]=[],j[mt.Z.POINT]=[]);var Z=O.getGeometryFunction()(y);Z&&(0,o.kK)(r,Z.getExtent())&&j[Z.getType().replace("Multi","")].push(Z,O)}}}}for(var D=Object.keys(_).map(Number).sort(bt.kK),k=(g=0,D.length);g<k;++g){var j=_[D[g]];for(var N in j){var G=j[N];for(E=0,C=G.length;E<C;E+=2){p.setStyle(G[E+1]);for(var z=0,W=e.length;z<W;++z)p.setTransform(e[z]),p.drawGeometry(G[E])}}}return u.getImageData(0,0,c.width,c.height)}(i,c,this.renderedFeatures_,u.getStyleFunction(),h,s,a)}e(function(t,e,i){var n=[];if(i){var o=4*(Math.round(t[0]/2)+Math.round(t[1]/2)*i.width),r=i.data[o],s=i.data[o+1],a=i.data[o+2]+256*(s+256*r),l=Math.floor(16777215/e.length);a&&a%l==0&&n.push(e[a/l-1])}return n}(t,this.renderedFeatures_,this.hitDetectionImageData_))}.bind(this))},e.prototype.forEachFeatureAtCoordinate=function(t,e,n,o,r){var s=this;if(this.replayGroup_){var a,l=e.viewState.resolution,h=e.viewState.rotation,u=this.getLayer(),c={},p=function(t,e,n){var s=(0,i.sq)(t),a=c[s];if(a){if(!0!==a&&n<a.distanceSq){if(0===n)return c[s]=!0,r.splice(r.lastIndexOf(a),1),o(t,u,e);a.geometry=e,a.distanceSq=n}}else{if(0===n)return c[s]=!0,o(t,u,e);r.push(c[s]={feature:t,layer:u,geometry:e,distanceSq:n,callback:o})}},f=[this.replayGroup_];return this.declutterExecutorGroup&&f.push(this.declutterExecutorGroup),f.some((function(i){return a=i.forEachFeatureAtCoordinate(t,l,h,n,p,i===s.declutterExecutorGroup?e.declutterTree.all().map((function(t){return t.value})):null)})),a}},e.prototype.handleFontsChanged=function(){var t=this.getLayer();t.getVisible()&&this.replayGroup_&&t.changed()},e.prototype.handleStyleImageChange_=function(t){this.renderIfReadyAndVisible()},e.prototype.prepareFrame=function(t){var e=this.getLayer(),i=e.getSource();if(!i)return!1;var n=t.viewHints[0],r=t.viewHints[1],s=e.getUpdateWhileAnimating(),a=e.getUpdateWhileInteracting();if(!this.dirty_&&!s&&n||!a&&r)return this.animatingOrInteracting_=!0,!0;this.animatingOrInteracting_=!1;var l=t.extent,h=t.viewState,u=h.projection,c=h.resolution,p=t.pixelRatio,f=e.getRevision(),d=e.getRenderBuffer(),_=e.getRenderOrder();void 0===_&&(_=Fn);var g=h.center.slice(),y=(0,o.f3)(l,d*c),v=[y.slice()],m=u.getExtent();if(i.getWrapX()&&u.canWrapX()&&!(0,o.r4)(m,t.extent)){var x=(0,o.dz)(m),E=Math.max((0,o.dz)(y)/2,x);y[0]=m[0]-E,y[2]=m[2]+E,D(g,u);var C=(0,o.Cf)(v[0],u);C[0]<m[0]&&C[2]<m[2]?v.push([C[0]+x,C[1],C[2]+x,C[3]]):C[0]>m[0]&&C[2]>m[2]&&v.push([C[0]-x,C[1],C[2]-x,C[3]])}if(!this.dirty_&&this.renderedResolution_==c&&this.renderedRevision_==f&&this.renderedRenderOrder_==_&&(0,o.r4)(this.renderedExtent_,y))return this.replayGroupChanged=!1,!0;this.replayGroup_=null,this.dirty_=!1;var S,O=new Ki(Zn(c,p),y,c,p);this.getLayer().getDeclutter()&&(S=new Ki(Zn(c,p),y,c,p));var w,T=(0,Ot.Cs)();if(T){for(var b=0,I=v.length;b<I;++b)i.loadFeatures((0,Ot.Fj)(v[b],u),c,T);w=(0,Ot.WO)(T,u)}else for(b=0,I=v.length;b<I;++b)i.loadFeatures(v[b],c,u);var P=function(t,e){var i=Zn(t,e);return i*i}(c,p),R=function(t){var i,n=t.getStyleFunction()||e.getStyleFunction();if(n&&(i=n(t,c)),i){var o=this.renderFeature(t,P,i,O,w,S);this.dirty_=this.dirty_||o}}.bind(this),L=(0,Ot.Fj)(y,u),M=i.getFeaturesInExtent(L);for(_&&M.sort(_),b=0,I=M.length;b<I;++b)R(M[b]);this.renderedFeatures_=M;var A=O.finish(),F=new dn(y,c,p,i.getOverlaps(),A,e.getRenderBuffer());return S&&(this.declutterExecutorGroup=new dn(y,c,p,i.getOverlaps(),S.finish(),e.getRenderBuffer())),this.renderedResolution_=c,this.renderedRevision_=f,this.renderedRenderOrder_=_,this.renderedExtent_=y,this.renderedCenter_=g,this.renderedProjection_=u,this.replayGroup_=F,this.hitDetectionImageData_=null,this.replayGroupChanged=!0,!0},e.prototype.renderFeature=function(t,e,i,n,o,r){if(!i)return!1;var s=!1;if(Array.isArray(i))for(var a=0,l=i.length;a<l;++a)s=Dn(n,t,i[a],e,this.boundHandleStyleImageChange_,o,r)||s;else s=Dn(n,t,i,e,this.boundHandleStyleImageChange_,o,r);return s},e}(li);var Gn=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const zn=function(t){function e(e){return t.call(this,e)||this}return Gn(e,t),e.prototype.createRenderer=function(){return new Nn(this)},e}(Ci),Wn=function(){function t(t){this.rbush_=new(vi())(t),this.items_={}}return t.prototype.insert=function(t,e){var n={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3],value:e};this.rbush_.insert(n),this.items_[(0,i.sq)(e)]=n},t.prototype.load=function(t,e){for(var n=new Array(e.length),o=0,r=e.length;o<r;o++){var s=t[o],a=e[o],l={minX:s[0],minY:s[1],maxX:s[2],maxY:s[3],value:a};n[o]=l,this.items_[(0,i.sq)(a)]=l}this.rbush_.load(n)},t.prototype.remove=function(t){var e=(0,i.sq)(t),n=this.items_[e];return delete this.items_[e],null!==this.rbush_.remove(n)},t.prototype.update=function(t,e){var n=this.items_[(0,i.sq)(e)],r=[n.minX,n.minY,n.maxX,n.maxY];(0,o.fS)(r,t)||(this.remove(e),this.insert(t,e))},t.prototype.getAll=function(){return this.rbush_.all().map((function(t){return t.value}))},t.prototype.getInExtent=function(t){var e={minX:t[0],minY:t[1],maxX:t[2],maxY:t[3]};return this.rbush_.search(e).map((function(t){return t.value}))},t.prototype.forEach=function(t){return this.forEach_(this.getAll(),t)},t.prototype.forEachInExtent=function(t,e){return this.forEach_(this.getInExtent(t),e)},t.prototype.forEach_=function(t,e){for(var i,n=0,o=t.length;n<o;n++)if(i=e(t[n]))return i;return i},t.prototype.isEmpty=function(){return(0,E.xb)(this.items_)},t.prototype.clear=function(){this.rbush_.clear(),this.items_={}},t.prototype.getExtent=function(t){var e=this.rbush_.toJSON();return(0,o.T9)(e.minX,e.minY,e.maxX,e.maxY,t)},t.prototype.concat=function(t){for(var e in this.rbush_.load(t.rbush_.all()),t.items_)this.items_[e]=t.items_[e]},t}();var Yn=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function Xn(t){return t?Array.isArray(t)?function(e){return t}:"function"==typeof t?t:function(e){return[t]}:null}const Kn=function(t){function e(e){var i=t.call(this)||this;return i.projection_=(0,Ot.U2)(e.projection),i.attributions_=Xn(e.attributions),i.attributionsCollapsible_=void 0===e.attributionsCollapsible||e.attributionsCollapsible,i.loading=!1,i.state_=void 0!==e.state?e.state:P,i.wrapX_=void 0!==e.wrapX&&e.wrapX,i}return Yn(e,t),e.prototype.getAttributions=function(){return this.attributions_},e.prototype.getAttributionsCollapsible=function(){return this.attributionsCollapsible_},e.prototype.getProjection=function(){return this.projection_},e.prototype.getResolutions=function(){return(0,i.O3)()},e.prototype.getState=function(){return this.state_},e.prototype.getWrapX=function(){return this.wrapX_},e.prototype.getContextOptions=function(){},e.prototype.refresh=function(){this.changed()},e.prototype.setAttributions=function(t){this.attributions_=Xn(t),this.changed()},e.prototype.setState=function(t){this.state_=t,this.changed()},e}(h.ZP),Bn="addfeature",Vn="removefeature";function Un(t,e){return[[-1/0,-1/0,1/0,1/0]]}const qn="arraybuffer";function Hn(t,i){return function(n,o,r,s,a){var l=this;!function(t,e,i,n,o,r,s){var a=new XMLHttpRequest;a.open("GET","function"==typeof t?t(i,n,o):t,!0),e.getType()==qn&&(a.responseType="arraybuffer"),a.withCredentials=false,a.onload=function(t){if(!a.status||a.status>=200&&a.status<300){var n=e.getType(),l=void 0;"json"==n||"text"==n?l=a.responseText:"xml"==n?(l=a.responseXML)||(l=(new DOMParser).parseFromString(a.responseText,"application/xml")):n==qn&&(l=a.response),l?r(e.readFeatures(l,{extent:i,featureProjection:o}),e.readProjection(l)):s()}else s()},a.onerror=s,a.send()}(t,i,n,o,r,(function(t,e){void 0!==s&&s(t),l.addFeatures(t)}),a||e.Zn)}}var Jn=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),$n=function(t){function e(e,i,n){var o=t.call(this,e)||this;return o.feature=i,o.features=n,o}return Jn(e,t),e}(z.ZP);const Qn=function(t){function n(i){var n=this,o=i||{};(n=t.call(this,{attributions:o.attributions,projection:void 0,state:P,wrapX:void 0===o.wrapX||o.wrapX})||this).loader_=e.Zn,n.format_=o.format,n.overlaps_=void 0===o.overlaps||o.overlaps,n.url_=o.url,void 0!==o.loader?n.loader_=o.loader:void 0!==n.url_&&((0,x.h)(n.format_,7),n.loader_=Hn(n.url_,n.format_)),n.strategy_=void 0!==o.strategy?o.strategy:Un;var r,s,a=void 0===o.useSpatialIndex||o.useSpatialIndex;return n.featuresRtree_=a?new Wn:null,n.loadedExtentsRtree_=new Wn,n.nullGeometryFeatures_={},n.idIndex_={},n.uidIndex_={},n.featureChangeKeys_={},n.featuresCollection_=null,Array.isArray(o.features)?s=o.features:o.features&&(s=(r=o.features).getArray()),a||void 0!==r||(r=new q.Z(s)),void 0!==s&&n.addFeaturesInternal(s),void 0!==r&&n.bindFeaturesCollection_(r),n}return Jn(n,t),n.prototype.addFeature=function(t){this.addFeatureInternal(t),this.changed()},n.prototype.addFeatureInternal=function(t){var e=(0,i.sq)(t);if(this.addToIndex_(e,t)){this.setupChangeEvents_(e,t);var n=t.getGeometry();if(n){var o=n.getExtent();this.featuresRtree_&&this.featuresRtree_.insert(o,t)}else this.nullGeometryFeatures_[e]=t;this.dispatchEvent(new $n(Bn,t))}else this.featuresCollection_&&this.featuresCollection_.remove(t)},n.prototype.setupChangeEvents_=function(t,e){this.featureChangeKeys_[t]=[(0,R.oL)(e,w.Z.CHANGE,this.handleFeatureChange_,this),(0,R.oL)(e,G.Z.PROPERTYCHANGE,this.handleFeatureChange_,this)]},n.prototype.addToIndex_=function(t,e){var i=!0,n=e.getId();return void 0!==n&&(n.toString()in this.idIndex_?i=!1:this.idIndex_[n.toString()]=e),i&&((0,x.h)(!(t in this.uidIndex_),30),this.uidIndex_[t]=e),i},n.prototype.addFeatures=function(t){this.addFeaturesInternal(t),this.changed()},n.prototype.addFeaturesInternal=function(t){for(var e=[],n=[],o=[],r=0,s=t.length;r<s;r++){var a=t[r],l=(0,i.sq)(a);this.addToIndex_(l,a)&&n.push(a)}r=0;for(var h=n.length;r<h;r++){a=n[r],l=(0,i.sq)(a),this.setupChangeEvents_(l,a);var u=a.getGeometry();if(u){var c=u.getExtent();e.push(c),o.push(a)}else this.nullGeometryFeatures_[l]=a}this.featuresRtree_&&this.featuresRtree_.load(e,o),r=0;for(var p=n.length;r<p;r++)this.dispatchEvent(new $n(Bn,n[r]))},n.prototype.bindFeaturesCollection_=function(t){var e=!1;this.addEventListener(Bn,(function(i){e||(e=!0,t.push(i.feature),e=!1)})),this.addEventListener(Vn,(function(i){e||(e=!0,t.remove(i.feature),e=!1)})),t.addEventListener(H.Z.ADD,function(t){e||(e=!0,this.addFeature(t.element),e=!1)}.bind(this)),t.addEventListener(H.Z.REMOVE,function(t){e||(e=!0,this.removeFeature(t.element),e=!1)}.bind(this)),this.featuresCollection_=t},n.prototype.clear=function(t){if(t){for(var e in this.featureChangeKeys_)this.featureChangeKeys_[e].forEach(R.bN);this.featuresCollection_||(this.featureChangeKeys_={},this.idIndex_={},this.uidIndex_={})}else if(this.featuresRtree_)for(var i in this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this)),this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[i]);this.featuresCollection_&&this.featuresCollection_.clear(),this.featuresRtree_&&this.featuresRtree_.clear(),this.nullGeometryFeatures_={};var n=new $n("clear");this.dispatchEvent(n),this.changed()},n.prototype.forEachFeature=function(t){if(this.featuresRtree_)return this.featuresRtree_.forEach(t);this.featuresCollection_&&this.featuresCollection_.forEach(t)},n.prototype.forEachFeatureAtCoordinateDirect=function(t,e){var i=[t[0],t[1],t[0],t[1]];return this.forEachFeatureInExtent(i,(function(i){return i.getGeometry().intersectsCoordinate(t)?e(i):void 0}))},n.prototype.forEachFeatureInExtent=function(t,e){if(this.featuresRtree_)return this.featuresRtree_.forEachInExtent(t,e);this.featuresCollection_&&this.featuresCollection_.forEach(e)},n.prototype.forEachFeatureIntersectingExtent=function(t,e){return this.forEachFeatureInExtent(t,(function(i){if(i.getGeometry().intersectsExtent(t)){var n=e(i);if(n)return n}}))},n.prototype.getFeaturesCollection=function(){return this.featuresCollection_},n.prototype.getFeatures=function(){var t;return this.featuresCollection_?t=this.featuresCollection_.getArray():this.featuresRtree_&&(t=this.featuresRtree_.getAll(),(0,E.xb)(this.nullGeometryFeatures_)||(0,bt.l7)(t,(0,E.KX)(this.nullGeometryFeatures_))),t},n.prototype.getFeaturesAtCoordinate=function(t){var e=[];return this.forEachFeatureAtCoordinateDirect(t,(function(t){e.push(t)})),e},n.prototype.getFeaturesInExtent=function(t){return this.featuresRtree_?this.featuresRtree_.getInExtent(t):this.featuresCollection_?this.featuresCollection_.getArray():[]},n.prototype.getClosestFeatureToCoordinate=function(t,i){var n=t[0],o=t[1],r=null,s=[NaN,NaN],a=1/0,l=[-1/0,-1/0,1/0,1/0],h=i||e.uX;return this.featuresRtree_.forEachInExtent(l,(function(t){if(h(t)){var e=t.getGeometry(),i=a;if((a=e.closestPointXY(n,o,s,a))<i){r=t;var u=Math.sqrt(a);l[0]=n-u,l[1]=o-u,l[2]=n+u,l[3]=o+u}}})),r},n.prototype.getExtent=function(t){return this.featuresRtree_.getExtent(t)},n.prototype.getFeatureById=function(t){var e=this.idIndex_[t.toString()];return void 0!==e?e:null},n.prototype.getFeatureByUid=function(t){var e=this.uidIndex_[t];return void 0!==e?e:null},n.prototype.getFormat=function(){return this.format_},n.prototype.getOverlaps=function(){return this.overlaps_},n.prototype.getUrl=function(){return this.url_},n.prototype.handleFeatureChange_=function(t){var e=t.target,n=(0,i.sq)(e),o=e.getGeometry();if(o){var r=o.getExtent();n in this.nullGeometryFeatures_?(delete this.nullGeometryFeatures_[n],this.featuresRtree_&&this.featuresRtree_.insert(r,e)):this.featuresRtree_&&this.featuresRtree_.update(r,e)}else n in this.nullGeometryFeatures_||(this.featuresRtree_&&this.featuresRtree_.remove(e),this.nullGeometryFeatures_[n]=e);var s=e.getId();if(void 0!==s){var a=s.toString();this.idIndex_[a]!==e&&(this.removeFromIdIndex_(e),this.idIndex_[a]=e)}else this.removeFromIdIndex_(e),this.uidIndex_[n]=e;this.changed(),this.dispatchEvent(new $n("changefeature",e))},n.prototype.hasFeature=function(t){var e=t.getId();return void 0!==e?e in this.idIndex_:(0,i.sq)(t)in this.uidIndex_},n.prototype.isEmpty=function(){return this.featuresRtree_.isEmpty()&&(0,E.xb)(this.nullGeometryFeatures_)},n.prototype.loadFeatures=function(t,i,n){var r=this.loadedExtentsRtree_,s=this.strategy_(t,i);this.loading=!1;for(var a=function(t,a){var h=s[t];r.forEachInExtent(h,(function(t){return(0,o.r4)(t.extent,h)}))||(l.dispatchEvent(new $n("featuresloadstart")),l.loader_.call(l,h,i,n,function(t){this.dispatchEvent(new $n("featuresloadend",void 0,t))}.bind(l),function(){this.dispatchEvent(new $n("featuresloaderror"))}.bind(l)),r.insert(h,{extent:h.slice()}),l.loading=l.loader_!==e.Zn)},l=this,h=0,u=s.length;h<u;++h)a(h)},n.prototype.refresh=function(){this.clear(!0),this.loadedExtentsRtree_.clear(),t.prototype.refresh.call(this)},n.prototype.removeLoadedExtent=function(t){var e,i=this.loadedExtentsRtree_;i.forEachInExtent(t,(function(i){if((0,o.fS)(i.extent,t))return e=i,!0})),e&&i.remove(e)},n.prototype.removeFeature=function(t){var e=(0,i.sq)(t);e in this.nullGeometryFeatures_?delete this.nullGeometryFeatures_[e]:this.featuresRtree_&&this.featuresRtree_.remove(t),this.removeFeatureInternal(t),this.changed()},n.prototype.removeFeatureInternal=function(t){var e=(0,i.sq)(t);this.featureChangeKeys_[e].forEach(R.bN),delete this.featureChangeKeys_[e];var n=t.getId();void 0!==n&&delete this.idIndex_[n.toString()],delete this.uidIndex_[e],this.dispatchEvent(new $n(Vn,t))},n.prototype.removeFromIdIndex_=function(t){var e=!1;for(var i in this.idIndex_)if(this.idIndex_[i]===t){delete this.idIndex_[i],e=!0;break}return e},n.prototype.setLoader=function(t){this.loader_=t},n.prototype.setUrl=function(t){(0,x.h)(this.format_,7),this.setLoader(Hn(t,this.format_))},n}(Kn);var to=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const eo=function(t){function e(e,i,n){var o=t.call(this)||this,r=n||{};return o.tileCoord=e,o.state=i,o.interimTile=null,o.hifi=!0,o.key="",o.transition_=void 0===r.transition?250:r.transition,o.transitionStarts_={},o}return to(e,t),e.prototype.changed=function(){this.dispatchEvent(w.Z.CHANGE)},e.prototype.release=function(){},e.prototype.getKey=function(){return this.key+"/"+this.tileCoord},e.prototype.getInterimTile=function(){if(!this.interimTile)return this;var t=this.interimTile;do{if(2==t.getState())return this.transition_=0,t;t=t.interimTile}while(t);return this},e.prototype.refreshInterimChain=function(){if(this.interimTile){var t=this.interimTile,e=this;do{if(2==t.getState()){t.interimTile=null;break}1==t.getState()?e=t:0==t.getState()?e.interimTile=t.interimTile:e=t,t=e.interimTile}while(t)}},e.prototype.getTileCoord=function(){return this.tileCoord},e.prototype.getState=function(){return this.state},e.prototype.setState=function(t){if(3!==this.state&&this.state>t)throw new Error("Tile load sequence violation");this.state=t,this.changed()},e.prototype.load=function(){(0,i.O3)()},e.prototype.getAlpha=function(t,e){if(!this.transition_)return 1;var i=this.transitionStarts_[t];if(i){if(-1===i)return 1}else i=e,this.transitionStarts_[t]=i;var n=e-i+1e3/60;return n>=this.transition_?1:(0,At.YQ)(n/this.transition_)},e.prototype.inTransition=function(t){return!!this.transition_&&-1!==this.transitionStarts_[t]},e.prototype.endTransition=function(t){this.transition_&&(this.transitionStarts_[t]=-1)},e}(ot.Z);var io=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const no=function(t){function e(e,i,n,o,r,s){var a=t.call(this,e,i,s)||this;return a.crossOrigin_=o,a.src_=n,a.key=n,a.image_=new Image,null!==o&&(a.image_.crossOrigin=o),a.unlisten_=null,a.tileLoadFunction_=r,a}return io(e,t),e.prototype.getImage=function(){return this.image_},e.prototype.handleImageError_=function(){var t;this.state=3,this.unlistenImage_(),this.image_=((t=(0,B.E4)(1,1)).fillStyle="rgba(0,0,0,0)",t.fillRect(0,0,1,1),t.canvas),this.changed()},e.prototype.handleImageLoad_=function(){var t=this.image_;t.naturalWidth&&t.naturalHeight?this.state=2:this.state=4,this.unlistenImage_(),this.changed()},e.prototype.load=function(){3==this.state&&(this.state=0,this.image_=new Image,null!==this.crossOrigin_&&(this.image_.crossOrigin=this.crossOrigin_)),0==this.state&&(this.state=1,this.changed(),this.tileLoadFunction_(this,this.src_),this.unlisten_=bn(this.image_,this.handleImageLoad_.bind(this),this.handleImageError_.bind(this)))},e.prototype.unlistenImage_=function(){this.unlisten_&&(this.unlisten_(),this.unlisten_=null)},e}(eo),oo=function(){function t(t,e,i,n,r,s){this.sourceProj_=t,this.targetProj_=e;var a={},l=(0,Ot.Ck)(this.targetProj_,this.sourceProj_);this.transformInv_=function(t){var e=t[0]+"/"+t[1];return a[e]||(a[e]=l(t)),a[e]},this.maxSourceExtent_=n,this.errorThresholdSquared_=r*r,this.triangles_=[],this.wrapsXInSource_=!1,this.canWrapXInSource_=this.sourceProj_.canWrapX()&&!!n&&!!this.sourceProj_.getExtent()&&(0,o.dz)(n)==(0,o.dz)(this.sourceProj_.getExtent()),this.sourceWorldWidth_=this.sourceProj_.getExtent()?(0,o.dz)(this.sourceProj_.getExtent()):null,this.targetWorldWidth_=this.targetProj_.getExtent()?(0,o.dz)(this.targetProj_.getExtent()):null;var h=(0,o.rL)(i),u=(0,o.Xv)(i),c=(0,o.w$)(i),p=(0,o.hC)(i),f=this.transformInv_(h),d=this.transformInv_(u),_=this.transformInv_(c),g=this.transformInv_(p),y=10+(s?Math.max(0,Math.ceil((0,C.k3)((0,o.bg)(i)/(s*s*256*256)))):0);if(this.addQuad_(h,u,c,p,f,d,_,g,y),this.wrapsXInSource_){var v=1/0;this.triangles_.forEach((function(t,e,i){v=Math.min(v,t.source[0][0],t.source[1][0],t.source[2][0])})),this.triangles_.forEach(function(t){if(Math.max(t.source[0][0],t.source[1][0],t.source[2][0])-v>this.sourceWorldWidth_/2){var e=[[t.source[0][0],t.source[0][1]],[t.source[1][0],t.source[1][1]],[t.source[2][0],t.source[2][1]]];e[0][0]-v>this.sourceWorldWidth_/2&&(e[0][0]-=this.sourceWorldWidth_),e[1][0]-v>this.sourceWorldWidth_/2&&(e[1][0]-=this.sourceWorldWidth_),e[2][0]-v>this.sourceWorldWidth_/2&&(e[2][0]-=this.sourceWorldWidth_);var i=Math.min(e[0][0],e[1][0],e[2][0]);Math.max(e[0][0],e[1][0],e[2][0])-i<this.sourceWorldWidth_/2&&(t.source=e)}}.bind(this))}a={}}return t.prototype.addTriangle_=function(t,e,i,n,o,r){this.triangles_.push({source:[n,o,r],target:[t,e,i]})},t.prototype.addQuad_=function(t,e,i,n,r,s,a,l,h){var u=(0,o.hI)([r,s,a,l]),c=this.sourceWorldWidth_?(0,o.dz)(u)/this.sourceWorldWidth_:null,p=this.sourceWorldWidth_,f=this.sourceProj_.canWrapX()&&c>.5&&c<1,d=!1;if(h>0){if(this.targetProj_.isGlobal()&&this.targetWorldWidth_){var _=(0,o.hI)([t,e,i,n]);d=(0,o.dz)(_)/this.targetWorldWidth_>.25||d}!f&&this.sourceProj_.isGlobal()&&c&&(d=c>.25||d)}if(!(!d&&this.maxSourceExtent_&&isFinite(u[0])&&isFinite(u[1])&&isFinite(u[2])&&isFinite(u[3]))||(0,o.kK)(u,this.maxSourceExtent_)){var g=0;if(!(d||isFinite(r[0])&&isFinite(r[1])&&isFinite(s[0])&&isFinite(s[1])&&isFinite(a[0])&&isFinite(a[1])&&isFinite(l[0])&&isFinite(l[1])))if(h>0)d=!0;else if(1!=(g=(isFinite(r[0])&&isFinite(r[1])?0:8)+(isFinite(s[0])&&isFinite(s[1])?0:4)+(isFinite(a[0])&&isFinite(a[1])?0:2)+(isFinite(l[0])&&isFinite(l[1])?0:1))&&2!=g&&4!=g&&8!=g)return;if(h>0){if(!d){var y=[(t[0]+i[0])/2,(t[1]+i[1])/2],v=this.transformInv_(y),m=void 0;m=f?((0,C.$W)(r[0],p)+(0,C.$W)(a[0],p))/2-(0,C.$W)(v[0],p):(r[0]+a[0])/2-v[0];var x=(r[1]+a[1])/2-v[1];d=m*m+x*x>this.errorThresholdSquared_}if(d){if(Math.abs(t[0]-i[0])<=Math.abs(t[1]-i[1])){var E=[(e[0]+i[0])/2,(e[1]+i[1])/2],S=this.transformInv_(E),O=[(n[0]+t[0])/2,(n[1]+t[1])/2],w=this.transformInv_(O);this.addQuad_(t,e,E,O,r,s,S,w,h-1),this.addQuad_(O,E,i,n,w,S,a,l,h-1)}else{var T=[(t[0]+e[0])/2,(t[1]+e[1])/2],b=this.transformInv_(T),I=[(i[0]+n[0])/2,(i[1]+n[1])/2],P=this.transformInv_(I);this.addQuad_(t,T,I,n,r,b,P,l,h-1),this.addQuad_(T,e,i,I,b,s,a,P,h-1)}return}}if(f){if(!this.canWrapXInSource_)return;this.wrapsXInSource_=!0}0==(11&g)&&this.addTriangle_(t,i,n,r,a,l),0==(14&g)&&this.addTriangle_(t,i,e,r,a,s),g&&(0==(13&g)&&this.addTriangle_(e,n,t,s,l,r),0==(7&g)&&this.addTriangle_(e,n,i,s,l,a))}},t.prototype.calculateSourceExtent=function(){var t=(0,o.lJ)();return this.triangles_.forEach((function(e,i,n){var r=e.source;(0,o.Wj)(t,r[0]),(0,o.Wj)(t,r[1]),(0,o.Wj)(t,r[2])})),t},t.prototype.getTriangles=function(){return this.triangles_},t}();var ro,so={imageSmoothingEnabled:!1,msImageSmoothingEnabled:!1};function ao(t,e,i,n,o){t.beginPath(),t.moveTo(0,0),t.lineTo(e,i),t.lineTo(n,o),t.closePath(),t.save(),t.clip(),t.fillRect(0,0,Math.max(e,n)+1,Math.max(i,o)),t.restore()}function lo(t,e){return Math.abs(t[4*e]-210)>2||Math.abs(t[4*e+3]-191.25)>2}function ho(t,e,i,n){var r=(0,Ot.vs)(i,e,t),s=(0,Ot._Q)(e,n,i),a=e.getMetersPerUnit();void 0!==a&&(s*=a);var l=t.getMetersPerUnit();void 0!==l&&(s/=l);var h=t.getExtent();if(!h||(0,o.b8)(h,r)){var u=(0,Ot._Q)(t,s,r)/s;isFinite(u)&&u>0&&(s/=u)}return s}var uo=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const co=function(t){function e(e,i,n,r,s,a,l,h,u,c,p,f){var d=t.call(this,s,0)||this;d.renderEdges_=void 0!==p&&p,d.contextOptions_=f,d.pixelRatio_=l,d.gutter_=h,d.canvas_=null,d.sourceTileGrid_=i,d.targetTileGrid_=r,d.wrappedTileCoord_=a||s,d.sourceTiles_=[],d.sourcesListenerKeys_=null,d.sourceZ_=0;var _=r.getTileCoordExtent(d.wrappedTileCoord_),g=d.targetTileGrid_.getExtent(),y=d.sourceTileGrid_.getExtent(),v=g?(0,o.Ed)(_,g):_;if(0===(0,o.bg)(v))return d.state=4,d;var m=e.getExtent();m&&(y=y?(0,o.Ed)(y,m):m);var x=r.getResolution(d.wrappedTileCoord_[0]),E=function(t,e,i,n){var r=(0,o.qg)(i),s=ho(t,e,r,n);return(!isFinite(s)||s<=0)&&(0,o.H6)(i,(function(i){return s=ho(t,e,i,n),isFinite(s)&&s>0})),s}(e,n,v,x);if(!isFinite(E)||E<=0)return d.state=4,d;var S=void 0!==c?c:.5;if(d.triangulation_=new oo(e,n,v,y,E*S,x),0===d.triangulation_.getTriangles().length)return d.state=4,d;d.sourceZ_=i.getZForResolution(E);var O=d.triangulation_.calculateSourceExtent();if(y&&(e.canWrapX()?(O[1]=(0,C.uZ)(O[1],y[1],y[3]),O[3]=(0,C.uZ)(O[3],y[1],y[3])):O=(0,o.Ed)(O,y)),(0,o.bg)(O)){for(var w=i.getTileRangeForExtentAndZ(O,d.sourceZ_),T=w.minX;T<=w.maxX;T++)for(var b=w.minY;b<=w.maxY;b++){var I=u(d.sourceZ_,T,b,l);I&&d.sourceTiles_.push(I)}0===d.sourceTiles_.length&&(d.state=4)}else d.state=4;return d}return uo(e,t),e.prototype.getImage=function(){return this.canvas_},e.prototype.reproject_=function(){var t=[];if(this.sourceTiles_.forEach(function(e,i,n){e&&2==e.getState()&&t.push({extent:this.sourceTileGrid_.getTileCoordExtent(e.tileCoord),image:e.getImage()})}.bind(this)),this.sourceTiles_.length=0,0===t.length)this.state=3;else{var e=this.wrappedTileCoord_[0],i=this.targetTileGrid_.getTileSize(e),n="number"==typeof i?i:i[0],r="number"==typeof i?i:i[1],s=this.targetTileGrid_.getResolution(e),a=this.sourceTileGrid_.getResolution(this.sourceZ_),l=this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);this.canvas_=function(t,e,i,n,r,s,a,l,h,u,c,p){var f=(0,B.E4)(Math.round(i*t),Math.round(i*e));if((0,E.f0)(f,p),0===h.length)return f.canvas;function d(t){return Math.round(t*i)/i}f.scale(i,i),f.globalCompositeOperation="lighter";var _=(0,o.lJ)();h.forEach((function(t,e,i){(0,o.l7)(_,t.extent)}));var g=(0,o.dz)(_),y=(0,o.Cr)(_),v=(0,B.E4)(Math.round(i*g/n),Math.round(i*y/n));(0,E.f0)(v,p);var m=i/n;h.forEach((function(t,e,i){var n=t.extent[0]-_[0],r=-(t.extent[3]-_[3]),s=(0,o.dz)(t.extent),a=(0,o.Cr)(t.extent);t.image.width>0&&t.image.height>0&&v.drawImage(t.image,u,u,t.image.width-2*u,t.image.height-2*u,n*m,r*m,s*m,a*m)}));var x=(0,o.rL)(a);return l.getTriangles().forEach((function(t,e,o){var r=t.source,a=t.target,l=r[0][0],h=r[0][1],u=r[1][0],c=r[1][1],g=r[2][0],y=r[2][1],m=d((a[0][0]-x[0])/s),E=d(-(a[0][1]-x[1])/s),S=d((a[1][0]-x[0])/s),O=d(-(a[1][1]-x[1])/s),w=d((a[2][0]-x[0])/s),T=d(-(a[2][1]-x[1])/s),b=l,I=h;l=0,h=0;var P=[[u-=b,c-=I,0,0,S-m],[g-=b,y-=I,0,0,w-m],[0,0,u,c,O-E],[0,0,g,y,T-E]],R=(0,C.SV)(P);if(R){if(f.save(),f.beginPath(),function(){if(void 0===ro){var t=document.createElement("canvas").getContext("2d");t.globalCompositeOperation="lighter",t.fillStyle="rgba(210, 0, 0, 0.75)",ao(t,4,5,4,0),ao(t,4,5,0,5);var e=t.getImageData(0,0,3,3).data;ro=lo(e,0)||lo(e,4)||lo(e,8)}return ro}()||p===so){f.moveTo(S,O);for(var L=m-S,M=E-O,A=0;A<4;A++)f.lineTo(S+d((A+1)*L/4),O+d(A*M/3)),3!=A&&f.lineTo(S+d((A+1)*L/4),O+d((A+1)*M/3));f.lineTo(w,T)}else f.moveTo(S,O),f.lineTo(m,E),f.lineTo(w,T);f.clip(),f.transform(R[0],R[2],R[1],R[3],m,E),f.translate(_[0]-b,_[3]-I),f.scale(n/i,-n/i),f.drawImage(v.canvas,0,0),f.restore()}})),c&&(f.save(),f.globalCompositeOperation="source-over",f.strokeStyle="black",f.lineWidth=1,l.getTriangles().forEach((function(t,e,i){var n=t.target,o=(n[0][0]-x[0])/s,r=-(n[0][1]-x[1])/s,a=(n[1][0]-x[0])/s,l=-(n[1][1]-x[1])/s,h=(n[2][0]-x[0])/s,u=-(n[2][1]-x[1])/s;f.beginPath(),f.moveTo(a,l),f.lineTo(o,r),f.lineTo(h,u),f.closePath(),f.stroke()})),f.restore()),f.canvas}(n,r,this.pixelRatio_,a,this.sourceTileGrid_.getExtent(),s,l,this.triangulation_,t,this.gutter_,this.renderEdges_,this.contextOptions_),this.state=2}this.changed()},e.prototype.load=function(){if(0==this.state){this.state=1,this.changed();var t=0;this.sourcesListenerKeys_=[],this.sourceTiles_.forEach(function(e,i,n){var o=e.getState();if(0==o||1==o){t++;var r=(0,R.oL)(e,w.Z.CHANGE,(function(i){var n=e.getState();2!=n&&3!=n&&4!=n||((0,R.bN)(r),0==--t&&(this.unlistenSources_(),this.reproject_()))}),this);this.sourcesListenerKeys_.push(r)}}.bind(this)),this.sourceTiles_.forEach((function(t,e,i){0==t.getState()&&t.load()})),0===t&&setTimeout(this.reproject_.bind(this),0)}},e.prototype.unlistenSources_=function(){this.sourcesListenerKeys_.forEach(R.bN),this.sourcesListenerKeys_=null},e}(eo),po=function(){function t(t){this.highWaterMark=void 0!==t?t:2048,this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null}return t.prototype.canExpireCache=function(){return this.highWaterMark>0&&this.getCount()>this.highWaterMark},t.prototype.clear=function(){this.count_=0,this.entries_={},this.oldest_=null,this.newest_=null},t.prototype.containsKey=function(t){return this.entries_.hasOwnProperty(t)},t.prototype.forEach=function(t){for(var e=this.oldest_;e;)t(e.value_,e.key_,this),e=e.newer},t.prototype.get=function(t,e){var i=this.entries_[t];return(0,x.h)(void 0!==i,15),i===this.newest_||(i===this.oldest_?(this.oldest_=this.oldest_.newer,this.oldest_.older=null):(i.newer.older=i.older,i.older.newer=i.newer),i.newer=null,i.older=this.newest_,this.newest_.newer=i,this.newest_=i),i.value_},t.prototype.remove=function(t){var e=this.entries_[t];return(0,x.h)(void 0!==e,15),e===this.newest_?(this.newest_=e.older,this.newest_&&(this.newest_.newer=null)):e===this.oldest_?(this.oldest_=e.newer,this.oldest_&&(this.oldest_.older=null)):(e.newer.older=e.older,e.older.newer=e.newer),delete this.entries_[t],--this.count_,e.value_},t.prototype.getCount=function(){return this.count_},t.prototype.getKeys=function(){var t,e=new Array(this.count_),i=0;for(t=this.newest_;t;t=t.older)e[i++]=t.key_;return e},t.prototype.getValues=function(){var t,e=new Array(this.count_),i=0;for(t=this.newest_;t;t=t.older)e[i++]=t.value_;return e},t.prototype.peekLast=function(){return this.oldest_.value_},t.prototype.peekLastKey=function(){return this.oldest_.key_},t.prototype.peekFirstKey=function(){return this.newest_.key_},t.prototype.pop=function(){var t=this.oldest_;return delete this.entries_[t.key_],t.newer&&(t.newer.older=null),this.oldest_=t.newer,this.oldest_||(this.newest_=null),--this.count_,t.value_},t.prototype.replace=function(t,e){this.get(t),this.entries_[t].value_=e},t.prototype.set=function(t,e){(0,x.h)(!(t in this.entries_),16);var i={key_:t,newer:null,older:this.newest_,value_:e};this.newest_?this.newest_.newer=i:this.oldest_=i,this.newest_=i,this.entries_[t]=i,++this.count_},t.prototype.setSize=function(t){this.highWaterMark=t},t}();function fo(t,e,i,n){return void 0!==n?(n[0]=t,n[1]=e,n[2]=i,n):[t,e,i]}function _o(t,e,i){return t+"/"+e+"/"+i}function go(t){return _o(t[0],t[1],t[2])}var yo=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const vo=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return yo(e,t),e.prototype.expireCache=function(t){for(;this.canExpireCache()&&!(this.peekLast().getKey()in t);)this.pop().release()},e.prototype.pruneExceptNewestZ=function(){if(0!==this.getCount()){var t=(e=this.peekFirstKey(),e.split("/").map(Number))[0];this.forEach(function(e){e.tileCoord[0]!==t&&(this.remove(go(e.tileCoord)),e.release())}.bind(this))}var e},e}(po);var mo=s(1748),xo=[0,0,0];const Eo=function(){function t(t){var e;if(this.minZoom=void 0!==t.minZoom?t.minZoom:0,this.resolutions_=t.resolutions,(0,x.h)((0,bt.pT)(this.resolutions_,(function(t,e){return e-t}),!0),17),!t.origins)for(var i=0,n=this.resolutions_.length-1;i<n;++i)if(e){if(this.resolutions_[i]/this.resolutions_[i+1]!==e){e=void 0;break}}else e=this.resolutions_[i]/this.resolutions_[i+1];this.zoomFactor_=e,this.maxZoom=this.resolutions_.length-1,this.origin_=void 0!==t.origin?t.origin:null,this.origins_=null,void 0!==t.origins&&(this.origins_=t.origins,(0,x.h)(this.origins_.length==this.resolutions_.length,20));var r=t.extent;void 0===r||this.origin_||this.origins_||(this.origin_=(0,o.rL)(r)),(0,x.h)(!this.origin_&&this.origins_||this.origin_&&!this.origins_,18),this.tileSizes_=null,void 0!==t.tileSizes&&(this.tileSizes_=t.tileSizes,(0,x.h)(this.tileSizes_.length==this.resolutions_.length,19)),this.tileSize_=void 0!==t.tileSize?t.tileSize:this.tileSizes_?null:256,(0,x.h)(!this.tileSize_&&this.tileSizes_||this.tileSize_&&!this.tileSizes_,22),this.extent_=void 0!==r?r:null,this.fullTileRanges_=null,this.tmpSize_=[0,0],void 0!==t.sizes?this.fullTileRanges_=t.sizes.map((function(t,e){var i=new ci(Math.min(0,t[0]),Math.max(t[0]-1,-1),Math.min(0,t[1]),Math.max(t[1]-1,-1));if(r){var n=this.getTileRangeForExtentAndZ(r,e);i.minX=Math.max(n.minX,i.minX),i.maxX=Math.min(n.maxX,i.maxX),i.minY=Math.max(n.minY,i.minY),i.maxY=Math.min(n.maxY,i.maxY)}return i}),this):r&&this.calculateTileRanges_(r)}return t.prototype.forEachTileCoord=function(t,e,i){for(var n=this.getTileRangeForExtentAndZ(t,e),o=n.minX,r=n.maxX;o<=r;++o)for(var s=n.minY,a=n.maxY;s<=a;++s)i([e,o,s])},t.prototype.forEachTileCoordParentTileRange=function(t,e,i,n){var o,r,s=null,a=t[0]-1;for(2===this.zoomFactor_?(o=t[1],r=t[2]):s=this.getTileCoordExtent(t,n);a>=this.minZoom;){if(e(a,2===this.zoomFactor_?ui(o=Math.floor(o/2),o,r=Math.floor(r/2),r,i):this.getTileRangeForExtentAndZ(s,a,i)))return!0;--a}return!1},t.prototype.getExtent=function(){return this.extent_},t.prototype.getMaxZoom=function(){return this.maxZoom},t.prototype.getMinZoom=function(){return this.minZoom},t.prototype.getOrigin=function(t){return this.origin_?this.origin_:this.origins_[t]},t.prototype.getResolution=function(t){return this.resolutions_[t]},t.prototype.getResolutions=function(){return this.resolutions_},t.prototype.getTileCoordChildTileRange=function(t,e,i){if(t[0]<this.maxZoom){if(2===this.zoomFactor_){var n=2*t[1],o=2*t[2];return ui(n,n+1,o,o+1,e)}var r=this.getTileCoordExtent(t,i);return this.getTileRangeForExtentAndZ(r,t[0]+1,e)}return null},t.prototype.getTileRangeExtent=function(t,e,i){var n=this.getOrigin(t),r=this.getResolution(t),s=(0,ce.Pq)(this.getTileSize(t),this.tmpSize_),a=n[0]+e.minX*s[0]*r,l=n[0]+(e.maxX+1)*s[0]*r,h=n[1]+e.minY*s[1]*r,u=n[1]+(e.maxY+1)*s[1]*r;return(0,o.T9)(a,h,l,u,i)},t.prototype.getTileRangeForExtentAndZ=function(t,e,i){var n=xo;this.getTileCoordForXYAndZ_(t[0],t[3],e,!1,n);var o=n[1],r=n[2];return this.getTileCoordForXYAndZ_(t[2],t[1],e,!0,n),ui(o,n[1],r,n[2],i)},t.prototype.getTileCoordCenter=function(t){var e=this.getOrigin(t[0]),i=this.getResolution(t[0]),n=(0,ce.Pq)(this.getTileSize(t[0]),this.tmpSize_);return[e[0]+(t[1]+.5)*n[0]*i,e[1]-(t[2]+.5)*n[1]*i]},t.prototype.getTileCoordExtent=function(t,e){var i=this.getOrigin(t[0]),n=this.getResolution(t[0]),r=(0,ce.Pq)(this.getTileSize(t[0]),this.tmpSize_),s=i[0]+t[1]*r[0]*n,a=i[1]-(t[2]+1)*r[1]*n,l=s+r[0]*n,h=a+r[1]*n;return(0,o.T9)(s,a,l,h,e)},t.prototype.getTileCoordForCoordAndResolution=function(t,e,i){return this.getTileCoordForXYAndResolution_(t[0],t[1],e,!1,i)},t.prototype.getTileCoordForXYAndResolution_=function(t,e,i,n,o){var r=this.getZForResolution(i),s=i/this.getResolution(r),a=this.getOrigin(r),l=(0,ce.Pq)(this.getTileSize(r),this.tmpSize_),h=n?.5:0,u=n?.5:0,c=Math.floor((t-a[0])/i+h),p=Math.floor((a[1]-e)/i+u),f=s*c/l[0],d=s*p/l[1];return n?(f=Math.ceil(f)-1,d=Math.ceil(d)-1):(f=Math.floor(f),d=Math.floor(d)),fo(r,f,d,o)},t.prototype.getTileCoordForXYAndZ_=function(t,e,i,n,o){var r=this.getOrigin(i),s=this.getResolution(i),a=(0,ce.Pq)(this.getTileSize(i),this.tmpSize_),l=n?.5:0,h=n?.5:0,u=Math.floor((t-r[0])/s+l),c=Math.floor((r[1]-e)/s+h),p=u/a[0],f=c/a[1];return n?(p=Math.ceil(p)-1,f=Math.ceil(f)-1):(p=Math.floor(p),f=Math.floor(f)),fo(i,p,f,o)},t.prototype.getTileCoordForCoordAndZ=function(t,e,i){return this.getTileCoordForXYAndZ_(t[0],t[1],e,!1,i)},t.prototype.getTileCoordResolution=function(t){return this.resolutions_[t[0]]},t.prototype.getTileSize=function(t){return this.tileSize_?this.tileSize_:this.tileSizes_[t]},t.prototype.getFullTileRange=function(t){return this.fullTileRanges_?this.fullTileRanges_[t]:this.extent_?this.getTileRangeForExtentAndZ(this.extent_,t):null},t.prototype.getZForResolution=function(t,e){var i=(0,bt.h7)(this.resolutions_,t,e||0);return(0,C.uZ)(i,this.minZoom,this.maxZoom)},t.prototype.calculateTileRanges_=function(t){for(var e=this.resolutions_.length,i=new Array(e),n=this.minZoom;n<e;++n)i[n]=this.getTileRangeForExtentAndZ(t,n);this.fullTileRanges_=i},t}();function Co(t){var e=t.getDefaultTileGrid();return e||(e=function(t,e,i,n){return function(t,e,i,n){var r=mo.Z.TOP_LEFT,s=So(t,undefined,i);return new Eo({extent:t,origin:(0,o.g0)(t,r),resolutions:s,tileSize:i})}(Oo(t),0,void 0)}(t),t.setDefaultTileGrid(e)),e}function So(t,e,i,n){for(var r=void 0!==e?e:42,s=(0,o.Cr)(t),a=(0,o.dz)(t),l=(0,ce.Pq)(void 0!==i?i:256),h=n>0?n:Math.max(a/l[0],s/l[1]),u=r+1,c=new Array(u),p=0;p<u;++p)c[p]=h/Math.pow(2,p);return c}function Oo(t){var e=(t=(0,Ot.U2)(t)).getExtent();if(!e){var i=180*Ot.Wm[xt.Z.DEGREES]/t.getMetersPerUnit();e=(0,o.T9)(-i,-i,i,i)}return e}var wo=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),To=function(t){function e(e){var i=t.call(this,{attributions:e.attributions,attributionsCollapsible:e.attributionsCollapsible,projection:e.projection,state:e.state,wrapX:e.wrapX})||this;i.opaque_=void 0!==e.opaque&&e.opaque,i.tilePixelRatio_=void 0!==e.tilePixelRatio?e.tilePixelRatio:1,i.tileGrid=void 0!==e.tileGrid?e.tileGrid:null;var n=e.tileGrid;return n&&(0,ce.Pq)(n.getTileSize(n.getMinZoom()),[256,256]),i.tileCache=new vo(e.cacheSize||0),i.tmpSize=[0,0],i.key_=e.key||"",i.tileOptions={transition:e.transition},i.zDirection=e.zDirection?e.zDirection:0,i}return wo(e,t),e.prototype.canExpireCache=function(){return this.tileCache.canExpireCache()},e.prototype.expireCache=function(t,e){var i=this.getTileCacheForProjection(t);i&&i.expireCache(e)},e.prototype.forEachLoadedTile=function(t,e,i,n){var o=this.getTileCacheForProjection(t);if(!o)return!1;for(var r,s,a,l=!0,h=i.minX;h<=i.maxX;++h)for(var u=i.minY;u<=i.maxY;++u)s=_o(e,h,u),a=!1,o.containsKey(s)&&(a=2===(r=o.get(s)).getState())&&(a=!1!==n(r)),a||(l=!1);return l},e.prototype.getGutterForProjection=function(t){return 0},e.prototype.getKey=function(){return this.key_},e.prototype.setKey=function(t){this.key_!==t&&(this.key_=t,this.changed())},e.prototype.getOpaque=function(t){return this.opaque_},e.prototype.getResolutions=function(){return this.tileGrid.getResolutions()},e.prototype.getTile=function(t,e,n,o,r){return(0,i.O3)()},e.prototype.getTileGrid=function(){return this.tileGrid},e.prototype.getTileGridForProjection=function(t){return this.tileGrid?this.tileGrid:Co(t)},e.prototype.getTileCacheForProjection=function(t){return(0,x.h)((0,Ot.OP)(this.getProjection(),t),68),this.tileCache},e.prototype.getTilePixelRatio=function(t){return this.tilePixelRatio_},e.prototype.getTilePixelSize=function(t,e,i){var n=this.getTileGridForProjection(i),o=this.getTilePixelRatio(e),r=(0,ce.Pq)(n.getTileSize(t),this.tmpSize);return 1==o?r:(0,ce.bA)(r,o,this.tmpSize)},e.prototype.getTileCoordForTileUrlFunction=function(t,e){var i=void 0!==e?e:this.getProjection(),n=this.getTileGridForProjection(i);return this.getWrapX()&&i.isGlobal()&&(t=function(t,e,i){var n=e[0],r=t.getTileCoordCenter(e),s=Oo(i);if((0,o.b8)(s,r))return e;var a=(0,o.dz)(s),l=Math.ceil((s[0]-r[0])/a);return r[0]+=a*l,t.getTileCoordForCoordAndZ(r,n)}(n,t,i)),function(t,e){var i=t[0],n=t[1],o=t[2];if(e.getMinZoom()>i||i>e.getMaxZoom())return!1;var r=e.getFullTileRange(i);return!r||r.containsXY(n,o)}(t,n)?t:null},e.prototype.clear=function(){this.tileCache.clear()},e.prototype.refresh=function(){this.clear(),t.prototype.refresh.call(this)},e.prototype.updateCacheSize=function(t,e){var i=this.getTileCacheForProjection(e);t>i.highWaterMark&&(i.highWaterMark=t)},e.prototype.useTile=function(t,e,i,n){},e}(Kn),bo=function(t){function e(e,i){var n=t.call(this,e)||this;return n.tile=i,n}return wo(e,t),e}(z.ZP);const Io=To;function Po(t,e){var i=/\{z\}/g,n=/\{x\}/g,o=/\{y\}/g,r=/\{-y\}/g;return function(s,a,l){return s?t.replace(i,s[0].toString()).replace(n,s[1].toString()).replace(o,s[2].toString()).replace(r,(function(){var t=s[0],i=e.getFullTileRange(t);return(0,x.h)(i,55),(i.getHeight()-s[2]-1).toString()})):void 0}}var Ro=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Lo=function(t){function e(i){var n=t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,opaque:i.opaque,projection:i.projection,state:i.state,tileGrid:i.tileGrid,tilePixelRatio:i.tilePixelRatio,wrapX:i.wrapX,transition:i.transition,key:i.key,attributionsCollapsible:i.attributionsCollapsible,zDirection:i.zDirection})||this;return n.generateTileUrlFunction_=n.tileUrlFunction===e.prototype.tileUrlFunction,n.tileLoadFunction=i.tileLoadFunction,i.tileUrlFunction&&(n.tileUrlFunction=i.tileUrlFunction),n.urls=null,i.urls?n.setUrls(i.urls):i.url&&n.setUrl(i.url),n.tileLoadingKeys_={},n}return Ro(e,t),e.prototype.getTileLoadFunction=function(){return this.tileLoadFunction},e.prototype.getTileUrlFunction=function(){return Object.getPrototypeOf(this).tileUrlFunction===this.tileUrlFunction?this.tileUrlFunction.bind(this):this.tileUrlFunction},e.prototype.getUrls=function(){return this.urls},e.prototype.handleTileChange=function(t){var e,n=t.target,o=(0,i.sq)(n),r=n.getState();1==r?(this.tileLoadingKeys_[o]=!0,e="tileloadstart"):o in this.tileLoadingKeys_&&(delete this.tileLoadingKeys_[o],e=3==r?"tileloaderror":2==r?"tileloadend":void 0),null!=e&&this.dispatchEvent(new bo(e,n))},e.prototype.setTileLoadFunction=function(t){this.tileCache.clear(),this.tileLoadFunction=t,this.changed()},e.prototype.setTileUrlFunction=function(t,e){this.tileUrlFunction=t,this.tileCache.pruneExceptNewestZ(),void 0!==e?this.setKey(e):this.changed()},e.prototype.setUrl=function(t){var e=function(t){var e=[],i=/\{([a-z])-([a-z])\}/.exec(t);if(i){var n=i[1].charCodeAt(0),o=i[2].charCodeAt(0),r=void 0;for(r=n;r<=o;++r)e.push(t.replace(i[0],String.fromCharCode(r)));return e}if(i=/\{(\d+)-(\d+)\}/.exec(t)){for(var s=parseInt(i[2],10),a=parseInt(i[1],10);a<=s;a++)e.push(t.replace(i[0],a.toString()));return e}return e.push(t),e}(t);this.urls=e,this.setUrls(e)},e.prototype.setUrls=function(t){this.urls=t;var e=t.join("\n");this.generateTileUrlFunction_?this.setTileUrlFunction(function(t,e){for(var i=t.length,n=new Array(i),o=0;o<i;++o)n[o]=Po(t[o],e);return function(t){return 1===t.length?t[0]:function(e,i,n){if(e){var o=function(t){return(t[1]<<t[0])+t[2]}(e),r=(0,C.$W)(o,t.length);return t[r](e,i,n)}}}(n)}(t,this.tileGrid),e):this.setKey(e)},e.prototype.tileUrlFunction=function(t,e,i){},e.prototype.useTile=function(t,e,i){var n=_o(t,e,i);this.tileCache.containsKey(n)&&this.tileCache.get(n)},e}(Io);var Mo=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();function Ao(t,e){t.getImage().src=e}const Fo=function(t){function e(e){var i=t.call(this,{attributions:e.attributions,cacheSize:e.cacheSize,opaque:e.opaque,projection:e.projection,state:e.state,tileGrid:e.tileGrid,tileLoadFunction:e.tileLoadFunction?e.tileLoadFunction:Ao,tilePixelRatio:e.tilePixelRatio,tileUrlFunction:e.tileUrlFunction,url:e.url,urls:e.urls,wrapX:e.wrapX,transition:e.transition,key:e.key,attributionsCollapsible:e.attributionsCollapsible,zDirection:e.zDirection})||this;return i.crossOrigin=void 0!==e.crossOrigin?e.crossOrigin:null,i.tileClass=void 0!==e.tileClass?e.tileClass:no,i.tileCacheForProjection={},i.tileGridForProjection={},i.reprojectionErrorThreshold_=e.reprojectionErrorThreshold,i.contextOptions_=!1===e.imageSmoothing?so:void 0,i.renderReprojectionEdges_=!1,i}return Mo(e,t),e.prototype.canExpireCache=function(){if(this.tileCache.canExpireCache())return!0;for(var t in this.tileCacheForProjection)if(this.tileCacheForProjection[t].canExpireCache())return!0;return!1},e.prototype.expireCache=function(t,e){var i=this.getTileCacheForProjection(t);for(var n in this.tileCache.expireCache(this.tileCache==i?e:{}),this.tileCacheForProjection){var o=this.tileCacheForProjection[n];o.expireCache(o==i?e:{})}},e.prototype.getContextOptions=function(){return this.contextOptions_},e.prototype.getGutterForProjection=function(t){return this.getProjection()&&t&&!(0,Ot.OP)(this.getProjection(),t)?0:this.getGutter()},e.prototype.getGutter=function(){return 0},e.prototype.getKey=function(){return t.prototype.getKey.call(this)+(this.contextOptions_?"\n"+JSON.stringify(this.contextOptions_):"")},e.prototype.getOpaque=function(e){return!(this.getProjection()&&e&&!(0,Ot.OP)(this.getProjection(),e))&&t.prototype.getOpaque.call(this,e)},e.prototype.getTileGridForProjection=function(t){var e=this.getProjection();if(!this.tileGrid||e&&!(0,Ot.OP)(e,t)){var n=(0,i.sq)(t);return n in this.tileGridForProjection||(this.tileGridForProjection[n]=Co(t)),this.tileGridForProjection[n]}return this.tileGrid},e.prototype.getTileCacheForProjection=function(t){var e=this.getProjection();if(!e||(0,Ot.OP)(e,t))return this.tileCache;var n=(0,i.sq)(t);return n in this.tileCacheForProjection||(this.tileCacheForProjection[n]=new vo(this.tileCache.highWaterMark)),this.tileCacheForProjection[n]},e.prototype.createTile_=function(t,e,i,n,o,r){var s=[t,e,i],a=this.getTileCoordForTileUrlFunction(s,o),l=a?this.tileUrlFunction(a,n,o):void 0,h=new this.tileClass(s,void 0!==l?0:4,void 0!==l?l:"",this.crossOrigin,this.tileLoadFunction,this.tileOptions);return h.key=r,h.addEventListener(w.Z.CHANGE,this.handleTileChange.bind(this)),h},e.prototype.getTile=function(t,e,i,n,o){var r=this.getProjection();if(r&&o&&!(0,Ot.OP)(r,o)){var s=this.getTileCacheForProjection(o),a=[t,e,i],l=void 0,h=go(a);s.containsKey(h)&&(l=s.get(h));var u=this.getKey();if(l&&l.key==u)return l;var c=this.getTileGridForProjection(r),p=this.getTileGridForProjection(o),f=this.getTileCoordForTileUrlFunction(a,o),d=new co(r,c,o,p,a,f,this.getTilePixelRatio(n),this.getGutter(),function(t,e,i,n){return this.getTileInternal(t,e,i,n,r)}.bind(this),this.reprojectionErrorThreshold_,this.renderReprojectionEdges_,this.contextOptions_);return d.key=u,l?(d.interimTile=l,d.refreshInterimChain(),s.replace(h,d)):s.set(h,d),d}return this.getTileInternal(t,e,i,n,r||o)},e.prototype.getTileInternal=function(t,e,i,n,o){var r=null,s=_o(t,e,i),a=this.getKey();if(this.tileCache.containsKey(s)){if((r=this.tileCache.get(s)).key!=a){var l=r;r=this.createTile_(t,e,i,n,o,a),0==l.getState()?r.interimTile=l.interimTile:r.interimTile=l,r.refreshInterimChain(),this.tileCache.replace(s,r)}}else r=this.createTile_(t,e,i,n,o,a),this.tileCache.set(s,r);return r},e.prototype.setRenderReprojectionEdges=function(t){if(this.renderReprojectionEdges_!=t){for(var e in this.renderReprojectionEdges_=t,this.tileCacheForProjection)this.tileCacheForProjection[e].clear();this.changed()}},e.prototype.setTileGridForProjection=function(t,e){var n=(0,Ot.U2)(t);if(n){var o=(0,i.sq)(n);o in this.tileGridForProjection||(this.tileGridForProjection[o]=e)}},e}(Lo);var Zo=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const Do=function(t){function e(e){var i=e||{},n=void 0!==i.projection?i.projection:"EPSG:3857",o=void 0!==i.tileGrid?i.tileGrid:function(t){var e=t||{},i=e.extent||(0,Ot.U2)("EPSG:3857").getExtent(),n={extent:i,minZoom:e.minZoom,tileSize:e.tileSize,resolutions:So(i,e.maxZoom,e.tileSize,e.maxResolution)};return new Eo(n)}({extent:Oo(n),maxResolution:i.maxResolution,maxZoom:i.maxZoom,minZoom:i.minZoom,tileSize:i.tileSize});return t.call(this,{attributions:i.attributions,cacheSize:i.cacheSize,crossOrigin:i.crossOrigin,imageSmoothing:i.imageSmoothing,opaque:i.opaque,projection:n,reprojectionErrorThreshold:i.reprojectionErrorThreshold,tileGrid:o,tileLoadFunction:i.tileLoadFunction,tilePixelRatio:i.tilePixelRatio,tileUrlFunction:i.tileUrlFunction,url:i.url,urls:i.urls,wrapX:void 0===i.wrapX||i.wrapX,transition:i.transition,attributionsCollapsible:i.attributionsCollapsible,zDirection:i.zDirection})||this}return Zo(e,t),e}(Fo);var ko=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}();const jo=function(t){function e(e){var i,n=e||{};i=void 0!==n.attributions?n.attributions:['&#169; <a href="https://www.openstreetmap.org/copyright" target="_blank">OpenStreetMap</a> contributors.'];var o=void 0!==n.crossOrigin?n.crossOrigin:"anonymous",r=void 0!==n.url?n.url:"https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png";return t.call(this,{attributions:i,attributionsCollapsible:!1,cacheSize:n.cacheSize,crossOrigin:o,imageSmoothing:n.imageSmoothing,maxZoom:void 0!==n.maxZoom?n.maxZoom:19,opaque:void 0===n.opaque||n.opaque,reprojectionErrorThreshold:n.reprojectionErrorThreshold,tileLoadFunction:n.tileLoadFunction,transition:n.transition,url:r,wrapX:n.wrapX})||this}return ko(e,t),e}(Do);var No=s(1978),Go=s(9882);function zo(t){return(0,Go.v)({primary:t.dataset.colorPrimary,secondary:t.dataset.colorSecondary},((t,e)=>e))}const Wo=new URLSearchParams(window.location.search),Yo=Wo.get("markers"),Xo=window.parent!==window||Wo.has("noedit"),Ko=document.getElementById("map");function Bo(t,e){return Wo.get(t)||(Xo?e:"")}Object.assign(Ko.style,{width:Bo("width","100vw"),height:Bo("height","100vh")});const Vo=Yo?JSON.parse(Yo):Array.from(document.querySelectorAll(".marker"),(t=>{var e,i,n;return{location:(n=t,[Number(n.dataset.lon),Number(n.dataset.lat)]),color:zo(t),name:null===(e=t.content.querySelector(".name"))||void 0===e?void 0:e.textContent,info:null===(i=t.content.querySelector(".info"))||void 0===i?void 0:i.cloneNode(!0)}})),{markerLayer:Uo,markerSelect:qo}=function(t,e){const i=e.length?e[0].location:[180*Math.random(),90*Math.random()],n=new Je({target:t,layers:[new gi({source:new jo})],view:new ue({center:(0,Ot.mi)(i),zoom:e.length?15:5})}),o=new zn({source:new Qn({features:e.map((t=>new No.J(t)))}),style:t=>(0,No.q)(t)}),r=new $e.Z({condition:Te.V4,style:t=>(0,No.q)(t,!0)});return n.addLayer(o),n.addInteraction(r),{markerLayer:o,markerSelect:r}}(Ko,Vo),Ho=qo.getMap(),Jo=Ho.getView();qo.on("select",(t=>{const[e]=t.selected;t.selected.forEach((t=>{t.showInfo(Ho)})),t.deselected.forEach((t=>{t.hideInfo(Ho)})),e&&!e.hasInfo&&Jo.animate({center:e.get("geometry").getCoordinates(),duration:200})})),Xo||s.e(301).then(s.bind(s,3301)).then((({initControls:t})=>{const e=document.getElementById("controls");e.style.display="",t(e,Uo,qo)})).catch(console.error)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,