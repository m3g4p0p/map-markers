(self.webpackChunkmap_markers=self.webpackChunkmap_markers||[]).push([[301],{1508:function(t,e){!function(t){"use strict";var e=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},n="defaultParagraphSeparator",r="formatBlock",o=function(t,e,n){return t.addEventListener(e,n)},i=function(t,e){return t.appendChild(e)},a=function(t){return document.createElement(t)},l=function(t){return document.queryCommandState(t)},s=function(t){var e=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return document.execCommand(t,!1,e)},u={bold:{icon:"<b>B</b>",title:"Bold",state:function(){return l("bold")},result:function(){return s("bold")}},italic:{icon:"<i>I</i>",title:"Italic",state:function(){return l("italic")},result:function(){return s("italic")}},underline:{icon:"<u>U</u>",title:"Underline",state:function(){return l("underline")},result:function(){return s("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",state:function(){return l("strikeThrough")},result:function(){return s("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return s(r,"<h1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return s(r,"<h2>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return s(r,"<p>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return s(r,"<blockquote>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return s("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return s("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return s(r,"<pre>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return s("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var t=window.prompt("Enter the link URL");t&&s("createLink",t)}},image:{icon:"&#128247;",title:"Image",result:function(){var t=window.prompt("Enter the image URL");t&&s("insertImage",t)}}},c={actionbar:"pell-actionbar",button:"pell-button",content:"pell-content",selected:"pell-button-selected"},d=function(t){var l=t.actions?t.actions.map((function(t){return"string"==typeof t?u[t]:u[t.name]?e({},u[t.name],t):t})):Object.keys(u).map((function(t){return u[t]})),d=e({},c,t.classes),f=t[n]||"div",h=a("div");h.className=d.actionbar,i(t.element,h);var p=t.element.content=a("div");return p.contentEditable=!0,p.className=d.content,p.oninput=function(e){var n=e.target.firstChild;n&&3===n.nodeType?s(r,"<"+f+">"):"<br>"===p.innerHTML&&(p.innerHTML=""),t.onChange(p.innerHTML)},p.onkeydown=function(t){"Enter"===t.key&&"blockquote"===(r,document.queryCommandValue("formatBlock"))&&setTimeout((function(){return s(r,"<"+f+">")}),0)},i(t.element,p),l.forEach((function(t){var e=a("button");if(e.className=d.button,e.innerHTML=t.icon,e.title=t.title,e.setAttribute("type","button"),e.onclick=function(){return t.result()&&p.focus()},t.state){var n=function(){return e.classList[t.state()?"add":"remove"](d.selected)};o(p,"keyup",n),o(p,"mouseup",n),o(e,"click",n)}i(h,e)})),t.styleWithCSS&&s("styleWithCSS"),s(n,f),t.element},f={exec:s,init:d};t.exec=s,t.init=d,t.default=f,Object.defineProperty(t,"__esModule",{value:!0})}(e)},3301:(t,e,n)=>{"use strict";n.r(e),n.d(e,{initControls:()=>C});var r,o=n(8426),i=n(9520),a=n(3604),l=n(8024),s=n(4011),u=n(8493),c=n(9682),d=(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}),f=function(t){function e(e,n,r,o,i){var a=t.call(this,e)||this;return a.features=n,a.coordinate=r,a.startCoordinate=o,a.mapBrowserEvent=i,a}return d(e,t),e}(i.ZP);const h=function(t){function e(e){var n,r=this,o=e||{};if((r=t.call(this,o)||this).lastCoordinate_=null,r.startCoordinate_=null,r.features_=void 0!==o.features?o.features:null,o.layers)if("function"==typeof o.layers)n=o.layers;else{var i=o.layers;n=function(t){return(0,c.q9)(i,t)}}else n=s.uX;return r.layerFilter_=n,r.filter_=o.filter?o.filter:s.uX,r.hitTolerance_=o.hitTolerance?o.hitTolerance:0,r.lastFeature_=null,r.addEventListener((0,u.v_)(a.Z.ACTIVE),r.handleActiveChanged_),r}return d(e,t),e.prototype.handleDownEvent=function(t){if(this.lastFeature_=this.featuresAtPixel_(t.pixel,t.map),!this.lastCoordinate_&&this.lastFeature_){this.startCoordinate_=t.coordinate,this.lastCoordinate_=t.coordinate,this.handleMoveEvent(t);var e=this.features_||new o.Z([this.lastFeature_]);return this.dispatchEvent(new f("translatestart",e,t.coordinate,this.startCoordinate_,t)),!0}return!1},e.prototype.handleUpEvent=function(t){if(this.lastCoordinate_){this.lastCoordinate_=null,this.handleMoveEvent(t);var e=this.features_||new o.Z([this.lastFeature_]);return this.dispatchEvent(new f("translateend",e,t.coordinate,this.startCoordinate_,t)),this.startCoordinate_=null,!0}return!1},e.prototype.handleDragEvent=function(t){if(this.lastCoordinate_){var e=t.coordinate,n=e[0]-this.lastCoordinate_[0],r=e[1]-this.lastCoordinate_[1],i=this.features_||new o.Z([this.lastFeature_]);i.forEach((function(t){var e=t.getGeometry();e.translate(n,r),t.setGeometry(e)})),this.lastCoordinate_=e,this.dispatchEvent(new f("translating",i,e,this.startCoordinate_,t))}},e.prototype.handleMoveEvent=function(t){var e=t.map.getViewport();this.featuresAtPixel_(t.pixel,t.map)?(e.classList.remove(this.lastCoordinate_?"ol-grab":"ol-grabbing"),e.classList.add(this.lastCoordinate_?"ol-grabbing":"ol-grab")):e.classList.remove("ol-grab","ol-grabbing")},e.prototype.featuresAtPixel_=function(t,e){return e.forEachFeatureAtPixel(t,function(t,e){if(this.filter_(t,e)&&(!this.features_||(0,c.q9)(this.features_.getArray(),t)))return t}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_})},e.prototype.getHitTolerance=function(){return this.hitTolerance_},e.prototype.setHitTolerance=function(t){this.hitTolerance_=t},e.prototype.setMap=function(e){var n=this.getMap();t.prototype.setMap.call(this,e),this.updateState_(n)},e.prototype.handleActiveChanged_=function(){this.updateState_(null)},e.prototype.updateState_=function(t){var e=this.getMap(),n=this.getActive();e&&n||(e=e||t)&&e.getViewport().classList.remove("ol-grab","ol-grabbing")},e}(l.Z);var p=n(1978),m=n(1964),v=n(1273),g=n(1508);function b(t){return t[0].toUpperCase()+t.slice(1)}function y(t){const e=t.elements.name.value;return e?Promise.resolve(e):fetch("https://random-word-api.herokuapp.com/word?number=3").then((t=>t.json())).then((t=>t.map(b).join(" "))).catch(console.error)}const _="select";function k(t){return{primary:t.elements["color-primary"].value,secondary:t.elements["color-secondary"].value}}function w(t,e){const n=document.getElementById("link"),r=e.getSource().getFeatures(),o=new URLSearchParams,{origin:i,pathname:a}=window.location;o.append("noedit","1"),o.append("markers",JSON.stringify(r)),t.elements.link.value=n.href=i+a+"?"+o}function C(t,e,n){const r=t.elements["add-marker"],o=t.elements["remove-marker"],i=t.elements["clear-markers"],a=function(t){const e=(0,g.init)({element:document.getElementById("editor"),onChange:e=>{t.value=e,t.dispatchEvent(new Event("input",{bubbles:!0}))},actions:["heading1","heading2","bold","italic","paragraph","olist","link","image","line"]});return t.form.addEventListener("reset",(()=>{e.content.innerHTML=""})),{get value(){return e.content.innerHTML},set value(n){t.value=e.content.innerHTML=n}}}(t.elements.info),l=new h({features:n.getFeatures()}),s=n.getMap();let u=null;s.addInteraction(l),w(t,e),n.on("select",(n=>{if([u=null]=n.selected,!u)return r.disabled=!1,o.disabled=!0,t.reset(),void w(t,e);const[i,l]=u.get("location"),{primary:s,secondary:c}=u.get("color");t.elements.name.value=u.get("name"),t.elements.lon.value=i,t.elements.lat.value=l,t.elements["color-primary"].value=s,t.elements["color-secondary"].value=c,a.value=function(t){const e=t.get("info");return e?e.innerHTML.trim():""}(u),r.disabled=!0,o.disabled=!1})),l.on("translateend",(n=>{const[r,o]=(0,m.bU)(n.coordinate);t.elements.lon.value=r,t.elements.lat.value=o,u.set("location",[r,o]),w(t,e)})),r.addEventListener("click",(()=>{return o=this,i=void 0,u=function*(){const o=s.getView().getCenter();r.disabled=!0;const i=new p.J({name:yield y(t),location:(0,m.bU)(o),infoHTML:a.value,color:k(t)}),l=new v.t(_,[i],[],null);var u;n.getFeatures().push(i),e.getSource().addFeature(i),n.dispatchEvent(l),(u=t.elements.name).focus(),u.selectionStart=0,u.selectionEnd=u.value.length,w(t,e)},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{a(u.next(t))}catch(t){e(t)}}function r(t){try{a(u.throw(t))}catch(t){e(t)}}function a(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}a((u=u.apply(o,i||[])).next())}));var o,i,l,u})),o.addEventListener("click",(()=>{const r=e.getSource(),o=new v.t(_,[],[u],null);r.removeFeature(u),n.dispatchEvent(o),w(t,e)})),i.addEventListener("click",(()=>{window.confirm("Sure about that?")&&(e.getSource().clear(),t.reset(),w(t,e))})),t.addEventListener("input",(n=>{if(!u)return;const{name:r,value:o}=n.target;switch(r){case"name":u.set("name",o);break;case"info":{const t=function(t,e){return t.get("info").innerHTML=e,e.trim().length>0}(u,o);u.toggleInfo(s,t);break}case"lon":case"lat":!function(t,e){const n=Number(e.elements.lon.value),r=Number(e.elements.lat.value);t.set("location",[n,r])}(u,t);break;case"color-primary":case"color-secondary":!function(t,e){t.set("color",k(e))}(u,t)}w(t,e)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXAtbWFya2Vycy8uL25vZGVfbW9kdWxlcy9wZWxsL2Rpc3QvcGVsbC5taW4uanMiLCJ3ZWJwYWNrOi8vbWFwLW1hcmtlcnMvLi9ub2RlX21vZHVsZXMvb2wvaW50ZXJhY3Rpb24vVHJhbnNsYXRlLmpzIiwid2VicGFjazovL21hcC1tYXJrZXJzLy4vc3JjL25vbnNlbnNlLnRzIiwid2VicGFjazovL21hcC1tYXJrZXJzLy4vc3JjL2NvbnRyb2xwYW5lbC50cyIsIndlYnBhY2s6Ly9tYXAtbWFya2Vycy8uL3NyYy9lZGl0b3IudHMiXSwibmFtZXMiOlsidCIsImUiLCJPYmplY3QiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImMiLCJsIiwiYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzIiwiYXBwZW5kQ2hpbGQiLCJkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicXVlcnlDb21tYW5kU3RhdGUiLCJmIiwiZXhlY0NvbW1hbmQiLCJwIiwiYm9sZCIsImljb24iLCJ0aXRsZSIsInN0YXRlIiwicmVzdWx0IiwiaXRhbGljIiwidW5kZXJsaW5lIiwic3RyaWtldGhyb3VnaCIsImhlYWRpbmcxIiwiaGVhZGluZzIiLCJwYXJhZ3JhcGgiLCJxdW90ZSIsIm9saXN0IiwidWxpc3QiLCJjb2RlIiwibGluZSIsImxpbmsiLCJ3aW5kb3ciLCJwcm9tcHQiLCJpbWFnZSIsIm0iLCJhY3Rpb25iYXIiLCJidXR0b24iLCJjb250ZW50Iiwic2VsZWN0ZWQiLCJhY3Rpb25zIiwibWFwIiwibmFtZSIsImtleXMiLCJjbGFzc2VzIiwiaSIsIm8iLCJjbGFzc05hbWUiLCJlbGVtZW50IiwidSIsImNvbnRlbnRFZGl0YWJsZSIsIm9uaW5wdXQiLCJ0YXJnZXQiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJpbm5lckhUTUwiLCJvbkNoYW5nZSIsIm9ua2V5ZG93biIsImtleSIsInF1ZXJ5Q29tbWFuZFZhbHVlIiwic2V0VGltZW91dCIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvbmNsaWNrIiwiZm9jdXMiLCJjbGFzc0xpc3QiLCJzdHlsZVdpdGhDU1MiLCJleGVjIiwiaW5pdCIsImRlZmF1bHQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZXhwb3J0cyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiVHJhbnNsYXRlRXZlbnQiLCJfc3VwZXIiLCJ0eXBlIiwiZmVhdHVyZXMiLCJjb29yZGluYXRlIiwic3RhcnRDb29yZGluYXRlIiwibWFwQnJvd3NlckV2ZW50IiwiX3RoaXMiLCJUcmFuc2xhdGUiLCJvcHRfb3B0aW9ucyIsImxheWVyRmlsdGVyIiwib3B0aW9ucyIsImxhc3RDb29yZGluYXRlXyIsInN0YXJ0Q29vcmRpbmF0ZV8iLCJmZWF0dXJlc18iLCJ1bmRlZmluZWQiLCJsYXllcnMiLCJsYXllcnNfMSIsImxheWVyIiwibGF5ZXJGaWx0ZXJfIiwiZmlsdGVyXyIsImZpbHRlciIsImhpdFRvbGVyYW5jZV8iLCJoaXRUb2xlcmFuY2UiLCJsYXN0RmVhdHVyZV8iLCJoYW5kbGVBY3RpdmVDaGFuZ2VkXyIsImhhbmRsZURvd25FdmVudCIsImV2ZW50IiwiZmVhdHVyZXNBdFBpeGVsXyIsInBpeGVsIiwiaGFuZGxlTW92ZUV2ZW50IiwiQ29sbGVjdGlvbiIsImRpc3BhdGNoRXZlbnQiLCJoYW5kbGVVcEV2ZW50IiwiaGFuZGxlRHJhZ0V2ZW50IiwibmV3Q29vcmRpbmF0ZSIsImRlbHRhWF8xIiwiZGVsdGFZXzEiLCJmZWF0dXJlIiwiZ2VvbSIsImdldEdlb21ldHJ5IiwidHJhbnNsYXRlIiwic2V0R2VvbWV0cnkiLCJlbGVtIiwiZ2V0Vmlld3BvcnQiLCJyZW1vdmUiLCJhZGQiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJnZXRBcnJheSIsImJpbmQiLCJnZXRIaXRUb2xlcmFuY2UiLCJzZXRIaXRUb2xlcmFuY2UiLCJzZXRNYXAiLCJvbGRNYXAiLCJnZXRNYXAiLCJ1cGRhdGVTdGF0ZV8iLCJhY3RpdmUiLCJnZXRBY3RpdmUiLCJQb2ludGVyIiwidG9UaXRsZUNhc2UiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImdldE5hbWUiLCJmb3JtIiwiZWxlbWVudHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJ3b3JkcyIsImpvaW4iLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsIlNFTEVDVCIsImdldENvbG9yIiwicHJpbWFyeSIsInNlY29uZGFyeSIsInVwZGF0ZUxpbmsiLCJnZXRFbGVtZW50QnlJZCIsImdldFNvdXJjZSIsImdldEZlYXR1cmVzIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwib3JpZ2luIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsImFwcGVuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJocmVmIiwiaW5pdENvbnRyb2xzIiwic2VsZWN0IiwiYWRkQnV0dG9uIiwicmVtb3ZlQnV0dG9uIiwiY2xlYXJCdXR0b24iLCJpbmZvRWRpdG9yIiwiZWRpdG9yIiwiaHRtbCIsIkV2ZW50IiwiYnViYmxlcyIsImluaXRFZGl0b3IiLCJtYXJrZXIiLCJhZGRJbnRlcmFjdGlvbiIsIm9uIiwiZGlzYWJsZWQiLCJyZXNldCIsImxvbiIsImxhdCIsImdldCIsImluZm8iLCJ0cmltIiwiZ2V0SW5mbyIsInNldCIsImNlbnRlciIsImdldFZpZXciLCJnZXRDZW50ZXIiLCJpbmZvSFRNTCIsImNvbG9yIiwiU2VsZWN0IiwicHVzaCIsImFkZEZlYXR1cmUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsInNvdXJjZSIsInJlbW92ZUZlYXR1cmUiLCJjb25maXJtIiwiY2xlYXIiLCJzaG93Iiwic2V0SW5mbyIsInRvZ2dsZUluZm8iLCJOdW1iZXIiLCJz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NEIsR0FBUyxNQUVwRHNCLEVBQU9DLGNBQWN2QixHQUNyQlYsRUFBTy9ELGNBQWNMLEdBQ3JCc0QsRUFBV2pCLEVBQU05QyxNQUduQmdGLEVBQVloTCxpQkFBaUIsU0FBUyxLQUNoQzJCLE9BQU9vTCxRQUFRLHNCQUNqQi9HLEVBQU1pRSxZQUFZK0MsUUFDbEJsRSxFQUFLNkMsUUFDTDVCLEVBQVdqQixFQUFNOUMsT0FJckI4QyxFQUFLOUksaUJBQWlCLFNBQVN5RyxJQUM3QixJQUFLOEUsRUFDSCxPQUdGLE1BQU0sS0FBRWxKLEVBQUksTUFBRTZCLEdBQVV1QyxFQUFNMUQsT0FFOUIsT0FBUVYsR0FDTixJQUFLLE9BQ0hrSixFQUFPVyxJQUFJLE9BQVFoSSxHQUNuQixNQUdGLElBQUssT0FBUSxDQUNYLE1BQU0rSSxFQS9JZCxTQUFrQjFCLEVBQWdCckgsR0FHaEMsT0FGYXFILEVBQU9PLElBQUksUUFDbkI1SSxVQUFZZ0IsRUFDVkEsRUFBTThILE9BQU96TSxPQUFTLEVBNElWMk4sQ0FBUTNCLEVBQVFySCxHQUM3QnFILEVBQU80QixXQUFXL0ssRUFBSzZLLEdBQ3ZCLE1BR0YsSUFBSyxNQUNMLElBQUssT0EvSVgsU0FBc0IxQixFQUFnQnpDLEdBQ3BDLE1BQU04QyxFQUFNd0IsT0FBT3RFLEVBQUtDLFNBQWMsSUFBRTdFLE9BQ2xDMkgsRUFBTXVCLE9BQU90RSxFQUFLQyxTQUFjLElBQUU3RSxPQUV4Q3FILEVBQU9XLElBQUksV0FBWSxDQUFDTixFQUFLQyxJQTRJdkJ3QixDQUFZOUIsRUFBUXpDLEdBQ3BCLE1BR0YsSUFBSyxnQkFDTCxJQUFLLG1CQXZJWCxTQUFtQnlDLEVBQWdCekMsR0FDakN5QyxFQUFPVyxJQUFJLFFBQVN0QyxFQUFTZCxJQXVJdkJ3RSxDQUFTL0IsRUFBUXpDLEdBSXJCaUIsRUFBV2pCLEVBQU05QyIsImZpbGUiOiIzMDEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIhZnVuY3Rpb24odCxlKXtcIm9iamVjdFwiPT10eXBlb2YgZXhwb3J0cyYmXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG1vZHVsZT9lKGV4cG9ydHMpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUoW1wiZXhwb3J0c1wiXSxlKTplKHQucGVsbD17fSl9KHRoaXMsZnVuY3Rpb24odCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9T2JqZWN0LmFzc2lnbnx8ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTE7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl7dmFyIG49YXJndW1lbnRzW2VdO2Zvcih2YXIgciBpbiBuKU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuLHIpJiYodFtyXT1uW3JdKX1yZXR1cm4gdH0sYz1cImRlZmF1bHRQYXJhZ3JhcGhTZXBhcmF0b3JcIixsPVwiZm9ybWF0QmxvY2tcIixhPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdC5hZGRFdmVudExpc3RlbmVyKGUsbil9LHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5hcHBlbmRDaGlsZChlKX0sZD1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0KX0sbj1mdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQucXVlcnlDb21tYW5kU3RhdGUodCl9LGY9ZnVuY3Rpb24odCl7dmFyIGU9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOm51bGw7cmV0dXJuIGRvY3VtZW50LmV4ZWNDb21tYW5kKHQsITEsZSl9LHA9e2JvbGQ6e2ljb246XCI8Yj5CPC9iPlwiLHRpdGxlOlwiQm9sZFwiLHN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG4oXCJib2xkXCIpfSxyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihcImJvbGRcIil9fSxpdGFsaWM6e2ljb246XCI8aT5JPC9pPlwiLHRpdGxlOlwiSXRhbGljXCIsc3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gbihcIml0YWxpY1wiKX0scmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJpdGFsaWNcIil9fSx1bmRlcmxpbmU6e2ljb246XCI8dT5VPC91PlwiLHRpdGxlOlwiVW5kZXJsaW5lXCIsc3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gbihcInVuZGVybGluZVwiKX0scmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJ1bmRlcmxpbmVcIil9fSxzdHJpa2V0aHJvdWdoOntpY29uOlwiPHN0cmlrZT5TPC9zdHJpa2U+XCIsdGl0bGU6XCJTdHJpa2UtdGhyb3VnaFwiLHN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG4oXCJzdHJpa2VUaHJvdWdoXCIpfSxyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihcInN0cmlrZVRocm91Z2hcIil9fSxoZWFkaW5nMTp7aWNvbjpcIjxiPkg8c3ViPjE8L3N1Yj48L2I+XCIsdGl0bGU6XCJIZWFkaW5nIDFcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihsLFwiPGgxPlwiKX19LGhlYWRpbmcyOntpY29uOlwiPGI+SDxzdWI+Mjwvc3ViPjwvYj5cIix0aXRsZTpcIkhlYWRpbmcgMlwiLHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKGwsXCI8aDI+XCIpfX0scGFyYWdyYXBoOntpY29uOlwiJiMxODI7XCIsdGl0bGU6XCJQYXJhZ3JhcGhcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihsLFwiPHA+XCIpfX0scXVvdGU6e2ljb246XCImIzgyMjA7ICYjODIyMTtcIix0aXRsZTpcIlF1b3RlXCIscmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYobCxcIjxibG9ja3F1b3RlPlwiKX19LG9saXN0OntpY29uOlwiJiMzNTtcIix0aXRsZTpcIk9yZGVyZWQgTGlzdFwiLHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKFwiaW5zZXJ0T3JkZXJlZExpc3RcIil9fSx1bGlzdDp7aWNvbjpcIiYjODIyNjtcIix0aXRsZTpcIlVub3JkZXJlZCBMaXN0XCIscmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJpbnNlcnRVbm9yZGVyZWRMaXN0XCIpfX0sY29kZTp7aWNvbjpcIiZsdDsvJmd0O1wiLHRpdGxlOlwiQ29kZVwiLHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKGwsXCI8cHJlPlwiKX19LGxpbmU6e2ljb246XCImIzgyMTM7XCIsdGl0bGU6XCJIb3Jpem9udGFsIExpbmVcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihcImluc2VydEhvcml6b250YWxSdWxlXCIpfX0sbGluazp7aWNvbjpcIiYjMTI4Mjc5O1wiLHRpdGxlOlwiTGlua1wiLHJlc3VsdDpmdW5jdGlvbigpe3ZhciB0PXdpbmRvdy5wcm9tcHQoXCJFbnRlciB0aGUgbGluayBVUkxcIik7dCYmZihcImNyZWF0ZUxpbmtcIix0KX19LGltYWdlOntpY29uOlwiJiMxMjgyNDc7XCIsdGl0bGU6XCJJbWFnZVwiLHJlc3VsdDpmdW5jdGlvbigpe3ZhciB0PXdpbmRvdy5wcm9tcHQoXCJFbnRlciB0aGUgaW1hZ2UgVVJMXCIpO3QmJmYoXCJpbnNlcnRJbWFnZVwiLHQpfX19LG09e2FjdGlvbmJhcjpcInBlbGwtYWN0aW9uYmFyXCIsYnV0dG9uOlwicGVsbC1idXR0b25cIixjb250ZW50OlwicGVsbC1jb250ZW50XCIsc2VsZWN0ZWQ6XCJwZWxsLWJ1dHRvbi1zZWxlY3RlZFwifSxyPWZ1bmN0aW9uKG4pe3ZhciB0PW4uYWN0aW9ucz9uLmFjdGlvbnMubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P3BbdF06cFt0Lm5hbWVdP2Uoe30scFt0Lm5hbWVdLHQpOnR9KTpPYmplY3Qua2V5cyhwKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHBbdF19KSxyPWUoe30sbSxuLmNsYXNzZXMpLGk9bltjXXx8XCJkaXZcIixvPWQoXCJkaXZcIik7by5jbGFzc05hbWU9ci5hY3Rpb25iYXIscyhuLmVsZW1lbnQsbyk7dmFyIHU9bi5lbGVtZW50LmNvbnRlbnQ9ZChcImRpdlwiKTtyZXR1cm4gdS5jb250ZW50RWRpdGFibGU9ITAsdS5jbGFzc05hbWU9ci5jb250ZW50LHUub25pbnB1dD1mdW5jdGlvbih0KXt2YXIgZT10LnRhcmdldC5maXJzdENoaWxkO2UmJjM9PT1lLm5vZGVUeXBlP2YobCxcIjxcIitpK1wiPlwiKTpcIjxicj5cIj09PXUuaW5uZXJIVE1MJiYodS5pbm5lckhUTUw9XCJcIiksbi5vbkNoYW5nZSh1LmlubmVySFRNTCl9LHUub25rZXlkb3duPWZ1bmN0aW9uKHQpe3ZhciBlO1wiRW50ZXJcIj09PXQua2V5JiZcImJsb2NrcXVvdGVcIj09PShlPWwsZG9jdW1lbnQucXVlcnlDb21tYW5kVmFsdWUoZSkpJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7cmV0dXJuIGYobCxcIjxcIitpK1wiPlwiKX0sMCl9LHMobi5lbGVtZW50LHUpLHQuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1kKFwiYnV0dG9uXCIpO2lmKGUuY2xhc3NOYW1lPXIuYnV0dG9uLGUuaW5uZXJIVE1MPXQuaWNvbixlLnRpdGxlPXQudGl0bGUsZS5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJidXR0b25cIiksZS5vbmNsaWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHQucmVzdWx0KCkmJnUuZm9jdXMoKX0sdC5zdGF0ZSl7dmFyIG49ZnVuY3Rpb24oKXtyZXR1cm4gZS5jbGFzc0xpc3RbdC5zdGF0ZSgpP1wiYWRkXCI6XCJyZW1vdmVcIl0oci5zZWxlY3RlZCl9O2EodSxcImtleXVwXCIsbiksYSh1LFwibW91c2V1cFwiLG4pLGEoZSxcImNsaWNrXCIsbil9cyhvLGUpfSksbi5zdHlsZVdpdGhDU1MmJmYoXCJzdHlsZVdpdGhDU1NcIiksZihjLGkpLG4uZWxlbWVudH0saT17ZXhlYzpmLGluaXQ6cn07dC5leGVjPWYsdC5pbml0PXIsdC5kZWZhdWx0PWksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSl9KTtcbiIsInZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgICAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gICAgICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbn0pKCk7XG4vKipcbiAqIEBtb2R1bGUgb2wvaW50ZXJhY3Rpb24vVHJhbnNsYXRlXG4gKi9cbmltcG9ydCBDb2xsZWN0aW9uIGZyb20gJy4uL0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IEV2ZW50IGZyb20gJy4uL2V2ZW50cy9FdmVudC5qcyc7XG5pbXBvcnQgSW50ZXJhY3Rpb25Qcm9wZXJ0eSBmcm9tICcuL1Byb3BlcnR5LmpzJztcbmltcG9ydCBQb2ludGVySW50ZXJhY3Rpb24gZnJvbSAnLi9Qb2ludGVyLmpzJztcbmltcG9ydCB7IFRSVUUgfSBmcm9tICcuLi9mdW5jdGlvbnMuanMnO1xuaW1wb3J0IHsgZ2V0Q2hhbmdlRXZlbnRUeXBlIH0gZnJvbSAnLi4vT2JqZWN0LmpzJztcbmltcG9ydCB7IGluY2x1ZGVzIH0gZnJvbSAnLi4vYXJyYXkuanMnO1xuLyoqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG52YXIgVHJhbnNsYXRlRXZlbnRUeXBlID0ge1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB1cG9uIGZlYXR1cmUgdHJhbnNsYXRpb24gc3RhcnQuXG4gICAgICogQGV2ZW50IFRyYW5zbGF0ZUV2ZW50I3RyYW5zbGF0ZXN0YXJ0XG4gICAgICogQGFwaVxuICAgICAqL1xuICAgIFRSQU5TTEFURVNUQVJUOiAndHJhbnNsYXRlc3RhcnQnLFxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB1cG9uIGZlYXR1cmUgdHJhbnNsYXRpb24uXG4gICAgICogQGV2ZW50IFRyYW5zbGF0ZUV2ZW50I3RyYW5zbGF0aW5nXG4gICAgICogQGFwaVxuICAgICAqL1xuICAgIFRSQU5TTEFUSU5HOiAndHJhbnNsYXRpbmcnLFxuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB1cG9uIGZlYXR1cmUgdHJhbnNsYXRpb24gZW5kLlxuICAgICAqIEBldmVudCBUcmFuc2xhdGVFdmVudCN0cmFuc2xhdGVlbmRcbiAgICAgKiBAYXBpXG4gICAgICovXG4gICAgVFJBTlNMQVRFRU5EOiAndHJhbnNsYXRlZW5kJyxcbn07XG4vKipcbiAqIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhbiB7QGxpbmsgbW9kdWxlOm9sL0ZlYXR1cmV9IG9yXG4gKiB7QGxpbmsgbW9kdWxlOm9sL3JlbmRlci9GZWF0dXJlfSBhbmQgYW5cbiAqIHtAbGluayBtb2R1bGU6b2wvbGF5ZXIvTGF5ZXJ9IGFuZCByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZmVhdHVyZSBtYXkgYmVcbiAqIHRyYW5zbGF0ZWQgb3IgYGZhbHNlYCBvdGhlcndpc2UuXG4gKiBAdHlwZWRlZiB7ZnVuY3Rpb24oaW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5GZWF0dXJlTGlrZSwgaW1wb3J0KFwiLi4vbGF5ZXIvTGF5ZXIuanNcIikuZGVmYXVsdCk6Ym9vbGVhbn0gRmlsdGVyRnVuY3Rpb25cbiAqL1xuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBPcHRpb25zXG4gKiBAcHJvcGVydHkge0NvbGxlY3Rpb248aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0Pn0gW2ZlYXR1cmVzXSBPbmx5IGZlYXR1cmVzIGNvbnRhaW5lZCBpbiB0aGlzIGNvbGxlY3Rpb24gd2lsbCBiZSBhYmxlIHRvIGJlIHRyYW5zbGF0ZWQuIElmXG4gKiBub3Qgc3BlY2lmaWVkLCBhbGwgZmVhdHVyZXMgb24gdGhlIG1hcCB3aWxsIGJlIGFibGUgdG8gYmUgdHJhbnNsYXRlZC5cbiAqIEBwcm9wZXJ0eSB7QXJyYXk8aW1wb3J0KFwiLi4vbGF5ZXIvTGF5ZXIuanNcIikuZGVmYXVsdD58ZnVuY3Rpb24oaW1wb3J0KFwiLi4vbGF5ZXIvTGF5ZXIuanNcIikuZGVmYXVsdCk6IGJvb2xlYW59IFtsYXllcnNdIEEgbGlzdCBvZiBsYXllcnMgZnJvbSB3aGljaCBmZWF0dXJlcyBzaG91bGQgYmVcbiAqIHRyYW5zbGF0ZWQuIEFsdGVybmF0aXZlbHksIGEgZmlsdGVyIGZ1bmN0aW9uIGNhbiBiZSBwcm92aWRlZC4gVGhlXG4gKiBmdW5jdGlvbiB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaCBsYXllciBpbiB0aGUgbWFwIGFuZCBzaG91bGQgcmV0dXJuXG4gKiBgdHJ1ZWAgZm9yIGxheWVycyB0aGF0IHlvdSB3YW50IHRvIGJlIHRyYW5zbGF0YWJsZS4gSWYgdGhlIG9wdGlvbiBpc1xuICogYWJzZW50LCBhbGwgdmlzaWJsZSBsYXllcnMgd2lsbCBiZSBjb25zaWRlcmVkIHRyYW5zbGF0YWJsZS5cbiAqIEBwcm9wZXJ0eSB7RmlsdGVyRnVuY3Rpb259IFtmaWx0ZXJdIEEgZnVuY3Rpb25cbiAqIHRoYXQgdGFrZXMgYW4ge0BsaW5rIG1vZHVsZTpvbC9GZWF0dXJlfSBhbmQgYW5cbiAqIHtAbGluayBtb2R1bGU6b2wvbGF5ZXIvTGF5ZXJ9IGFuZCByZXR1cm5zIGB0cnVlYCBpZiB0aGUgZmVhdHVyZSBtYXkgYmVcbiAqIHRyYW5zbGF0ZWQgb3IgYGZhbHNlYCBvdGhlcndpc2UuXG4gKiBAcHJvcGVydHkge251bWJlcn0gW2hpdFRvbGVyYW5jZT0wXSBIaXQtZGV0ZWN0aW9uIHRvbGVyYW5jZS4gUGl4ZWxzIGluc2lkZSB0aGUgcmFkaXVzIGFyb3VuZCB0aGUgZ2l2ZW4gcG9zaXRpb25cbiAqIHdpbGwgYmUgY2hlY2tlZCBmb3IgZmVhdHVyZXMuXG4gKi9cbi8qKlxuICogQGNsYXNzZGVzY1xuICogRXZlbnRzIGVtaXR0ZWQgYnkge0BsaW5rIG1vZHVsZTpvbC9pbnRlcmFjdGlvbi9UcmFuc2xhdGV+VHJhbnNsYXRlfSBpbnN0YW5jZXNcbiAqIGFyZSBpbnN0YW5jZXMgb2YgdGhpcyB0eXBlLlxuICovXG52YXIgVHJhbnNsYXRlRXZlbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zbGF0ZUV2ZW50LCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VHJhbnNsYXRlRXZlbnRUeXBlfSB0eXBlIFR5cGUuXG4gICAgICogQHBhcmFtIHtDb2xsZWN0aW9uPGltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuZGVmYXVsdD59IGZlYXR1cmVzIFRoZSBmZWF0dXJlcyB0cmFuc2xhdGVkLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfSBjb29yZGluYXRlIFRoZSBldmVudCBjb29yZGluYXRlLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfSBzdGFydENvb3JkaW5hdGUgVGhlIG9yaWdpbmFsIGNvb3JkaW5hdGVzIGJlZm9yZS50cmFuc2xhdGlvbiBzdGFydGVkXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9NYXBCcm93c2VyRXZlbnQuanNcIikuZGVmYXVsdH0gbWFwQnJvd3NlckV2ZW50IE1hcCBicm93c2VyIGV2ZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0ZUV2ZW50KHR5cGUsIGZlYXR1cmVzLCBjb29yZGluYXRlLCBzdGFydENvb3JkaW5hdGUsIG1hcEJyb3dzZXJFdmVudCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCB0eXBlKSB8fCB0aGlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGZlYXR1cmVzIGJlaW5nIHRyYW5zbGF0ZWQuXG4gICAgICAgICAqIEB0eXBlIHtDb2xsZWN0aW9uPGltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuZGVmYXVsdD59XG4gICAgICAgICAqIEBhcGlcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgY29vcmRpbmF0ZSBvZiB0aGUgZHJhZyBldmVudC5cbiAgICAgICAgICogQGNvbnN0XG4gICAgICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9XG4gICAgICAgICAqIEBhcGlcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmNvb3JkaW5hdGUgPSBjb29yZGluYXRlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0IHBvc2l0aW9uIGJlZm9yZSB0cmFuc2xhdGlvbiBzdGFydGVkLlxuICAgICAgICAgKiBAY29uc3RcbiAgICAgICAgICogQHR5cGUge2ltcG9ydChcIi4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX1cbiAgICAgICAgICogQGFwaVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuc3RhcnRDb29yZGluYXRlID0gc3RhcnRDb29yZGluYXRlO1xuICAgICAgICAvKipcbiAgICAgICAgICogQXNzb2NpYXRlZCB7QGxpbmsgbW9kdWxlOm9sL01hcEJyb3dzZXJFdmVudH0uXG4gICAgICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi9NYXBCcm93c2VyRXZlbnQuanNcIikuZGVmYXVsdH1cbiAgICAgICAgICogQGFwaVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMubWFwQnJvd3NlckV2ZW50ID0gbWFwQnJvd3NlckV2ZW50O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBUcmFuc2xhdGVFdmVudDtcbn0oRXZlbnQpKTtcbmV4cG9ydCB7IFRyYW5zbGF0ZUV2ZW50IH07XG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIEludGVyYWN0aW9uIGZvciB0cmFuc2xhdGluZyAobW92aW5nKSBmZWF0dXJlcy5cbiAqXG4gKiBAZmlyZXMgVHJhbnNsYXRlRXZlbnRcbiAqIEBhcGlcbiAqL1xudmFyIFRyYW5zbGF0ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoVHJhbnNsYXRlLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7T3B0aW9ucz19IG9wdF9vcHRpb25zIE9wdGlvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVHJhbnNsYXRlKG9wdF9vcHRpb25zKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBvcHRpb25zID0gb3B0X29wdGlvbnMgPyBvcHRfb3B0aW9ucyA6IHt9O1xuICAgICAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIC8qKiBAdHlwZSB7aW1wb3J0KFwiLi9Qb2ludGVyLmpzXCIpLk9wdGlvbnN9ICovIChvcHRpb25zKSkgfHwgdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBsYXN0IHBvc2l0aW9uIHdlIHRyYW5zbGF0ZWQgdG8uXG4gICAgICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5sYXN0Q29vcmRpbmF0ZV8gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHN0YXJ0IHBvc2l0aW9uIGJlZm9yZSB0cmFuc2xhdGlvbiBzdGFydGVkLlxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuc3RhcnRDb29yZGluYXRlXyA9IG51bGw7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHQ+fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuZmVhdHVyZXNfID0gb3B0aW9ucy5mZWF0dXJlcyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5mZWF0dXJlcyA6IG51bGw7XG4gICAgICAgIC8qKiBAdHlwZSB7ZnVuY3Rpb24oaW1wb3J0KFwiLi4vbGF5ZXIvTGF5ZXIuanNcIikuZGVmYXVsdCk6IGJvb2xlYW59ICovXG4gICAgICAgIHZhciBsYXllckZpbHRlcjtcbiAgICAgICAgaWYgKG9wdGlvbnMubGF5ZXJzKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMubGF5ZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJGaWx0ZXIgPSBvcHRpb25zLmxheWVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBsYXllcnNfMSA9IG9wdGlvbnMubGF5ZXJzO1xuICAgICAgICAgICAgICAgIGxheWVyRmlsdGVyID0gZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbmNsdWRlcyhsYXllcnNfMSwgbGF5ZXIpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsYXllckZpbHRlciA9IFRSVUU7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtmdW5jdGlvbihpbXBvcnQoXCIuLi9sYXllci9MYXllci5qc1wiKS5kZWZhdWx0KTogYm9vbGVhbn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmxheWVyRmlsdGVyXyA9IGxheWVyRmlsdGVyO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHR5cGUge0ZpbHRlckZ1bmN0aW9ufVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuZmlsdGVyXyA9IG9wdGlvbnMuZmlsdGVyID8gb3B0aW9ucy5maWx0ZXIgOiBUUlVFO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmhpdFRvbGVyYW5jZV8gPSBvcHRpb25zLmhpdFRvbGVyYW5jZSA/IG9wdGlvbnMuaGl0VG9sZXJhbmNlIDogMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9XG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5sYXN0RmVhdHVyZV8gPSBudWxsO1xuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKGdldENoYW5nZUV2ZW50VHlwZShJbnRlcmFjdGlvblByb3BlcnR5LkFDVElWRSksIF90aGlzLmhhbmRsZUFjdGl2ZUNoYW5nZWRfKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBIYW5kbGUgcG9pbnRlciBkb3duIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL01hcEJyb3dzZXJFdmVudC5qc1wiKS5kZWZhdWx0fSBldmVudCBFdmVudC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBJZiB0aGUgZXZlbnQgd2FzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuaGFuZGxlRG93bkV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHRoaXMubGFzdEZlYXR1cmVfID0gdGhpcy5mZWF0dXJlc0F0UGl4ZWxfKGV2ZW50LnBpeGVsLCBldmVudC5tYXApO1xuICAgICAgICBpZiAoIXRoaXMubGFzdENvb3JkaW5hdGVfICYmIHRoaXMubGFzdEZlYXR1cmVfKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29vcmRpbmF0ZV8gPSBldmVudC5jb29yZGluYXRlO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29vcmRpbmF0ZV8gPSBldmVudC5jb29yZGluYXRlO1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVNb3ZlRXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gdGhpcy5mZWF0dXJlc18gfHwgbmV3IENvbGxlY3Rpb24oW3RoaXMubGFzdEZlYXR1cmVfXSk7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zbGF0ZUV2ZW50KFRyYW5zbGF0ZUV2ZW50VHlwZS5UUkFOU0xBVEVTVEFSVCwgZmVhdHVyZXMsIGV2ZW50LmNvb3JkaW5hdGUsIHRoaXMuc3RhcnRDb29yZGluYXRlXywgZXZlbnQpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBwb2ludGVyIHVwIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL01hcEJyb3dzZXJFdmVudC5qc1wiKS5kZWZhdWx0fSBldmVudCBFdmVudC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBJZiB0aGUgZXZlbnQgd2FzIGNvbnN1bWVkLlxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuaGFuZGxlVXBFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Q29vcmRpbmF0ZV8pIHtcbiAgICAgICAgICAgIHRoaXMubGFzdENvb3JkaW5hdGVfID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW92ZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNfIHx8IG5ldyBDb2xsZWN0aW9uKFt0aGlzLmxhc3RGZWF0dXJlX10pO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBUcmFuc2xhdGVFdmVudChUcmFuc2xhdGVFdmVudFR5cGUuVFJBTlNMQVRFRU5ELCBmZWF0dXJlcywgZXZlbnQuY29vcmRpbmF0ZSwgdGhpcy5zdGFydENvb3JkaW5hdGVfLCBldmVudCkpO1xuICAgICAgICAgICAgLy8gY2xlYW51cFxuICAgICAgICAgICAgdGhpcy5zdGFydENvb3JkaW5hdGVfID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBwb2ludGVyIGRyYWcgZXZlbnRzLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vTWFwQnJvd3NlckV2ZW50LmpzXCIpLmRlZmF1bHR9IGV2ZW50IEV2ZW50LlxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuaGFuZGxlRHJhZ0V2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RDb29yZGluYXRlXykge1xuICAgICAgICAgICAgdmFyIG5ld0Nvb3JkaW5hdGUgPSBldmVudC5jb29yZGluYXRlO1xuICAgICAgICAgICAgdmFyIGRlbHRhWF8xID0gbmV3Q29vcmRpbmF0ZVswXSAtIHRoaXMubGFzdENvb3JkaW5hdGVfWzBdO1xuICAgICAgICAgICAgdmFyIGRlbHRhWV8xID0gbmV3Q29vcmRpbmF0ZVsxXSAtIHRoaXMubGFzdENvb3JkaW5hdGVfWzFdO1xuICAgICAgICAgICAgdmFyIGZlYXR1cmVzID0gdGhpcy5mZWF0dXJlc18gfHwgbmV3IENvbGxlY3Rpb24oW3RoaXMubGFzdEZlYXR1cmVfXSk7XG4gICAgICAgICAgICBmZWF0dXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGdlb20gPSBmZWF0dXJlLmdldEdlb21ldHJ5KCk7XG4gICAgICAgICAgICAgICAgZ2VvbS50cmFuc2xhdGUoZGVsdGFYXzEsIGRlbHRhWV8xKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNldEdlb21ldHJ5KGdlb20pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb29yZGluYXRlXyA9IG5ld0Nvb3JkaW5hdGU7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zbGF0ZUV2ZW50KFRyYW5zbGF0ZUV2ZW50VHlwZS5UUkFOU0xBVElORywgZmVhdHVyZXMsIG5ld0Nvb3JkaW5hdGUsIHRoaXMuc3RhcnRDb29yZGluYXRlXywgZXZlbnQpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFuZGxlIHBvaW50ZXIgbW92ZSBldmVudHMuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9NYXBCcm93c2VyRXZlbnQuanNcIikuZGVmYXVsdH0gZXZlbnQgRXZlbnQuXG4gICAgICovXG4gICAgVHJhbnNsYXRlLnByb3RvdHlwZS5oYW5kbGVNb3ZlRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIGVsZW0gPSBldmVudC5tYXAuZ2V0Vmlld3BvcnQoKTtcbiAgICAgICAgLy8gQ2hhbmdlIHRoZSBjdXJzb3IgdG8gZ3JhYi9ncmFiYmluZyBpZiBob3ZlcmluZyBhbnkgb2YgdGhlIGZlYXR1cmVzIG1hbmFnZWRcbiAgICAgICAgLy8gYnkgdGhlIGludGVyYWN0aW9uXG4gICAgICAgIGlmICh0aGlzLmZlYXR1cmVzQXRQaXhlbF8oZXZlbnQucGl4ZWwsIGV2ZW50Lm1hcCkpIHtcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmxhc3RDb29yZGluYXRlXyA/ICdvbC1ncmFiJyA6ICdvbC1ncmFiYmluZycpO1xuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QuYWRkKHRoaXMubGFzdENvb3JkaW5hdGVfID8gJ29sLWdyYWJiaW5nJyA6ICdvbC1ncmFiJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUoJ29sLWdyYWInLCAnb2wtZ3JhYmJpbmcnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGVzdHMgdG8gc2VlIGlmIHRoZSBnaXZlbiBjb29yZGluYXRlcyBpbnRlcnNlY3RzIGFueSBvZiBvdXIgc2VsZWN0ZWRcbiAgICAgKiBmZWF0dXJlcy5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL3BpeGVsLmpzXCIpLlBpeGVsfSBwaXhlbCBQaXhlbCBjb29yZGluYXRlIHRvIHRlc3QgZm9yIGludGVyc2VjdGlvbi5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL1BsdWdnYWJsZU1hcC5qc1wiKS5kZWZhdWx0fSBtYXAgTWFwIHRvIHRlc3QgdGhlIGludGVyc2VjdGlvbiBvbi5cbiAgICAgKiBAcmV0dXJuIHtpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHR9IFJldHVybnMgdGhlIGZlYXR1cmUgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBwaXhlbFxuICAgICAqIGNvb3JkaW5hdGVzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVHJhbnNsYXRlLnByb3RvdHlwZS5mZWF0dXJlc0F0UGl4ZWxfID0gZnVuY3Rpb24gKHBpeGVsLCBtYXApIHtcbiAgICAgICAgcmV0dXJuIG1hcC5mb3JFYWNoRmVhdHVyZUF0UGl4ZWwocGl4ZWwsIGZ1bmN0aW9uIChmZWF0dXJlLCBsYXllcikge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyXyhmZWF0dXJlLCBsYXllcikpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmVhdHVyZXNfIHx8IGluY2x1ZGVzKHRoaXMuZmVhdHVyZXNfLmdldEFycmF5KCksIGZlYXR1cmUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmZWF0dXJlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfS5iaW5kKHRoaXMpLCB7XG4gICAgICAgICAgICBsYXllckZpbHRlcjogdGhpcy5sYXllckZpbHRlcl8sXG4gICAgICAgICAgICBoaXRUb2xlcmFuY2U6IHRoaXMuaGl0VG9sZXJhbmNlXyxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIaXQtZGV0ZWN0aW9uIHRvbGVyYW5jZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBIaXQgdG9sZXJhbmNlIGluIHBpeGVscy5cbiAgICAgKiBAYXBpXG4gICAgICovXG4gICAgVHJhbnNsYXRlLnByb3RvdHlwZS5nZXRIaXRUb2xlcmFuY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhpdFRvbGVyYW5jZV87XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIaXQtZGV0ZWN0aW9uIHRvbGVyYW5jZS4gUGl4ZWxzIGluc2lkZSB0aGUgcmFkaXVzIGFyb3VuZCB0aGUgZ2l2ZW4gcG9zaXRpb25cbiAgICAgKiB3aWxsIGJlIGNoZWNrZWQgZm9yIGZlYXR1cmVzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoaXRUb2xlcmFuY2UgSGl0IHRvbGVyYW5jZSBpbiBwaXhlbHMuXG4gICAgICogQGFwaVxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuc2V0SGl0VG9sZXJhbmNlID0gZnVuY3Rpb24gKGhpdFRvbGVyYW5jZSkge1xuICAgICAgICB0aGlzLmhpdFRvbGVyYW5jZV8gPSBoaXRUb2xlcmFuY2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGludGVyYWN0aW9uIGZyb20gaXRzIGN1cnJlbnQgbWFwIGFuZCBhdHRhY2ggaXQgdG8gdGhlIG5ldyBtYXAuXG4gICAgICogU3ViY2xhc3NlcyBtYXkgc2V0IHVwIGV2ZW50IGhhbmRsZXJzIHRvIGdldCBub3RpZmllZCBhYm91dCBjaGFuZ2VzIHRvXG4gICAgICogdGhlIG1hcCBoZXJlLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vUGx1Z2dhYmxlTWFwLmpzXCIpLmRlZmF1bHR9IG1hcCBNYXAuXG4gICAgICovXG4gICAgVHJhbnNsYXRlLnByb3RvdHlwZS5zZXRNYXAgPSBmdW5jdGlvbiAobWFwKSB7XG4gICAgICAgIHZhciBvbGRNYXAgPSB0aGlzLmdldE1hcCgpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnNldE1hcC5jYWxsKHRoaXMsIG1hcCk7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGVfKG9sZE1hcCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuaGFuZGxlQWN0aXZlQ2hhbmdlZF8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudXBkYXRlU3RhdGVfKG51bGwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9QbHVnZ2FibGVNYXAuanNcIikuZGVmYXVsdH0gb2xkTWFwIE9sZCBtYXAuXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLnVwZGF0ZVN0YXRlXyA9IGZ1bmN0aW9uIChvbGRNYXApIHtcbiAgICAgICAgdmFyIG1hcCA9IHRoaXMuZ2V0TWFwKCk7XG4gICAgICAgIHZhciBhY3RpdmUgPSB0aGlzLmdldEFjdGl2ZSgpO1xuICAgICAgICBpZiAoIW1hcCB8fCAhYWN0aXZlKSB7XG4gICAgICAgICAgICBtYXAgPSBtYXAgfHwgb2xkTWFwO1xuICAgICAgICAgICAgaWYgKG1hcCkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtID0gbWFwLmdldFZpZXdwb3J0KCk7XG4gICAgICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdvbC1ncmFiJywgJ29sLWdyYWJiaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBUcmFuc2xhdGU7XG59KFBvaW50ZXJJbnRlcmFjdGlvbikpO1xuZXhwb3J0IGRlZmF1bHQgVHJhbnNsYXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VHJhbnNsYXRlLmpzLm1hcCIsImNvbnN0IFdPUkRfQVBJID0gJ2h0dHBzOi8vcmFuZG9tLXdvcmQtYXBpLmhlcm9rdWFwcC5jb20vd29yZD9udW1iZXI9MydcblxuZnVuY3Rpb24gdG9UaXRsZUNhc2UgKHdvcmQpIHtcbiAgcmV0dXJuIHdvcmRbMF0udG9VcHBlckNhc2UoKSArIHdvcmQuc2xpY2UoMSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5hbWUgKGZvcm06IEhUTUxGb3JtRWxlbWVudCk6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IG5hbWUgPSBmb3JtLmVsZW1lbnRzWyduYW1lJ10udmFsdWVcblxuICBpZiAobmFtZSkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmFtZSlcbiAgfVxuXG4gIHJldHVybiBmZXRjaChXT1JEX0FQSSlcbiAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAudGhlbih3b3JkcyA9PiB3b3Jkcy5tYXAodG9UaXRsZUNhc2UpLmpvaW4oJyAnKSlcbiAgICAuY2F0Y2goY29uc29sZS5lcnJvcilcbn1cbiIsImltcG9ydCB7IFNlbGVjdCwgVHJhbnNsYXRlIH0gZnJvbSAnb2wvaW50ZXJhY3Rpb24nXG5pbXBvcnQgeyBNYXJrZXIgfSBmcm9tICcuL21hcmtlcidcbmltcG9ydCB7IHRvTG9uTGF0IH0gZnJvbSAnb2wvcHJvaidcbmltcG9ydCB7IFNlbGVjdEV2ZW50LCBTZWxlY3RFdmVudFR5cGUgfSBmcm9tICdvbC9pbnRlcmFjdGlvbi9TZWxlY3QnXG5pbXBvcnQgVmVjdG9yTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvVmVjdG9yJ1xuaW1wb3J0IHsgaW5pdEVkaXRvciB9IGZyb20gJy4vZWRpdG9yJ1xuaW1wb3J0IHsgZ2V0TmFtZSB9IGZyb20gJy4vbm9uc2Vuc2UnXG5cbmNvbnN0IFNFTEVDVCA9ICdzZWxlY3QnIGFzIFNlbGVjdEV2ZW50VHlwZVxuXG5mdW5jdGlvbiBnZXRJbmZvIChtYXJrZXI6IE1hcmtlcikge1xuICBjb25zdCBpbmZvID0gbWFya2VyLmdldCgnaW5mbycpXG4gIHJldHVybiBpbmZvID8gaW5mby5pbm5lckhUTUwudHJpbSgpIDogJydcbn1cblxuZnVuY3Rpb24gc2V0SW5mbyAobWFya2VyOiBNYXJrZXIsIHZhbHVlOiBzdHJpbmcpIHtcbiAgY29uc3QgaW5mbyA9IG1hcmtlci5nZXQoJ2luZm8nKVxuICBpbmZvLmlubmVySFRNTCA9IHZhbHVlXG4gIHJldHVybiB2YWx1ZS50cmltKCkubGVuZ3RoID4gMFxufVxuXG5mdW5jdGlvbiBzZXRMb2NhdGlvbiAobWFya2VyOiBNYXJrZXIsIGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xuICBjb25zdCBsb24gPSBOdW1iZXIoZm9ybS5lbGVtZW50c1snbG9uJ10udmFsdWUpXG4gIGNvbnN0IGxhdCA9IE51bWJlcihmb3JtLmVsZW1lbnRzWydsYXQnXS52YWx1ZSlcblxuICBtYXJrZXIuc2V0KCdsb2NhdGlvbicsIFtsb24sIGxhdF0pXG59XG5cbmZ1bmN0aW9uIGdldENvbG9yIChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmltYXJ5OiBmb3JtLmVsZW1lbnRzWydjb2xvci1wcmltYXJ5J10udmFsdWUsXG4gICAgc2Vjb25kYXJ5OiBmb3JtLmVsZW1lbnRzWydjb2xvci1zZWNvbmRhcnknXS52YWx1ZVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldENvbG9yIChtYXJrZXI6IE1hcmtlciwgZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XG4gIG1hcmtlci5zZXQoJ2NvbG9yJywgZ2V0Q29sb3IoZm9ybSkpXG59XG5cbmZ1bmN0aW9uIGZvY3VzSW5wdXQgKGVsZW1lbnQ6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgZWxlbWVudC5mb2N1cygpXG4gIGVsZW1lbnQuc2VsZWN0aW9uU3RhcnQgPSAwXG4gIGVsZW1lbnQuc2VsZWN0aW9uRW5kID0gZWxlbWVudC52YWx1ZS5sZW5ndGhcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAoZm9ybTogSFRNTEZvcm1FbGVtZW50LCBsYXllcjogVmVjdG9yTGF5ZXIpIHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdsaW5rJykgYXMgSFRNTEFuY2hvckVsZW1lbnRcbiAgY29uc3QgZmVhdHVyZXMgPSBsYXllci5nZXRTb3VyY2UoKS5nZXRGZWF0dXJlcygpXG4gIGNvbnN0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKVxuICBjb25zdCB7IG9yaWdpbiwgcGF0aG5hbWUgfSA9IHdpbmRvdy5sb2NhdGlvblxuXG4gIHBhcmFtcy5hcHBlbmQoJ25vZWRpdCcsICcxJylcbiAgcGFyYW1zLmFwcGVuZCgnbWFya2VycycsIEpTT04uc3RyaW5naWZ5KGZlYXR1cmVzKSlcblxuICBmb3JtLmVsZW1lbnRzWydsaW5rJ10udmFsdWUgPSBsaW5rLmhyZWYgPSBvcmlnaW4gKyBwYXRobmFtZSArICc/JyArIHBhcmFtc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdENvbnRyb2xzIChmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGxheWVyOiBWZWN0b3JMYXllciwgc2VsZWN0OiBTZWxlY3QpIHtcbiAgY29uc3QgYWRkQnV0dG9uID0gZm9ybS5lbGVtZW50c1snYWRkLW1hcmtlciddIGFzIEhUTUxCdXR0b25FbGVtZW50XG4gIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGZvcm0uZWxlbWVudHNbJ3JlbW92ZS1tYXJrZXInXSBhcyBIVE1MQnV0dG9uRWxlbWVudFxuICBjb25zdCBjbGVhckJ1dHRvbiA9IGZvcm0uZWxlbWVudHNbJ2NsZWFyLW1hcmtlcnMnXSBhcyBIVE1MQnV0dG9uRWxlbWVudFxuICBjb25zdCBpbmZvRWRpdG9yID0gaW5pdEVkaXRvcihmb3JtLmVsZW1lbnRzWydpbmZvJ10pXG5cbiAgY29uc3QgdHJhbnNsYXRlID0gbmV3IFRyYW5zbGF0ZSh7XG4gICAgZmVhdHVyZXM6IHNlbGVjdC5nZXRGZWF0dXJlcygpXG4gIH0pXG5cbiAgY29uc3QgbWFwID0gc2VsZWN0LmdldE1hcCgpXG4gIGxldCBtYXJrZXI6IE1hcmtlciA9IG51bGxcblxuICBtYXAuYWRkSW50ZXJhY3Rpb24odHJhbnNsYXRlKVxuICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuXG4gIHNlbGVjdC5vbignc2VsZWN0JywgZXZlbnQgPT4ge1xuICAgIFttYXJrZXIgPSBudWxsXSA9IGV2ZW50LnNlbGVjdGVkIGFzIE1hcmtlcltdXG5cbiAgICBpZiAoIW1hcmtlcikge1xuICAgICAgYWRkQnV0dG9uLmRpc2FibGVkID0gZmFsc2VcbiAgICAgIHJlbW92ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcblxuICAgICAgZm9ybS5yZXNldCgpXG4gICAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgW2xvbiwgbGF0XSA9IG1hcmtlci5nZXQoJ2xvY2F0aW9uJylcbiAgICBjb25zdCB7IHByaW1hcnksIHNlY29uZGFyeSB9ID0gbWFya2VyLmdldCgnY29sb3InKVxuXG4gICAgZm9ybS5lbGVtZW50c1snbmFtZSddLnZhbHVlID0gbWFya2VyLmdldCgnbmFtZScpXG4gICAgZm9ybS5lbGVtZW50c1snbG9uJ10udmFsdWUgPSBsb25cbiAgICBmb3JtLmVsZW1lbnRzWydsYXQnXS52YWx1ZSA9IGxhdFxuICAgIGZvcm0uZWxlbWVudHNbJ2NvbG9yLXByaW1hcnknXS52YWx1ZSA9IHByaW1hcnlcbiAgICBmb3JtLmVsZW1lbnRzWydjb2xvci1zZWNvbmRhcnknXS52YWx1ZSA9IHNlY29uZGFyeVxuICAgIGluZm9FZGl0b3IudmFsdWUgPSBnZXRJbmZvKG1hcmtlcilcbiAgICBhZGRCdXR0b24uZGlzYWJsZWQgPSB0cnVlXG4gICAgcmVtb3ZlQnV0dG9uLmRpc2FibGVkID0gZmFsc2VcbiAgfSlcblxuICB0cmFuc2xhdGUub24oJ3RyYW5zbGF0ZWVuZCcsIGV2ZW50ID0+IHtcbiAgICBjb25zdCBbbG9uLCBsYXRdID0gdG9Mb25MYXQoZXZlbnQuY29vcmRpbmF0ZSlcblxuICAgIGZvcm0uZWxlbWVudHNbJ2xvbiddLnZhbHVlID0gbG9uXG4gICAgZm9ybS5lbGVtZW50c1snbGF0J10udmFsdWUgPSBsYXRcbiAgICBtYXJrZXIuc2V0KCdsb2NhdGlvbicsIFtsb24sIGxhdF0pXG4gICAgdXBkYXRlTGluayhmb3JtLCBsYXllcilcbiAgfSlcblxuICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2VudGVyID0gbWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKVxuICAgIGFkZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcblxuICAgIGNvbnN0IG1hcmtlciA9IG5ldyBNYXJrZXIoe1xuICAgICAgbmFtZTogYXdhaXQgZ2V0TmFtZShmb3JtKSxcbiAgICAgIGxvY2F0aW9uOiB0b0xvbkxhdChjZW50ZXIpLFxuICAgICAgaW5mb0hUTUw6IGluZm9FZGl0b3IudmFsdWUsXG4gICAgICBjb2xvcjogZ2V0Q29sb3IoZm9ybSlcbiAgICB9KVxuXG4gICAgY29uc3QgZXZlbnQgPSBuZXcgU2VsZWN0RXZlbnQoU0VMRUNULCBbbWFya2VyXSwgW10sIG51bGwpXG5cbiAgICBzZWxlY3QuZ2V0RmVhdHVyZXMoKS5wdXNoKG1hcmtlcilcbiAgICBsYXllci5nZXRTb3VyY2UoKS5hZGRGZWF0dXJlKG1hcmtlcilcbiAgICBzZWxlY3QuZGlzcGF0Y2hFdmVudChldmVudClcbiAgICBmb2N1c0lucHV0KGZvcm0uZWxlbWVudHNbJ25hbWUnXSlcbiAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICB9KVxuXG4gIHJlbW92ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBzb3VyY2UgPSBsYXllci5nZXRTb3VyY2UoKVxuICAgIGNvbnN0IGV2ZW50ID0gbmV3IFNlbGVjdEV2ZW50KFNFTEVDVCwgW10sIFttYXJrZXJdLCBudWxsKVxuXG4gICAgc291cmNlLnJlbW92ZUZlYXR1cmUobWFya2VyKVxuICAgIHNlbGVjdC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxuICAgIHVwZGF0ZUxpbmsoZm9ybSwgbGF5ZXIpXG4gIH0pXG5cbiAgY2xlYXJCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKCdTdXJlIGFib3V0IHRoYXQ/JykpIHtcbiAgICAgIGxheWVyLmdldFNvdXJjZSgpLmNsZWFyKClcbiAgICAgIGZvcm0ucmVzZXQoKVxuICAgICAgdXBkYXRlTGluayhmb3JtLCBsYXllcilcbiAgICB9XG4gIH0pXG5cbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoIW1hcmtlcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnRcblxuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAnbmFtZSc6IHtcbiAgICAgICAgbWFya2VyLnNldCgnbmFtZScsIHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdpbmZvJzoge1xuICAgICAgICBjb25zdCBzaG93ID0gc2V0SW5mbyhtYXJrZXIsIHZhbHVlKVxuICAgICAgICBtYXJrZXIudG9nZ2xlSW5mbyhtYXAsIHNob3cpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2xvbic6XG4gICAgICBjYXNlICdsYXQnOiB7XG4gICAgICAgIHNldExvY2F0aW9uKG1hcmtlciwgZm9ybSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnY29sb3ItcHJpbWFyeSc6XG4gICAgICBjYXNlICdjb2xvci1zZWNvbmRhcnknOiB7XG4gICAgICAgIHNldENvbG9yKG1hcmtlciwgZm9ybSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICB9KVxufVxuIiwiaW1wb3J0ICdwZWxsL2Rpc3QvcGVsbC5taW4uY3NzJ1xuaW1wb3J0IHsgaW5pdCB9IGZyb20gJ3BlbGwnXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RWRpdG9yICh0YXJnZXQ6IEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcbiAgY29uc3QgZWRpdG9yID0gaW5pdCh7XG4gICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXRvcicpLFxuICAgIG9uQ2hhbmdlOiBodG1sID0+IHtcbiAgICAgIHRhcmdldC52YWx1ZSA9IGh0bWxcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpXG4gICAgfSxcbiAgICBhY3Rpb25zOiBbJ2hlYWRpbmcxJywgJ2hlYWRpbmcyJywgJ2JvbGQnLCAnaXRhbGljJywgJ3BhcmFncmFwaCcsICdvbGlzdCcsICdsaW5rJywgJ2ltYWdlJywgJ2xpbmUnXVxuICB9KVxuXG4gIHRhcmdldC5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgKCkgPT4ge1xuICAgIGVkaXRvci5jb250ZW50LmlubmVySFRNTCA9ICcnXG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgdmFsdWUgKCkge1xuICAgICAgcmV0dXJuIGVkaXRvci5jb250ZW50LmlubmVySFRNTFxuICAgIH0sXG5cbiAgICBzZXQgdmFsdWUgKHZhbHVlKSB7XG4gICAgICB0YXJnZXQudmFsdWUgPSBlZGl0b3IuY29udGVudC5pbm5lckhUTUwgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==