(self.webpackChunkmap_markers=self.webpackChunkmap_markers||[]).push([[301],{1508:function(e,t){!function(e){"use strict";var t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},n="defaultParagraphSeparator",r="formatBlock",o=function(e,t,n){return e.addEventListener(t,n)},i=function(e,t){return e.appendChild(t)},a=function(e){return document.createElement(e)},l=function(e){return document.queryCommandState(e)},s=function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null;return document.execCommand(e,!1,t)},u={bold:{icon:"<b>B</b>",title:"Bold",state:function(){return l("bold")},result:function(){return s("bold")}},italic:{icon:"<i>I</i>",title:"Italic",state:function(){return l("italic")},result:function(){return s("italic")}},underline:{icon:"<u>U</u>",title:"Underline",state:function(){return l("underline")},result:function(){return s("underline")}},strikethrough:{icon:"<strike>S</strike>",title:"Strike-through",state:function(){return l("strikeThrough")},result:function(){return s("strikeThrough")}},heading1:{icon:"<b>H<sub>1</sub></b>",title:"Heading 1",result:function(){return s(r,"<h1>")}},heading2:{icon:"<b>H<sub>2</sub></b>",title:"Heading 2",result:function(){return s(r,"<h2>")}},paragraph:{icon:"&#182;",title:"Paragraph",result:function(){return s(r,"<p>")}},quote:{icon:"&#8220; &#8221;",title:"Quote",result:function(){return s(r,"<blockquote>")}},olist:{icon:"&#35;",title:"Ordered List",result:function(){return s("insertOrderedList")}},ulist:{icon:"&#8226;",title:"Unordered List",result:function(){return s("insertUnorderedList")}},code:{icon:"&lt;/&gt;",title:"Code",result:function(){return s(r,"<pre>")}},line:{icon:"&#8213;",title:"Horizontal Line",result:function(){return s("insertHorizontalRule")}},link:{icon:"&#128279;",title:"Link",result:function(){var e=window.prompt("Enter the link URL");e&&s("createLink",e)}},image:{icon:"&#128247;",title:"Image",result:function(){var e=window.prompt("Enter the image URL");e&&s("insertImage",e)}}},c={actionbar:"pell-actionbar",button:"pell-button",content:"pell-content",selected:"pell-button-selected"},d=function(e){var l=e.actions?e.actions.map((function(e){return"string"==typeof e?u[e]:u[e.name]?t({},u[e.name],e):e})):Object.keys(u).map((function(e){return u[e]})),d=t({},c,e.classes),f=e[n]||"div",h=a("div");h.className=d.actionbar,i(e.element,h);var p=e.element.content=a("div");return p.contentEditable=!0,p.className=d.content,p.oninput=function(t){var n=t.target.firstChild;n&&3===n.nodeType?s(r,"<"+f+">"):"<br>"===p.innerHTML&&(p.innerHTML=""),e.onChange(p.innerHTML)},p.onkeydown=function(e){"Enter"===e.key&&"blockquote"===(r,document.queryCommandValue("formatBlock"))&&setTimeout((function(){return s(r,"<"+f+">")}),0)},i(e.element,p),l.forEach((function(e){var t=a("button");if(t.className=d.button,t.innerHTML=e.icon,t.title=e.title,t.setAttribute("type","button"),t.onclick=function(){return e.result()&&p.focus()},e.state){var n=function(){return t.classList[e.state()?"add":"remove"](d.selected)};o(p,"keyup",n),o(p,"mouseup",n),o(t,"click",n)}i(h,t)})),e.styleWithCSS&&s("styleWithCSS"),s(n,f),e.element},f={exec:s,init:d};e.exec=s,e.init=d,e.default=f,Object.defineProperty(e,"__esModule",{value:!0})}(t)},3301:(e,t,n)=>{"use strict";n.r(t),n.d(t,{initControls:()=>E});var r,o=n(8426),i=n(9520),a=n(3604),l=n(8024),s=n(4011),u=n(8493),c=n(9682),d=(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),f=function(e){function t(t,n,r,o,i){var a=e.call(this,t)||this;return a.features=n,a.coordinate=r,a.startCoordinate=o,a.mapBrowserEvent=i,a}return d(t,e),t}(i.ZP);const h=function(e){function t(t){var n,r=this,o=t||{};if((r=e.call(this,o)||this).lastCoordinate_=null,r.startCoordinate_=null,r.features_=void 0!==o.features?o.features:null,o.layers)if("function"==typeof o.layers)n=o.layers;else{var i=o.layers;n=function(e){return(0,c.q9)(i,e)}}else n=s.uX;return r.layerFilter_=n,r.filter_=o.filter?o.filter:s.uX,r.hitTolerance_=o.hitTolerance?o.hitTolerance:0,r.lastFeature_=null,r.addEventListener((0,u.v_)(a.Z.ACTIVE),r.handleActiveChanged_),r}return d(t,e),t.prototype.handleDownEvent=function(e){if(this.lastFeature_=this.featuresAtPixel_(e.pixel,e.map),!this.lastCoordinate_&&this.lastFeature_){this.startCoordinate_=e.coordinate,this.lastCoordinate_=e.coordinate,this.handleMoveEvent(e);var t=this.features_||new o.Z([this.lastFeature_]);return this.dispatchEvent(new f("translatestart",t,e.coordinate,this.startCoordinate_,e)),!0}return!1},t.prototype.handleUpEvent=function(e){if(this.lastCoordinate_){this.lastCoordinate_=null,this.handleMoveEvent(e);var t=this.features_||new o.Z([this.lastFeature_]);return this.dispatchEvent(new f("translateend",t,e.coordinate,this.startCoordinate_,e)),this.startCoordinate_=null,!0}return!1},t.prototype.handleDragEvent=function(e){if(this.lastCoordinate_){var t=e.coordinate,n=t[0]-this.lastCoordinate_[0],r=t[1]-this.lastCoordinate_[1],i=this.features_||new o.Z([this.lastFeature_]);i.forEach((function(e){var t=e.getGeometry();t.translate(n,r),e.setGeometry(t)})),this.lastCoordinate_=t,this.dispatchEvent(new f("translating",i,t,this.startCoordinate_,e))}},t.prototype.handleMoveEvent=function(e){var t=e.map.getViewport();this.featuresAtPixel_(e.pixel,e.map)?(t.classList.remove(this.lastCoordinate_?"ol-grab":"ol-grabbing"),t.classList.add(this.lastCoordinate_?"ol-grabbing":"ol-grab")):t.classList.remove("ol-grab","ol-grabbing")},t.prototype.featuresAtPixel_=function(e,t){return t.forEachFeatureAtPixel(e,function(e,t){if(this.filter_(e,t)&&(!this.features_||(0,c.q9)(this.features_.getArray(),e)))return e}.bind(this),{layerFilter:this.layerFilter_,hitTolerance:this.hitTolerance_})},t.prototype.getHitTolerance=function(){return this.hitTolerance_},t.prototype.setHitTolerance=function(e){this.hitTolerance_=e},t.prototype.setMap=function(t){var n=this.getMap();e.prototype.setMap.call(this,t),this.updateState_(n)},t.prototype.handleActiveChanged_=function(){this.updateState_(null)},t.prototype.updateState_=function(e){var t=this.getMap(),n=this.getActive();t&&n||(t=t||e)&&t.getViewport().classList.remove("ol-grab","ol-grabbing")},t}(l.Z);var p=n(1964),m=n(1273),v=n(1978),g=n(1508);function b(e){return e[0].toUpperCase()+e.slice(1)}function y(e){const t=e.elements.name.value;return t?Promise.resolve(t):fetch("https://random-word-api.herokuapp.com/word?number=3").then((e=>e.json())).then((e=>e.map(b).join(" "))).catch(console.error)}function _(e){return{primary:e.elements["color-primary"].value,secondary:e.elements["color-secondary"].value}}function k(e,t){const n=document.getElementById("link"),r=t.getSource().getFeatures(),o=new URLSearchParams,{origin:i,pathname:a}=window.location;o.append("noedit","1"),o.append("markers",JSON.stringify(r)),e.elements.link.value=n.href=i+a+"?"+o}function C(e,t){const n=e.getPixelFromCoordinate(t);return e.hasFeatureAtPixel(n)}function w(e,t,n){const r=new m.t("select",t,n,null);e.getFeatures().extend(t),e.dispatchEvent(r)}function E(e,t,n){const r=e.elements["add-marker"],o=e.elements["remove-marker"],i=e.elements["clear-markers"],a=function(e){const t=(0,g.init)({element:document.getElementById("editor"),onChange:t=>{e.value=t,e.dispatchEvent(new Event("input",{bubbles:!0}))},actions:["heading1","heading2","bold","italic","paragraph","olist","link","image","line"]});return e.form.addEventListener("reset",(()=>{t.content.innerHTML=""})),{get value(){return t.content.innerHTML},set value(n){e.value=t.content.innerHTML=n}}}(e.elements.info),l=new h({features:n.getFeatures()}),s=n.getMap();let u=null;s.addInteraction(l),k(e,t),n.on("select",(n=>{if([u=null]=n.selected,!u)return r.disabled=!1,o.disabled=!0,e.reset(),void k(e,t);const[i,l]=u.get("location"),{primary:s,secondary:c}=u.get("color");e.elements.name.value=u.get("name"),e.elements.lon.value=i,e.elements.lat.value=l,e.elements["color-primary"].value=s,e.elements["color-secondary"].value=c,a.value=function(e){const t=e.get("info");return t?t.innerHTML.trim():""}(u),r.disabled=!0,o.disabled=!1})),l.on("translateend",(n=>{const[r,o]=(0,p.bU)(n.coordinate);e.elements.lon.value=r,e.elements.lat.value=o,u.set("location",[r,o]),k(e,t)})),r.addEventListener("click",(()=>{return o=this,i=void 0,u=function*(){const o=s.getView().getCenter();for(;C(s,o);)o[0]+=1,o[1]+=1;r.disabled=!0;const i=new v.J({name:yield y(e),location:(0,p.bU)(o),infoHTML:a.value,color:_(e)});var l;t.getSource().addFeature(i),w(n,[i],[]),(l=e.elements.name).focus(),l.selectionStart=0,l.selectionEnd=l.value.length,k(e,t)},new((l=void 0)||(l=Promise))((function(e,t){function n(e){try{a(u.next(e))}catch(e){t(e)}}function r(e){try{a(u.throw(e))}catch(e){t(e)}}function a(t){var o;t.done?e(t.value):(o=t.value,o instanceof l?o:new l((function(e){e(o)}))).then(n,r)}a((u=u.apply(o,i||[])).next())}));var o,i,l,u})),o.addEventListener("click",(()=>{t.getSource().removeFeature(u),w(n,[],[u]),k(e,t)})),i.addEventListener("click",(()=>{window.confirm("Sure about that?")&&(w(n,[],[u]),t.getSource().clear(),e.reset(),k(e,t))})),e.addEventListener("input",(n=>{if(!u)return;const{name:r,value:o}=n.target;switch(r){case"name":u.set("name",o);break;case"info":{const e=function(e,t){return e.get("info").innerHTML=t,t.trim().length>0}(u,o);u.toggleInfo(s,e);break}case"lon":case"lat":!function(e,t){const n=Number(t.elements.lon.value),r=Number(t.elements.lat.value);e.set("location",[n,r])}(u,e);break;case"color-primary":case"color-secondary":!function(e,t){e.set("color",_(t))}(u,e)}k(e,t)}))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXAtbWFya2Vycy8uL25vZGVfbW9kdWxlcy9wZWxsL2Rpc3QvcGVsbC5taW4uanMiLCJ3ZWJwYWNrOi8vbWFwLW1hcmtlcnMvLi9ub2RlX21vZHVsZXMvb2wvaW50ZXJhY3Rpb24vVHJhbnNsYXRlLmpzIiwid2VicGFjazovL21hcC1tYXJrZXJzLy4vc3JjL25vbnNlbnNlLnRzIiwid2VicGFjazovL21hcC1tYXJrZXJzLy4vc3JjL2NvbnRyb2xwYW5lbC50cyIsIndlYnBhY2s6Ly9tYXAtbWFya2Vycy8uL3NyYy9lZGl0b3IudHMiXSwibmFtZXMiOlsidCIsImUiLCJPYmplY3QiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiciIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImMiLCJsIiwiYSIsImFkZEV2ZW50TGlzdGVuZXIiLCJzIiwiYXBwZW5kQ2hpbGQiLCJkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwicXVlcnlDb21tYW5kU3RhdGUiLCJmIiwiZXhlY0NvbW1hbmQiLCJwIiwiYm9sZCIsImljb24iLCJ0aXRsZSIsInN0YXRlIiwicmVzdWx0IiwiaXRhbGljIiwidW5kZXJsaW5lIiwic3RyaWtldGhyb3VnaCIsImhlYWRpbmcxIiwiaGVhZGluZzIiLCJwYXJhZ3JhcGgiLCJxdW90ZSIsIm9saXN0IiwidWxpc3QiLCJjb2RlIiwibGluZSIsImxpbmsiLCJ3aW5kb3ciLCJwcm9tcHQiLCJpbWFnZSIsIm0iLCJhY3Rpb25iYXIiLCJidXR0b24iLCJjb250ZW50Iiwic2VsZWN0ZWQiLCJhY3Rpb25zIiwibWFwIiwibmFtZSIsImtleXMiLCJjbGFzc2VzIiwiaSIsIm8iLCJjbGFzc05hbWUiLCJlbGVtZW50IiwidSIsImNvbnRlbnRFZGl0YWJsZSIsIm9uaW5wdXQiLCJ0YXJnZXQiLCJmaXJzdENoaWxkIiwibm9kZVR5cGUiLCJpbm5lckhUTUwiLCJvbkNoYW5nZSIsIm9ua2V5ZG93biIsImtleSIsInF1ZXJ5Q29tbWFuZFZhbHVlIiwic2V0VGltZW91dCIsImZvckVhY2giLCJzZXRBdHRyaWJ1dGUiLCJvbmNsaWNrIiwiZm9jdXMiLCJjbGFzc0xpc3QiLCJzdHlsZVdpdGhDU1MiLCJleGVjIiwiaW5pdCIsImRlZmF1bHQiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZXhwb3J0cyIsImV4dGVuZFN0YXRpY3MiLCJfX2V4dGVuZHMiLCJiIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiVHJhbnNsYXRlRXZlbnQiLCJfc3VwZXIiLCJ0eXBlIiwiZmVhdHVyZXMiLCJjb29yZGluYXRlIiwic3RhcnRDb29yZGluYXRlIiwibWFwQnJvd3NlckV2ZW50IiwiX3RoaXMiLCJUcmFuc2xhdGUiLCJvcHRfb3B0aW9ucyIsImxheWVyRmlsdGVyIiwib3B0aW9ucyIsImxhc3RDb29yZGluYXRlXyIsInN0YXJ0Q29vcmRpbmF0ZV8iLCJmZWF0dXJlc18iLCJ1bmRlZmluZWQiLCJsYXllcnMiLCJsYXllcnNfMSIsImxheWVyIiwibGF5ZXJGaWx0ZXJfIiwiZmlsdGVyXyIsImZpbHRlciIsImhpdFRvbGVyYW5jZV8iLCJoaXRUb2xlcmFuY2UiLCJsYXN0RmVhdHVyZV8iLCJoYW5kbGVBY3RpdmVDaGFuZ2VkXyIsImhhbmRsZURvd25FdmVudCIsImV2ZW50IiwiZmVhdHVyZXNBdFBpeGVsXyIsInBpeGVsIiwiaGFuZGxlTW92ZUV2ZW50IiwiQ29sbGVjdGlvbiIsImRpc3BhdGNoRXZlbnQiLCJoYW5kbGVVcEV2ZW50IiwiaGFuZGxlRHJhZ0V2ZW50IiwibmV3Q29vcmRpbmF0ZSIsImRlbHRhWF8xIiwiZGVsdGFZXzEiLCJmZWF0dXJlIiwiZ2VvbSIsImdldEdlb21ldHJ5IiwidHJhbnNsYXRlIiwic2V0R2VvbWV0cnkiLCJlbGVtIiwiZ2V0Vmlld3BvcnQiLCJyZW1vdmUiLCJhZGQiLCJmb3JFYWNoRmVhdHVyZUF0UGl4ZWwiLCJnZXRBcnJheSIsImJpbmQiLCJnZXRIaXRUb2xlcmFuY2UiLCJzZXRIaXRUb2xlcmFuY2UiLCJzZXRNYXAiLCJvbGRNYXAiLCJnZXRNYXAiLCJ1cGRhdGVTdGF0ZV8iLCJhY3RpdmUiLCJnZXRBY3RpdmUiLCJQb2ludGVyIiwidG9UaXRsZUNhc2UiLCJ3b3JkIiwidG9VcHBlckNhc2UiLCJzbGljZSIsImdldE5hbWUiLCJmb3JtIiwiZWxlbWVudHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImZldGNoIiwidGhlbiIsInJlcyIsImpzb24iLCJ3b3JkcyIsImpvaW4iLCJjYXRjaCIsImNvbnNvbGUiLCJlcnJvciIsImdldENvbG9yIiwicHJpbWFyeSIsInNlY29uZGFyeSIsInVwZGF0ZUxpbmsiLCJnZXRFbGVtZW50QnlJZCIsImdldFNvdXJjZSIsImdldEZlYXR1cmVzIiwicGFyYW1zIiwiVVJMU2VhcmNoUGFyYW1zIiwib3JpZ2luIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsImFwcGVuZCIsIkpTT04iLCJzdHJpbmdpZnkiLCJocmVmIiwiaGFzRmVhdXJlQXRDb29yZGluYXRlIiwiZ2V0UGl4ZWxGcm9tQ29vcmRpbmF0ZSIsImhhc0ZlYXR1cmVBdFBpeGVsIiwiZGlzcGF0Y2hTZWxlY3QiLCJzZWxlY3QiLCJkZXNlbGVjdGVkIiwiU2VsZWN0IiwiZXh0ZW5kIiwiaW5pdENvbnRyb2xzIiwiYWRkQnV0dG9uIiwicmVtb3ZlQnV0dG9uIiwiY2xlYXJCdXR0b24iLCJpbmZvRWRpdG9yIiwiZWRpdG9yIiwiaHRtbCIsIkV2ZW50IiwiYnViYmxlcyIsImluaXRFZGl0b3IiLCJtYXJrZXIiLCJhZGRJbnRlcmFjdGlvbiIsIm9uIiwiZGlzYWJsZWQiLCJyZXNldCIsImxvbiIsImxhdCIsImdldCIsImluZm8iLCJ0cmltIiwiZ2V0SW5mbyIsInNldCIsImNlbnRlciIsImdldFZpZXciLCJnZXRDZW50ZXIiLCJpbmZvSFRNTCIsImNvbG9yIiwiYWRkRmVhdHVyZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwicmVtb3ZlRmVhdHVyZSIsImNvbmZpcm0iLCJjbGVhciIsInNob3ciLCJzZXRJbmZvIiwidG9nZ2xlSW5mbyIsIk51bWJlciIsInNldExvY2F0aW9uIiwic2V0Q29sb3IiXSwibWFwcGluZ3MiOiJpR0FBOEosU0FBU0EsR0FBRyxhQUFhLElBQUlDLEVBQUVDLE9BQU9DLFFBQVEsU0FBU0gsR0FBRyxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRUcsVUFBVUMsT0FBT0osSUFBSSxDQUFDLElBQUlLLEVBQUVGLFVBQVVILEdBQUcsSUFBSSxJQUFJTSxLQUFLRCxFQUFFSixPQUFPTSxVQUFVQyxlQUFlQyxLQUFLSixFQUFFQyxLQUFLUCxFQUFFTyxHQUFHRCxFQUFFQyxJQUFJLE9BQU9QLEdBQUdXLEVBQUUsNEJBQTRCQyxFQUFFLGNBQWNDLEVBQUUsU0FBU2IsRUFBRUMsRUFBRUssR0FBRyxPQUFPTixFQUFFYyxpQkFBaUJiLEVBQUVLLElBQUlTLEVBQUUsU0FBU2YsRUFBRUMsR0FBRyxPQUFPRCxFQUFFZ0IsWUFBWWYsSUFBSWdCLEVBQUUsU0FBU2pCLEdBQUcsT0FBT2tCLFNBQVNDLGNBQWNuQixJQUFJTSxFQUFFLFNBQVNOLEdBQUcsT0FBT2tCLFNBQVNFLGtCQUFrQnBCLElBQUlxQixFQUFFLFNBQVNyQixHQUFHLElBQUlDLEVBQUUsRUFBRUcsVUFBVUMsYUFBUSxJQUFTRCxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLE9BQU9jLFNBQVNJLFlBQVl0QixHQUFFLEVBQUdDLElBQUlzQixFQUFFLENBQUNDLEtBQUssQ0FBQ0MsS0FBSyxXQUFXQyxNQUFNLE9BQU9DLE1BQU0sV0FBVyxPQUFPckIsRUFBRSxTQUFTc0IsT0FBTyxXQUFXLE9BQU9QLEVBQUUsVUFBVVEsT0FBTyxDQUFDSixLQUFLLFdBQVdDLE1BQU0sU0FBU0MsTUFBTSxXQUFXLE9BQU9yQixFQUFFLFdBQVdzQixPQUFPLFdBQVcsT0FBT1AsRUFBRSxZQUFZUyxVQUFVLENBQUNMLEtBQUssV0FBV0MsTUFBTSxZQUFZQyxN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Q04sRUFBS0MsSUEySnZCcUIsQ0FBWTNCLEVBQVEvQyxHQUNwQixNQUdGLElBQUssZ0JBQ0wsSUFBSyxtQkF0SlgsU0FBbUIrQyxFQUFnQi9DLEdBQ2pDK0MsRUFBT1csSUFBSSxRQUFTN0MsRUFBU2IsSUFzSnZCMkUsQ0FBUzVCLEVBQVEvQyxHQUlyQmdCLEVBQVdoQixFQUFNOUMiLCJmaWxlIjoiMzAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIWZ1bmN0aW9uKHQsZSl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/ZShleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sZSk6ZSh0LnBlbGw9e30pfSh0aGlzLGZ1bmN0aW9uKHQpe1widXNlIHN0cmljdFwiO3ZhciBlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0xO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspe3ZhciBuPWFyZ3VtZW50c1tlXTtmb3IodmFyIHIgaW4gbilPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobixyKSYmKHRbcl09bltyXSl9cmV0dXJuIHR9LGM9XCJkZWZhdWx0UGFyYWdyYXBoU2VwYXJhdG9yXCIsbD1cImZvcm1hdEJsb2NrXCIsYT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHQuYWRkRXZlbnRMaXN0ZW5lcihlLG4pfSxzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuYXBwZW5kQ2hpbGQoZSl9LGQ9ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCl9LG49ZnVuY3Rpb24odCl7cmV0dXJuIGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHQpfSxmPWZ1bmN0aW9uKHQpe3ZhciBlPTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpudWxsO3JldHVybiBkb2N1bWVudC5leGVjQ29tbWFuZCh0LCExLGUpfSxwPXtib2xkOntpY29uOlwiPGI+QjwvYj5cIix0aXRsZTpcIkJvbGRcIixzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBuKFwiYm9sZFwiKX0scmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJib2xkXCIpfX0saXRhbGljOntpY29uOlwiPGk+STwvaT5cIix0aXRsZTpcIkl0YWxpY1wiLHN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG4oXCJpdGFsaWNcIil9LHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKFwiaXRhbGljXCIpfX0sdW5kZXJsaW5lOntpY29uOlwiPHU+VTwvdT5cIix0aXRsZTpcIlVuZGVybGluZVwiLHN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIG4oXCJ1bmRlcmxpbmVcIil9LHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKFwidW5kZXJsaW5lXCIpfX0sc3RyaWtldGhyb3VnaDp7aWNvbjpcIjxzdHJpa2U+Uzwvc3RyaWtlPlwiLHRpdGxlOlwiU3RyaWtlLXRocm91Z2hcIixzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBuKFwic3RyaWtlVGhyb3VnaFwiKX0scmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJzdHJpa2VUaHJvdWdoXCIpfX0saGVhZGluZzE6e2ljb246XCI8Yj5IPHN1Yj4xPC9zdWI+PC9iPlwiLHRpdGxlOlwiSGVhZGluZyAxXCIscmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYobCxcIjxoMT5cIil9fSxoZWFkaW5nMjp7aWNvbjpcIjxiPkg8c3ViPjI8L3N1Yj48L2I+XCIsdGl0bGU6XCJIZWFkaW5nIDJcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihsLFwiPGgyPlwiKX19LHBhcmFncmFwaDp7aWNvbjpcIiYjMTgyO1wiLHRpdGxlOlwiUGFyYWdyYXBoXCIscmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYobCxcIjxwPlwiKX19LHF1b3RlOntpY29uOlwiJiM4MjIwOyAmIzgyMjE7XCIsdGl0bGU6XCJRdW90ZVwiLHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKGwsXCI8YmxvY2txdW90ZT5cIil9fSxvbGlzdDp7aWNvbjpcIiYjMzU7XCIsdGl0bGU6XCJPcmRlcmVkIExpc3RcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihcImluc2VydE9yZGVyZWRMaXN0XCIpfX0sdWxpc3Q6e2ljb246XCImIzgyMjY7XCIsdGl0bGU6XCJVbm9yZGVyZWQgTGlzdFwiLHJlc3VsdDpmdW5jdGlvbigpe3JldHVybiBmKFwiaW5zZXJ0VW5vcmRlcmVkTGlzdFwiKX19LGNvZGU6e2ljb246XCImbHQ7LyZndDtcIix0aXRsZTpcIkNvZGVcIixyZXN1bHQ6ZnVuY3Rpb24oKXtyZXR1cm4gZihsLFwiPHByZT5cIil9fSxsaW5lOntpY29uOlwiJiM4MjEzO1wiLHRpdGxlOlwiSG9yaXpvbnRhbCBMaW5lXCIscmVzdWx0OmZ1bmN0aW9uKCl7cmV0dXJuIGYoXCJpbnNlcnRIb3Jpem9udGFsUnVsZVwiKX19LGxpbms6e2ljb246XCImIzEyODI3OTtcIix0aXRsZTpcIkxpbmtcIixyZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cucHJvbXB0KFwiRW50ZXIgdGhlIGxpbmsgVVJMXCIpO3QmJmYoXCJjcmVhdGVMaW5rXCIsdCl9fSxpbWFnZTp7aWNvbjpcIiYjMTI4MjQ3O1wiLHRpdGxlOlwiSW1hZ2VcIixyZXN1bHQ6ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cucHJvbXB0KFwiRW50ZXIgdGhlIGltYWdlIFVSTFwiKTt0JiZmKFwiaW5zZXJ0SW1hZ2VcIix0KX19fSxtPXthY3Rpb25iYXI6XCJwZWxsLWFjdGlvbmJhclwiLGJ1dHRvbjpcInBlbGwtYnV0dG9uXCIsY29udGVudDpcInBlbGwtY29udGVudFwiLHNlbGVjdGVkOlwicGVsbC1idXR0b24tc2VsZWN0ZWRcIn0scj1mdW5jdGlvbihuKXt2YXIgdD1uLmFjdGlvbnM/bi5hY3Rpb25zLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD9wW3RdOnBbdC5uYW1lXT9lKHt9LHBbdC5uYW1lXSx0KTp0fSk6T2JqZWN0LmtleXMocCkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBwW3RdfSkscj1lKHt9LG0sbi5jbGFzc2VzKSxpPW5bY118fFwiZGl2XCIsbz1kKFwiZGl2XCIpO28uY2xhc3NOYW1lPXIuYWN0aW9uYmFyLHMobi5lbGVtZW50LG8pO3ZhciB1PW4uZWxlbWVudC5jb250ZW50PWQoXCJkaXZcIik7cmV0dXJuIHUuY29udGVudEVkaXRhYmxlPSEwLHUuY2xhc3NOYW1lPXIuY29udGVudCx1Lm9uaW5wdXQ9ZnVuY3Rpb24odCl7dmFyIGU9dC50YXJnZXQuZmlyc3RDaGlsZDtlJiYzPT09ZS5ub2RlVHlwZT9mKGwsXCI8XCIraStcIj5cIik6XCI8YnI+XCI9PT11LmlubmVySFRNTCYmKHUuaW5uZXJIVE1MPVwiXCIpLG4ub25DaGFuZ2UodS5pbm5lckhUTUwpfSx1Lm9ua2V5ZG93bj1mdW5jdGlvbih0KXt2YXIgZTtcIkVudGVyXCI9PT10LmtleSYmXCJibG9ja3F1b3RlXCI9PT0oZT1sLGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFZhbHVlKGUpKSYmc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBmKGwsXCI8XCIraStcIj5cIil9LDApfSxzKG4uZWxlbWVudCx1KSx0LmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9ZChcImJ1dHRvblwiKTtpZihlLmNsYXNzTmFtZT1yLmJ1dHRvbixlLmlubmVySFRNTD10Lmljb24sZS50aXRsZT10LnRpdGxlLGUuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiYnV0dG9uXCIpLGUub25jbGljaz1mdW5jdGlvbigpe3JldHVybiB0LnJlc3VsdCgpJiZ1LmZvY3VzKCl9LHQuc3RhdGUpe3ZhciBuPWZ1bmN0aW9uKCl7cmV0dXJuIGUuY2xhc3NMaXN0W3Quc3RhdGUoKT9cImFkZFwiOlwicmVtb3ZlXCJdKHIuc2VsZWN0ZWQpfTthKHUsXCJrZXl1cFwiLG4pLGEodSxcIm1vdXNldXBcIixuKSxhKGUsXCJjbGlja1wiLG4pfXMobyxlKX0pLG4uc3R5bGVXaXRoQ1NTJiZmKFwic3R5bGVXaXRoQ1NTXCIpLGYoYyxpKSxuLmVsZW1lbnR9LGk9e2V4ZWM6Zixpbml0OnJ9O3QuZXhlYz1mLHQuaW5pdD1yLHQuZGVmYXVsdD1pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pfSk7XG4iLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xuLyoqXG4gKiBAbW9kdWxlIG9sL2ludGVyYWN0aW9uL1RyYW5zbGF0ZVxuICovXG5pbXBvcnQgQ29sbGVjdGlvbiBmcm9tICcuLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCBFdmVudCBmcm9tICcuLi9ldmVudHMvRXZlbnQuanMnO1xuaW1wb3J0IEludGVyYWN0aW9uUHJvcGVydHkgZnJvbSAnLi9Qcm9wZXJ0eS5qcyc7XG5pbXBvcnQgUG9pbnRlckludGVyYWN0aW9uIGZyb20gJy4vUG9pbnRlci5qcyc7XG5pbXBvcnQgeyBUUlVFIH0gZnJvbSAnLi4vZnVuY3Rpb25zLmpzJztcbmltcG9ydCB7IGdldENoYW5nZUV2ZW50VHlwZSB9IGZyb20gJy4uL09iamVjdC5qcyc7XG5pbXBvcnQgeyBpbmNsdWRlcyB9IGZyb20gJy4uL2FycmF5LmpzJztcbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xudmFyIFRyYW5zbGF0ZUV2ZW50VHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgdXBvbiBmZWF0dXJlIHRyYW5zbGF0aW9uIHN0YXJ0LlxuICAgICAqIEBldmVudCBUcmFuc2xhdGVFdmVudCN0cmFuc2xhdGVzdGFydFxuICAgICAqIEBhcGlcbiAgICAgKi9cbiAgICBUUkFOU0xBVEVTVEFSVDogJ3RyYW5zbGF0ZXN0YXJ0JyxcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgdXBvbiBmZWF0dXJlIHRyYW5zbGF0aW9uLlxuICAgICAqIEBldmVudCBUcmFuc2xhdGVFdmVudCN0cmFuc2xhdGluZ1xuICAgICAqIEBhcGlcbiAgICAgKi9cbiAgICBUUkFOU0xBVElORzogJ3RyYW5zbGF0aW5nJyxcbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyZWQgdXBvbiBmZWF0dXJlIHRyYW5zbGF0aW9uIGVuZC5cbiAgICAgKiBAZXZlbnQgVHJhbnNsYXRlRXZlbnQjdHJhbnNsYXRlZW5kXG4gICAgICogQGFwaVxuICAgICAqL1xuICAgIFRSQU5TTEFURUVORDogJ3RyYW5zbGF0ZWVuZCcsXG59O1xuLyoqXG4gKiBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYW4ge0BsaW5rIG1vZHVsZTpvbC9GZWF0dXJlfSBvclxuICoge0BsaW5rIG1vZHVsZTpvbC9yZW5kZXIvRmVhdHVyZX0gYW5kIGFuXG4gKiB7QGxpbmsgbW9kdWxlOm9sL2xheWVyL0xheWVyfSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZlYXR1cmUgbWF5IGJlXG4gKiB0cmFuc2xhdGVkIG9yIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICogQHR5cGVkZWYge2Z1bmN0aW9uKGltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuRmVhdHVyZUxpa2UsIGltcG9ydChcIi4uL2xheWVyL0xheWVyLmpzXCIpLmRlZmF1bHQpOmJvb2xlYW59IEZpbHRlckZ1bmN0aW9uXG4gKi9cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHtDb2xsZWN0aW9uPGltcG9ydChcIi4uL0ZlYXR1cmUuanNcIikuZGVmYXVsdD59IFtmZWF0dXJlc10gT25seSBmZWF0dXJlcyBjb250YWluZWQgaW4gdGhpcyBjb2xsZWN0aW9uIHdpbGwgYmUgYWJsZSB0byBiZSB0cmFuc2xhdGVkLiBJZlxuICogbm90IHNwZWNpZmllZCwgYWxsIGZlYXR1cmVzIG9uIHRoZSBtYXAgd2lsbCBiZSBhYmxlIHRvIGJlIHRyYW5zbGF0ZWQuXG4gKiBAcHJvcGVydHkge0FycmF5PGltcG9ydChcIi4uL2xheWVyL0xheWVyLmpzXCIpLmRlZmF1bHQ+fGZ1bmN0aW9uKGltcG9ydChcIi4uL2xheWVyL0xheWVyLmpzXCIpLmRlZmF1bHQpOiBib29sZWFufSBbbGF5ZXJzXSBBIGxpc3Qgb2YgbGF5ZXJzIGZyb20gd2hpY2ggZmVhdHVyZXMgc2hvdWxkIGJlXG4gKiB0cmFuc2xhdGVkLiBBbHRlcm5hdGl2ZWx5LCBhIGZpbHRlciBmdW5jdGlvbiBjYW4gYmUgcHJvdmlkZWQuIFRoZVxuICogZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2ggbGF5ZXIgaW4gdGhlIG1hcCBhbmQgc2hvdWxkIHJldHVyblxuICogYHRydWVgIGZvciBsYXllcnMgdGhhdCB5b3Ugd2FudCB0byBiZSB0cmFuc2xhdGFibGUuIElmIHRoZSBvcHRpb24gaXNcbiAqIGFic2VudCwgYWxsIHZpc2libGUgbGF5ZXJzIHdpbGwgYmUgY29uc2lkZXJlZCB0cmFuc2xhdGFibGUuXG4gKiBAcHJvcGVydHkge0ZpbHRlckZ1bmN0aW9ufSBbZmlsdGVyXSBBIGZ1bmN0aW9uXG4gKiB0aGF0IHRha2VzIGFuIHtAbGluayBtb2R1bGU6b2wvRmVhdHVyZX0gYW5kIGFuXG4gKiB7QGxpbmsgbW9kdWxlOm9sL2xheWVyL0xheWVyfSBhbmQgcmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGZlYXR1cmUgbWF5IGJlXG4gKiB0cmFuc2xhdGVkIG9yIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtoaXRUb2xlcmFuY2U9MF0gSGl0LWRldGVjdGlvbiB0b2xlcmFuY2UuIFBpeGVscyBpbnNpZGUgdGhlIHJhZGl1cyBhcm91bmQgdGhlIGdpdmVuIHBvc2l0aW9uXG4gKiB3aWxsIGJlIGNoZWNrZWQgZm9yIGZlYXR1cmVzLlxuICovXG4vKipcbiAqIEBjbGFzc2Rlc2NcbiAqIEV2ZW50cyBlbWl0dGVkIGJ5IHtAbGluayBtb2R1bGU6b2wvaW50ZXJhY3Rpb24vVHJhbnNsYXRlflRyYW5zbGF0ZX0gaW5zdGFuY2VzXG4gKiBhcmUgaW5zdGFuY2VzIG9mIHRoaXMgdHlwZS5cbiAqL1xudmFyIFRyYW5zbGF0ZUV2ZW50ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhUcmFuc2xhdGVFdmVudCwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RyYW5zbGF0ZUV2ZW50VHlwZX0gdHlwZSBUeXBlLlxuICAgICAqIEBwYXJhbSB7Q29sbGVjdGlvbjxpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHQ+fSBmZWF0dXJlcyBUaGUgZmVhdHVyZXMgdHJhbnNsYXRlZC5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gY29vcmRpbmF0ZSBUaGUgZXZlbnQgY29vcmRpbmF0ZS5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX0gc3RhcnRDb29yZGluYXRlIFRoZSBvcmlnaW5hbCBjb29yZGluYXRlcyBiZWZvcmUudHJhbnNsYXRpb24gc3RhcnRlZFxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vTWFwQnJvd3NlckV2ZW50LmpzXCIpLmRlZmF1bHR9IG1hcEJyb3dzZXJFdmVudCBNYXAgYnJvd3NlciBldmVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBUcmFuc2xhdGVFdmVudCh0eXBlLCBmZWF0dXJlcywgY29vcmRpbmF0ZSwgc3RhcnRDb29yZGluYXRlLCBtYXBCcm93c2VyRXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgdHlwZSkgfHwgdGhpcztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBmZWF0dXJlcyBiZWluZyB0cmFuc2xhdGVkLlxuICAgICAgICAgKiBAdHlwZSB7Q29sbGVjdGlvbjxpbXBvcnQoXCIuLi9GZWF0dXJlLmpzXCIpLmRlZmF1bHQ+fVxuICAgICAgICAgKiBAYXBpXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvb3JkaW5hdGUgb2YgdGhlIGRyYWcgZXZlbnQuXG4gICAgICAgICAqIEBjb25zdFxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfVxuICAgICAgICAgKiBAYXBpXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5jb29yZGluYXRlID0gY29vcmRpbmF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBjb29yZGluYXRlIG9mIHRoZSBzdGFydCBwb3NpdGlvbiBiZWZvcmUgdHJhbnNsYXRpb24gc3RhcnRlZC5cbiAgICAgICAgICogQGNvbnN0XG4gICAgICAgICAqIEB0eXBlIHtpbXBvcnQoXCIuLi9jb29yZGluYXRlLmpzXCIpLkNvb3JkaW5hdGV9XG4gICAgICAgICAqIEBhcGlcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnN0YXJ0Q29vcmRpbmF0ZSA9IHN0YXJ0Q29vcmRpbmF0ZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEFzc29jaWF0ZWQge0BsaW5rIG1vZHVsZTpvbC9NYXBCcm93c2VyRXZlbnR9LlxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vTWFwQnJvd3NlckV2ZW50LmpzXCIpLmRlZmF1bHR9XG4gICAgICAgICAqIEBhcGlcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLm1hcEJyb3dzZXJFdmVudCA9IG1hcEJyb3dzZXJFdmVudDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gVHJhbnNsYXRlRXZlbnQ7XG59KEV2ZW50KSk7XG5leHBvcnQgeyBUcmFuc2xhdGVFdmVudCB9O1xuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBJbnRlcmFjdGlvbiBmb3IgdHJhbnNsYXRpbmcgKG1vdmluZykgZmVhdHVyZXMuXG4gKlxuICogQGZpcmVzIFRyYW5zbGF0ZUV2ZW50XG4gKiBAYXBpXG4gKi9cbnZhciBUcmFuc2xhdGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFRyYW5zbGF0ZSwgX3N1cGVyKTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge09wdGlvbnM9fSBvcHRfb3B0aW9ucyBPcHRpb25zLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYW5zbGF0ZShvcHRfb3B0aW9ucykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgb3B0aW9ucyA9IG9wdF9vcHRpb25zID8gb3B0X29wdGlvbnMgOiB7fTtcbiAgICAgICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCAvKiogQHR5cGUge2ltcG9ydChcIi4vUG9pbnRlci5qc1wiKS5PcHRpb25zfSAqLyAob3B0aW9ucykpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbGFzdCBwb3NpdGlvbiB3ZSB0cmFuc2xhdGVkIHRvLlxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vY29vcmRpbmF0ZS5qc1wiKS5Db29yZGluYXRlfVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMubGFzdENvb3JkaW5hdGVfID0gbnVsbDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBzdGFydCBwb3NpdGlvbiBiZWZvcmUgdHJhbnNsYXRpb24gc3RhcnRlZC5cbiAgICAgICAgICogQHR5cGUge2ltcG9ydChcIi4uL2Nvb3JkaW5hdGUuanNcIikuQ29vcmRpbmF0ZX1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnN0YXJ0Q29vcmRpbmF0ZV8gPSBudWxsO1xuICAgICAgICAvKipcbiAgICAgICAgICogQHR5cGUge0NvbGxlY3Rpb248aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0Pn1cbiAgICAgICAgICogQHByaXZhdGVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmZlYXR1cmVzXyA9IG9wdGlvbnMuZmVhdHVyZXMgIT09IHVuZGVmaW5lZCA/IG9wdGlvbnMuZmVhdHVyZXMgOiBudWxsO1xuICAgICAgICAvKiogQHR5cGUge2Z1bmN0aW9uKGltcG9ydChcIi4uL2xheWVyL0xheWVyLmpzXCIpLmRlZmF1bHQpOiBib29sZWFufSAqL1xuICAgICAgICB2YXIgbGF5ZXJGaWx0ZXI7XG4gICAgICAgIGlmIChvcHRpb25zLmxheWVycykge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLmxheWVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIGxheWVyRmlsdGVyID0gb3B0aW9ucy5sYXllcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJzXzEgPSBvcHRpb25zLmxheWVycztcbiAgICAgICAgICAgICAgICBsYXllckZpbHRlciA9IGZ1bmN0aW9uIChsYXllcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5jbHVkZXMobGF5ZXJzXzEsIGxheWVyKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGF5ZXJGaWx0ZXIgPSBUUlVFO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKiBAdHlwZSB7ZnVuY3Rpb24oaW1wb3J0KFwiLi4vbGF5ZXIvTGF5ZXIuanNcIikuZGVmYXVsdCk6IGJvb2xlYW59XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5sYXllckZpbHRlcl8gPSBsYXllckZpbHRlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtGaWx0ZXJGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmZpbHRlcl8gPSBvcHRpb25zLmZpbHRlciA/IG9wdGlvbnMuZmlsdGVyIDogVFJVRTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwcml2YXRlXG4gICAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5oaXRUb2xlcmFuY2VfID0gb3B0aW9ucy5oaXRUb2xlcmFuY2UgPyBvcHRpb25zLmhpdFRvbGVyYW5jZSA6IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0fVxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMubGFzdEZlYXR1cmVfID0gbnVsbDtcbiAgICAgICAgX3RoaXMuYWRkRXZlbnRMaXN0ZW5lcihnZXRDaGFuZ2VFdmVudFR5cGUoSW50ZXJhY3Rpb25Qcm9wZXJ0eS5BQ1RJVkUpLCBfdGhpcy5oYW5kbGVBY3RpdmVDaGFuZ2VkXyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSGFuZGxlIHBvaW50ZXIgZG93biBldmVudHMuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9NYXBCcm93c2VyRXZlbnQuanNcIikuZGVmYXVsdH0gZXZlbnQgRXZlbnQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gSWYgdGhlIGV2ZW50IHdhcyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLmhhbmRsZURvd25FdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICB0aGlzLmxhc3RGZWF0dXJlXyA9IHRoaXMuZmVhdHVyZXNBdFBpeGVsXyhldmVudC5waXhlbCwgZXZlbnQubWFwKTtcbiAgICAgICAgaWYgKCF0aGlzLmxhc3RDb29yZGluYXRlXyAmJiB0aGlzLmxhc3RGZWF0dXJlXykge1xuICAgICAgICAgICAgdGhpcy5zdGFydENvb3JkaW5hdGVfID0gZXZlbnQuY29vcmRpbmF0ZTtcbiAgICAgICAgICAgIHRoaXMubGFzdENvb3JkaW5hdGVfID0gZXZlbnQuY29vcmRpbmF0ZTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlTW92ZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNfIHx8IG5ldyBDb2xsZWN0aW9uKFt0aGlzLmxhc3RGZWF0dXJlX10pO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBUcmFuc2xhdGVFdmVudChUcmFuc2xhdGVFdmVudFR5cGUuVFJBTlNMQVRFU1RBUlQsIGZlYXR1cmVzLCBldmVudC5jb29yZGluYXRlLCB0aGlzLnN0YXJ0Q29vcmRpbmF0ZV8sIGV2ZW50KSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgcG9pbnRlciB1cCBldmVudHMuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9NYXBCcm93c2VyRXZlbnQuanNcIikuZGVmYXVsdH0gZXZlbnQgRXZlbnQuXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gSWYgdGhlIGV2ZW50IHdhcyBjb25zdW1lZC5cbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLmhhbmRsZVVwRXZlbnQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubGFzdENvb3JkaW5hdGVfKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RDb29yZGluYXRlXyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZU1vdmVFdmVudChldmVudCk7XG4gICAgICAgICAgICB2YXIgZmVhdHVyZXMgPSB0aGlzLmZlYXR1cmVzXyB8fCBuZXcgQ29sbGVjdGlvbihbdGhpcy5sYXN0RmVhdHVyZV9dKTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgVHJhbnNsYXRlRXZlbnQoVHJhbnNsYXRlRXZlbnRUeXBlLlRSQU5TTEFURUVORCwgZmVhdHVyZXMsIGV2ZW50LmNvb3JkaW5hdGUsIHRoaXMuc3RhcnRDb29yZGluYXRlXywgZXZlbnQpKTtcbiAgICAgICAgICAgIC8vIGNsZWFudXBcbiAgICAgICAgICAgIHRoaXMuc3RhcnRDb29yZGluYXRlXyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGUgcG9pbnRlciBkcmFnIGV2ZW50cy5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL01hcEJyb3dzZXJFdmVudC5qc1wiKS5kZWZhdWx0fSBldmVudCBFdmVudC5cbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLmhhbmRsZURyYWdFdmVudCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5sYXN0Q29vcmRpbmF0ZV8pIHtcbiAgICAgICAgICAgIHZhciBuZXdDb29yZGluYXRlID0gZXZlbnQuY29vcmRpbmF0ZTtcbiAgICAgICAgICAgIHZhciBkZWx0YVhfMSA9IG5ld0Nvb3JkaW5hdGVbMF0gLSB0aGlzLmxhc3RDb29yZGluYXRlX1swXTtcbiAgICAgICAgICAgIHZhciBkZWx0YVlfMSA9IG5ld0Nvb3JkaW5hdGVbMV0gLSB0aGlzLmxhc3RDb29yZGluYXRlX1sxXTtcbiAgICAgICAgICAgIHZhciBmZWF0dXJlcyA9IHRoaXMuZmVhdHVyZXNfIHx8IG5ldyBDb2xsZWN0aW9uKFt0aGlzLmxhc3RGZWF0dXJlX10pO1xuICAgICAgICAgICAgZmVhdHVyZXMuZm9yRWFjaChmdW5jdGlvbiAoZmVhdHVyZSkge1xuICAgICAgICAgICAgICAgIHZhciBnZW9tID0gZmVhdHVyZS5nZXRHZW9tZXRyeSgpO1xuICAgICAgICAgICAgICAgIGdlb20udHJhbnNsYXRlKGRlbHRhWF8xLCBkZWx0YVlfMSk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5zZXRHZW9tZXRyeShnZW9tKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5sYXN0Q29vcmRpbmF0ZV8gPSBuZXdDb29yZGluYXRlO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBUcmFuc2xhdGVFdmVudChUcmFuc2xhdGVFdmVudFR5cGUuVFJBTlNMQVRJTkcsIGZlYXR1cmVzLCBuZXdDb29yZGluYXRlLCB0aGlzLnN0YXJ0Q29vcmRpbmF0ZV8sIGV2ZW50KSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZSBwb2ludGVyIG1vdmUgZXZlbnRzLlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vTWFwQnJvd3NlckV2ZW50LmpzXCIpLmRlZmF1bHR9IGV2ZW50IEV2ZW50LlxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuaGFuZGxlTW92ZUV2ZW50ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBlbGVtID0gZXZlbnQubWFwLmdldFZpZXdwb3J0KCk7XG4gICAgICAgIC8vIENoYW5nZSB0aGUgY3Vyc29yIHRvIGdyYWIvZ3JhYmJpbmcgaWYgaG92ZXJpbmcgYW55IG9mIHRoZSBmZWF0dXJlcyBtYW5hZ2VkXG4gICAgICAgIC8vIGJ5IHRoZSBpbnRlcmFjdGlvblxuICAgICAgICBpZiAodGhpcy5mZWF0dXJlc0F0UGl4ZWxfKGV2ZW50LnBpeGVsLCBldmVudC5tYXApKSB7XG4gICAgICAgICAgICBlbGVtLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5sYXN0Q29vcmRpbmF0ZV8gPyAnb2wtZ3JhYicgOiAnb2wtZ3JhYmJpbmcnKTtcbiAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LmFkZCh0aGlzLmxhc3RDb29yZGluYXRlXyA/ICdvbC1ncmFiYmluZycgOiAnb2wtZ3JhYicpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKCdvbC1ncmFiJywgJ29sLWdyYWJiaW5nJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRlc3RzIHRvIHNlZSBpZiB0aGUgZ2l2ZW4gY29vcmRpbmF0ZXMgaW50ZXJzZWN0cyBhbnkgb2Ygb3VyIHNlbGVjdGVkXG4gICAgICogZmVhdHVyZXMuXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9waXhlbC5qc1wiKS5QaXhlbH0gcGl4ZWwgUGl4ZWwgY29vcmRpbmF0ZSB0byB0ZXN0IGZvciBpbnRlcnNlY3Rpb24uXG4gICAgICogQHBhcmFtIHtpbXBvcnQoXCIuLi9QbHVnZ2FibGVNYXAuanNcIikuZGVmYXVsdH0gbWFwIE1hcCB0byB0ZXN0IHRoZSBpbnRlcnNlY3Rpb24gb24uXG4gICAgICogQHJldHVybiB7aW1wb3J0KFwiLi4vRmVhdHVyZS5qc1wiKS5kZWZhdWx0fSBSZXR1cm5zIHRoZSBmZWF0dXJlIGZvdW5kIGF0IHRoZSBzcGVjaWZpZWQgcGl4ZWxcbiAgICAgKiBjb29yZGluYXRlcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuZmVhdHVyZXNBdFBpeGVsXyA9IGZ1bmN0aW9uIChwaXhlbCwgbWFwKSB7XG4gICAgICAgIHJldHVybiBtYXAuZm9yRWFjaEZlYXR1cmVBdFBpeGVsKHBpeGVsLCBmdW5jdGlvbiAoZmVhdHVyZSwgbGF5ZXIpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlcl8oZmVhdHVyZSwgbGF5ZXIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmZlYXR1cmVzXyB8fCBpbmNsdWRlcyh0aGlzLmZlYXR1cmVzXy5nZXRBcnJheSgpLCBmZWF0dXJlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmVhdHVyZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0uYmluZCh0aGlzKSwge1xuICAgICAgICAgICAgbGF5ZXJGaWx0ZXI6IHRoaXMubGF5ZXJGaWx0ZXJfLFxuICAgICAgICAgICAgaGl0VG9sZXJhbmNlOiB0aGlzLmhpdFRvbGVyYW5jZV8sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgSGl0LWRldGVjdGlvbiB0b2xlcmFuY2UuXG4gICAgICogQHJldHVybnMge251bWJlcn0gSGl0IHRvbGVyYW5jZSBpbiBwaXhlbHMuXG4gICAgICogQGFwaVxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuZ2V0SGl0VG9sZXJhbmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5oaXRUb2xlcmFuY2VfO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSGl0LWRldGVjdGlvbiB0b2xlcmFuY2UuIFBpeGVscyBpbnNpZGUgdGhlIHJhZGl1cyBhcm91bmQgdGhlIGdpdmVuIHBvc2l0aW9uXG4gICAgICogd2lsbCBiZSBjaGVja2VkIGZvciBmZWF0dXJlcy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaGl0VG9sZXJhbmNlIEhpdCB0b2xlcmFuY2UgaW4gcGl4ZWxzLlxuICAgICAqIEBhcGlcbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLnNldEhpdFRvbGVyYW5jZSA9IGZ1bmN0aW9uIChoaXRUb2xlcmFuY2UpIHtcbiAgICAgICAgdGhpcy5oaXRUb2xlcmFuY2VfID0gaGl0VG9sZXJhbmNlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBpbnRlcmFjdGlvbiBmcm9tIGl0cyBjdXJyZW50IG1hcCBhbmQgYXR0YWNoIGl0IHRvIHRoZSBuZXcgbWFwLlxuICAgICAqIFN1YmNsYXNzZXMgbWF5IHNldCB1cCBldmVudCBoYW5kbGVycyB0byBnZXQgbm90aWZpZWQgYWJvdXQgY2hhbmdlcyB0b1xuICAgICAqIHRoZSBtYXAgaGVyZS5cbiAgICAgKiBAcGFyYW0ge2ltcG9ydChcIi4uL1BsdWdnYWJsZU1hcC5qc1wiKS5kZWZhdWx0fSBtYXAgTWFwLlxuICAgICAqL1xuICAgIFRyYW5zbGF0ZS5wcm90b3R5cGUuc2V0TWFwID0gZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICB2YXIgb2xkTWFwID0gdGhpcy5nZXRNYXAoKTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5zZXRNYXAuY2FsbCh0aGlzLCBtYXApO1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlXyhvbGRNYXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBUcmFuc2xhdGUucHJvdG90eXBlLmhhbmRsZUFjdGl2ZUNoYW5nZWRfID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVwZGF0ZVN0YXRlXyhudWxsKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7aW1wb3J0KFwiLi4vUGx1Z2dhYmxlTWFwLmpzXCIpLmRlZmF1bHR9IG9sZE1hcCBPbGQgbWFwLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgVHJhbnNsYXRlLnByb3RvdHlwZS51cGRhdGVTdGF0ZV8gPSBmdW5jdGlvbiAob2xkTWFwKSB7XG4gICAgICAgIHZhciBtYXAgPSB0aGlzLmdldE1hcCgpO1xuICAgICAgICB2YXIgYWN0aXZlID0gdGhpcy5nZXRBY3RpdmUoKTtcbiAgICAgICAgaWYgKCFtYXAgfHwgIWFjdGl2ZSkge1xuICAgICAgICAgICAgbWFwID0gbWFwIHx8IG9sZE1hcDtcbiAgICAgICAgICAgIGlmIChtYXApIHtcbiAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IG1hcC5nZXRWaWV3cG9ydCgpO1xuICAgICAgICAgICAgICAgIGVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnb2wtZ3JhYicsICdvbC1ncmFiYmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gVHJhbnNsYXRlO1xufShQb2ludGVySW50ZXJhY3Rpb24pKTtcbmV4cG9ydCBkZWZhdWx0IFRyYW5zbGF0ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRyYW5zbGF0ZS5qcy5tYXAiLCJjb25zdCBXT1JEX0FQSSA9ICdodHRwczovL3JhbmRvbS13b3JkLWFwaS5oZXJva3VhcHAuY29tL3dvcmQ/bnVtYmVyPTMnXG5cbmZ1bmN0aW9uIHRvVGl0bGVDYXNlICh3b3JkKSB7XG4gIHJldHVybiB3b3JkWzBdLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnNsaWNlKDEpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lIChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpOiBQcm9taXNlPHN0cmluZz4ge1xuICBjb25zdCBuYW1lID0gZm9ybS5lbGVtZW50c1snbmFtZSddLnZhbHVlXG5cbiAgaWYgKG5hbWUpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5hbWUpXG4gIH1cblxuICByZXR1cm4gZmV0Y2goV09SRF9BUEkpXG4gICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgLnRoZW4od29yZHMgPT4gd29yZHMubWFwKHRvVGl0bGVDYXNlKS5qb2luKCcgJykpXG4gICAgLmNhdGNoKGNvbnNvbGUuZXJyb3IpXG59XG4iLCJpbXBvcnQgeyBGZWF0dXJlLCBNYXAgfSBmcm9tICdvbCdcbmltcG9ydCB7IFNlbGVjdCwgVHJhbnNsYXRlIH0gZnJvbSAnb2wvaW50ZXJhY3Rpb24nXG5pbXBvcnQgeyBDb29yZGluYXRlIH0gZnJvbSAnb2wvY29vcmRpbmF0ZSdcbmltcG9ydCB7IHRvTG9uTGF0IH0gZnJvbSAnb2wvcHJvaidcbmltcG9ydCB7IFNlbGVjdEV2ZW50LCBTZWxlY3RFdmVudFR5cGUgfSBmcm9tICdvbC9pbnRlcmFjdGlvbi9TZWxlY3QnXG5pbXBvcnQgVmVjdG9yTGF5ZXIgZnJvbSAnb2wvbGF5ZXIvVmVjdG9yJ1xuaW1wb3J0IHsgTWFya2VyIH0gZnJvbSAnLi9tYXJrZXInXG5pbXBvcnQgeyBpbml0RWRpdG9yIH0gZnJvbSAnLi9lZGl0b3InXG5pbXBvcnQgeyBnZXROYW1lIH0gZnJvbSAnLi9ub25zZW5zZSdcblxuY29uc3QgU0VMRUNUX1RZUEUgPSAnc2VsZWN0JyBhcyBTZWxlY3RFdmVudFR5cGVcblxuZnVuY3Rpb24gZ2V0SW5mbyAobWFya2VyOiBNYXJrZXIpIHtcbiAgY29uc3QgaW5mbyA9IG1hcmtlci5nZXQoJ2luZm8nKVxuICByZXR1cm4gaW5mbyA/IGluZm8uaW5uZXJIVE1MLnRyaW0oKSA6ICcnXG59XG5cbmZ1bmN0aW9uIHNldEluZm8gKG1hcmtlcjogTWFya2VyLCB2YWx1ZTogc3RyaW5nKSB7XG4gIGNvbnN0IGluZm8gPSBtYXJrZXIuZ2V0KCdpbmZvJylcbiAgaW5mby5pbm5lckhUTUwgPSB2YWx1ZVxuICByZXR1cm4gdmFsdWUudHJpbSgpLmxlbmd0aCA+IDBcbn1cblxuZnVuY3Rpb24gc2V0TG9jYXRpb24gKG1hcmtlcjogTWFya2VyLCBmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcbiAgY29uc3QgbG9uID0gTnVtYmVyKGZvcm0uZWxlbWVudHNbJ2xvbiddLnZhbHVlKVxuICBjb25zdCBsYXQgPSBOdW1iZXIoZm9ybS5lbGVtZW50c1snbGF0J10udmFsdWUpXG5cbiAgbWFya2VyLnNldCgnbG9jYXRpb24nLCBbbG9uLCBsYXRdKVxufVxuXG5mdW5jdGlvbiBnZXRDb2xvciAoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XG4gIHJldHVybiB7XG4gICAgcHJpbWFyeTogZm9ybS5lbGVtZW50c1snY29sb3ItcHJpbWFyeSddLnZhbHVlLFxuICAgIHNlY29uZGFyeTogZm9ybS5lbGVtZW50c1snY29sb3Itc2Vjb25kYXJ5J10udmFsdWVcbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRDb2xvciAobWFya2VyOiBNYXJrZXIsIGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xuICBtYXJrZXIuc2V0KCdjb2xvcicsIGdldENvbG9yKGZvcm0pKVxufVxuXG5mdW5jdGlvbiBmb2N1c0lucHV0IChlbGVtZW50OiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gIGVsZW1lbnQuZm9jdXMoKVxuICBlbGVtZW50LnNlbGVjdGlvblN0YXJ0ID0gMFxuICBlbGVtZW50LnNlbGVjdGlvbkVuZCA9IGVsZW1lbnQudmFsdWUubGVuZ3RoXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpbmsgKGZvcm06IEhUTUxGb3JtRWxlbWVudCwgbGF5ZXI6IFZlY3RvckxheWVyKSB7XG4gIGNvbnN0IGxpbmsgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbGluaycpIGFzIEhUTUxBbmNob3JFbGVtZW50XG4gIGNvbnN0IGZlYXR1cmVzID0gbGF5ZXIuZ2V0U291cmNlKCkuZ2V0RmVhdHVyZXMoKVxuICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKClcbiAgY29uc3QgeyBvcmlnaW4sIHBhdGhuYW1lIH0gPSB3aW5kb3cubG9jYXRpb25cblxuICBwYXJhbXMuYXBwZW5kKCdub2VkaXQnLCAnMScpXG4gIHBhcmFtcy5hcHBlbmQoJ21hcmtlcnMnLCBKU09OLnN0cmluZ2lmeShmZWF0dXJlcykpXG5cbiAgZm9ybS5lbGVtZW50c1snbGluayddLnZhbHVlID0gbGluay5ocmVmID0gb3JpZ2luICsgcGF0aG5hbWUgKyAnPycgKyBwYXJhbXNcbn1cblxuZnVuY3Rpb24gaGFzRmVhdXJlQXRDb29yZGluYXRlIChtYXA6IE1hcCwgY29vcmRpbmF0ZTogQ29vcmRpbmF0ZSkge1xuICBjb25zdCBwaXhlbCA9IG1hcC5nZXRQaXhlbEZyb21Db29yZGluYXRlKGNvb3JkaW5hdGUpXG4gIHJldHVybiBtYXAuaGFzRmVhdHVyZUF0UGl4ZWwocGl4ZWwpXG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoU2VsZWN0IChzZWxlY3Q6IFNlbGVjdCwgc2VsZWN0ZWQ6IEZlYXR1cmVbXSwgZGVzZWxlY3RlZDogRmVhdHVyZVtdKSB7XG4gIGNvbnN0IGV2ZW50ID0gbmV3IFNlbGVjdEV2ZW50KFNFTEVDVF9UWVBFLCBzZWxlY3RlZCwgZGVzZWxlY3RlZCwgbnVsbClcblxuICBzZWxlY3QuZ2V0RmVhdHVyZXMoKS5leHRlbmQoc2VsZWN0ZWQpXG4gIHNlbGVjdC5kaXNwYXRjaEV2ZW50KGV2ZW50KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdENvbnRyb2xzIChmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGxheWVyOiBWZWN0b3JMYXllciwgc2VsZWN0OiBTZWxlY3QpIHtcbiAgY29uc3QgYWRkQnV0dG9uID0gZm9ybS5lbGVtZW50c1snYWRkLW1hcmtlciddIGFzIEhUTUxCdXR0b25FbGVtZW50XG4gIGNvbnN0IHJlbW92ZUJ1dHRvbiA9IGZvcm0uZWxlbWVudHNbJ3JlbW92ZS1tYXJrZXInXSBhcyBIVE1MQnV0dG9uRWxlbWVudFxuICBjb25zdCBjbGVhckJ1dHRvbiA9IGZvcm0uZWxlbWVudHNbJ2NsZWFyLW1hcmtlcnMnXSBhcyBIVE1MQnV0dG9uRWxlbWVudFxuICBjb25zdCBpbmZvRWRpdG9yID0gaW5pdEVkaXRvcihmb3JtLmVsZW1lbnRzWydpbmZvJ10pXG5cbiAgY29uc3QgdHJhbnNsYXRlID0gbmV3IFRyYW5zbGF0ZSh7XG4gICAgZmVhdHVyZXM6IHNlbGVjdC5nZXRGZWF0dXJlcygpXG4gIH0pXG5cbiAgY29uc3QgbWFwID0gc2VsZWN0LmdldE1hcCgpXG4gIGxldCBtYXJrZXI6IE1hcmtlciA9IG51bGxcblxuICBtYXAuYWRkSW50ZXJhY3Rpb24odHJhbnNsYXRlKVxuICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuXG4gIHNlbGVjdC5vbignc2VsZWN0JywgZXZlbnQgPT4ge1xuICAgIFttYXJrZXIgPSBudWxsXSA9IGV2ZW50LnNlbGVjdGVkIGFzIE1hcmtlcltdXG5cbiAgICBpZiAoIW1hcmtlcikge1xuICAgICAgYWRkQnV0dG9uLmRpc2FibGVkID0gZmFsc2VcbiAgICAgIHJlbW92ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcblxuICAgICAgZm9ybS5yZXNldCgpXG4gICAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgW2xvbiwgbGF0XSA9IG1hcmtlci5nZXQoJ2xvY2F0aW9uJylcbiAgICBjb25zdCB7IHByaW1hcnksIHNlY29uZGFyeSB9ID0gbWFya2VyLmdldCgnY29sb3InKVxuXG4gICAgZm9ybS5lbGVtZW50c1snbmFtZSddLnZhbHVlID0gbWFya2VyLmdldCgnbmFtZScpXG4gICAgZm9ybS5lbGVtZW50c1snbG9uJ10udmFsdWUgPSBsb25cbiAgICBmb3JtLmVsZW1lbnRzWydsYXQnXS52YWx1ZSA9IGxhdFxuICAgIGZvcm0uZWxlbWVudHNbJ2NvbG9yLXByaW1hcnknXS52YWx1ZSA9IHByaW1hcnlcbiAgICBmb3JtLmVsZW1lbnRzWydjb2xvci1zZWNvbmRhcnknXS52YWx1ZSA9IHNlY29uZGFyeVxuICAgIGluZm9FZGl0b3IudmFsdWUgPSBnZXRJbmZvKG1hcmtlcilcbiAgICBhZGRCdXR0b24uZGlzYWJsZWQgPSB0cnVlXG4gICAgcmVtb3ZlQnV0dG9uLmRpc2FibGVkID0gZmFsc2VcbiAgfSlcblxuICB0cmFuc2xhdGUub24oJ3RyYW5zbGF0ZWVuZCcsIGV2ZW50ID0+IHtcbiAgICBjb25zdCBbbG9uLCBsYXRdID0gdG9Mb25MYXQoZXZlbnQuY29vcmRpbmF0ZSlcblxuICAgIGZvcm0uZWxlbWVudHNbJ2xvbiddLnZhbHVlID0gbG9uXG4gICAgZm9ybS5lbGVtZW50c1snbGF0J10udmFsdWUgPSBsYXRcbiAgICBtYXJrZXIuc2V0KCdsb2NhdGlvbicsIFtsb24sIGxhdF0pXG4gICAgdXBkYXRlTGluayhmb3JtLCBsYXllcilcbiAgfSlcblxuICBhZGRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgY2VudGVyID0gbWFwLmdldFZpZXcoKS5nZXRDZW50ZXIoKVxuXG4gICAgd2hpbGUgKGhhc0ZlYXVyZUF0Q29vcmRpbmF0ZShtYXAsIGNlbnRlcikpIHtcbiAgICAgIGNlbnRlclswXSArPSAxXG4gICAgICBjZW50ZXJbMV0gKz0gMVxuICAgIH1cblxuICAgIGFkZEJ1dHRvbi5kaXNhYmxlZCA9IHRydWVcblxuICAgIGNvbnN0IG1hcmtlciA9IG5ldyBNYXJrZXIoe1xuICAgICAgbmFtZTogYXdhaXQgZ2V0TmFtZShmb3JtKSxcbiAgICAgIGxvY2F0aW9uOiB0b0xvbkxhdChjZW50ZXIpLFxuICAgICAgaW5mb0hUTUw6IGluZm9FZGl0b3IudmFsdWUsXG4gICAgICBjb2xvcjogZ2V0Q29sb3IoZm9ybSlcbiAgICB9KVxuXG4gICAgbGF5ZXIuZ2V0U291cmNlKCkuYWRkRmVhdHVyZShtYXJrZXIpXG4gICAgZGlzcGF0Y2hTZWxlY3Qoc2VsZWN0LCBbbWFya2VyXSwgW10pXG4gICAgZm9jdXNJbnB1dChmb3JtLmVsZW1lbnRzWyduYW1lJ10pXG4gICAgdXBkYXRlTGluayhmb3JtLCBsYXllcilcbiAgfSlcblxuICByZW1vdmVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgY29uc3Qgc291cmNlID0gbGF5ZXIuZ2V0U291cmNlKClcblxuICAgIHNvdXJjZS5yZW1vdmVGZWF0dXJlKG1hcmtlcilcbiAgICBkaXNwYXRjaFNlbGVjdChzZWxlY3QsIFtdLCBbbWFya2VyXSlcbiAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICB9KVxuXG4gIGNsZWFyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGlmICh3aW5kb3cuY29uZmlybSgnU3VyZSBhYm91dCB0aGF0PycpKSB7XG4gICAgICBkaXNwYXRjaFNlbGVjdChzZWxlY3QsIFtdLCBbbWFya2VyXSlcbiAgICAgIGxheWVyLmdldFNvdXJjZSgpLmNsZWFyKClcbiAgICAgIGZvcm0ucmVzZXQoKVxuICAgICAgdXBkYXRlTGluayhmb3JtLCBsYXllcilcbiAgICB9XG4gIH0pXG5cbiAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGV2ZW50ID0+IHtcbiAgICBpZiAoIW1hcmtlcikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgeyBuYW1lLCB2YWx1ZSB9ID0gZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnRcblxuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAnbmFtZSc6IHtcbiAgICAgICAgbWFya2VyLnNldCgnbmFtZScsIHZhbHVlKVxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBjYXNlICdpbmZvJzoge1xuICAgICAgICBjb25zdCBzaG93ID0gc2V0SW5mbyhtYXJrZXIsIHZhbHVlKVxuICAgICAgICBtYXJrZXIudG9nZ2xlSW5mbyhtYXAsIHNob3cpXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGNhc2UgJ2xvbic6XG4gICAgICBjYXNlICdsYXQnOiB7XG4gICAgICAgIHNldExvY2F0aW9uKG1hcmtlciwgZm9ybSlcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgY2FzZSAnY29sb3ItcHJpbWFyeSc6XG4gICAgICBjYXNlICdjb2xvci1zZWNvbmRhcnknOiB7XG4gICAgICAgIHNldENvbG9yKG1hcmtlciwgZm9ybSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVMaW5rKGZvcm0sIGxheWVyKVxuICB9KVxufVxuIiwiaW1wb3J0ICdwZWxsL2Rpc3QvcGVsbC5taW4uY3NzJ1xuaW1wb3J0IHsgaW5pdCB9IGZyb20gJ3BlbGwnXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0RWRpdG9yICh0YXJnZXQ6IEhUTUxUZXh0QXJlYUVsZW1lbnQpIHtcbiAgY29uc3QgZWRpdG9yID0gaW5pdCh7XG4gICAgZWxlbWVudDogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2VkaXRvcicpLFxuICAgIG9uQ2hhbmdlOiBodG1sID0+IHtcbiAgICAgIHRhcmdldC52YWx1ZSA9IGh0bWxcbiAgICAgIHRhcmdldC5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpXG4gICAgfSxcbiAgICBhY3Rpb25zOiBbJ2hlYWRpbmcxJywgJ2hlYWRpbmcyJywgJ2JvbGQnLCAnaXRhbGljJywgJ3BhcmFncmFwaCcsICdvbGlzdCcsICdsaW5rJywgJ2ltYWdlJywgJ2xpbmUnXVxuICB9KVxuXG4gIHRhcmdldC5mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgKCkgPT4ge1xuICAgIGVkaXRvci5jb250ZW50LmlubmVySFRNTCA9ICcnXG4gIH0pXG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgdmFsdWUgKCkge1xuICAgICAgcmV0dXJuIGVkaXRvci5jb250ZW50LmlubmVySFRNTFxuICAgIH0sXG5cbiAgICBzZXQgdmFsdWUgKHZhbHVlKSB7XG4gICAgICB0YXJnZXQudmFsdWUgPSBlZGl0b3IuY29udGVudC5pbm5lckhUTUwgPSB2YWx1ZVxuICAgIH1cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==